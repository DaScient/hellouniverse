{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/quantum?scriptVersionId=229482384\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"596293b4-71b8-4e9f-89ae-a9c0a50c5180","cell_type":"markdown","source":"# Quantum Teleportation and the Dawn of the Quantum Internet with Cirq\n### A Hands-on Journey Using Google’s Cirq\n\nWelcome to this advanced project exploring quantum teleportation – a protocol that transfers quantum state information between remote nodes without moving the physical particle. In this notebook, we dive deep into the theory, build and simulate a teleportation circuit using **Cirq**, add realistic noise, visualize qubit states on the Bloch sphere, and enable interactive experimentation.","metadata":{}},{"id":"fc01b0fc-8edc-48b6-8f41-78ea9623e00e","cell_type":"markdown","source":"## Abstract\n\nThis project simulates quantum teleportation—the transfer of an arbitrary qubit state from one location to another—using Cirq. We detail the underlying theory, construct a teleportation circuit, simulate both noise-free and noisy channels, and visualize the qubit states via the Bloch sphere. The interactive section further allows you to customize state parameters and explore the protocol’s robustness, all within a forward‑thinking, resourceful framework geared for next‑generation quantum networks.","metadata":{}},{"id":"f2d92bde-2d74-45f0-b04b-34cc6a07fab0","cell_type":"markdown","source":"## Table of Contents\n1. [Introduction & Background](#Introduction)\n2. [Quantum Teleportation Theory](#Theory)\n3. [Circuit Construction and Explanation](#Circuit)\n4. [Teleportation Implementation with Cirq](#Implementation)\n5. [Bloch Sphere Visualization](#BlochSphere)\n6. [Noise Simulation and Fidelity Analysis](#Noise)\n7. [Interactive Exploration](#Interactive)\n8. [Summary and Future Directions](#Summary)\n9. [Further Reading & References](#References)","metadata":{}},{"id":"0319e11b-f06b-4ca9-8752-0be5b9305aec","cell_type":"markdown","source":"## 1. Introduction & Background <a id=\"Introduction\"></a>\n\nQuantum teleportation is one of the foundational protocols for realizing secure communication and distributed quantum computing. It enables the transfer of a quantum state from one node (Alice) to another (Bob) by exploiting entanglement and classical communication. This notebook leverages **Cirq** to implement and simulate teleportation, illustrating key ideas behind a future quantum internet.\n\n**Prerequisites:**\n- Basic understanding of quantum computing and qubit representation.\n- Familiarity with Python and an installation of Cirq (e.g., via `pip install cirq`).","metadata":{}},{"id":"94b15719-ae79-4144-be3c-e8865066ec37","cell_type":"markdown","source":"## 2. Quantum Teleportation Theory <a id=\"Theory\"></a>\n\nThe teleportation protocol relies on three essential elements:\n\n- **Entanglement:** A pair of qubits (one with Alice and one with Bob) is prepared in a maximally entangled Bell state.\n- **Bell-State Measurement:** Alice performs a joint measurement on the qubit to be teleported and her half of the entangled pair, projecting the state into one of four possible Bell states.\n- **Classical Communication and Correction:** Alice sends her two-bit measurement result to Bob, who then applies the appropriate corrections (X and/or Z gates) to recover the original quantum state.\n\nMathematically, if the state to be teleported is \\( |\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle \\) and the entangled pair is in \\( |\\Phi^+\\rangle = \\frac{1}{\\sqrt{2}}(|00\\rangle + |11\\rangle) \\), then after the Bell measurement and appropriate corrections, Bob’s qubit is transformed into \\( |\\psi\\rangle \\).\n\nThis protocol not only demonstrates non-locality in quantum mechanics but also forms a building block for distributed quantum computation and the quantum internet.","metadata":{}},{"id":"9b656967-1ba9-4675-8201-96be9b1231c4","cell_type":"markdown","source":"## 3. Circuit Construction and Explanation <a id=\"Circuit\"></a>\n\nIn our teleportation circuit, we utilize three qubits:\n\n- **q0:** The qubit carrying the state \\( |\\psi\\rangle \\) to be teleported (Alice’s qubit).\n- **q1:** Alice’s half of the entangled pair.\n- **q2:** Bob’s half of the entangled pair (receiver).\n\nThe circuit is built in the following steps:\n\n1. **State Preparation:** Prepare the state \\( |\\psi\\rangle \\) on qubit q0 (e.g., by applying appropriate rotations).\n2. **Entanglement Generation:** Entangle q1 and q2 using a Hadamard gate on q1 and a CNOT gate from q1 to q2.\n3. **Bell Measurement (Alice):** Apply a CNOT (q0 → q1) and a Hadamard on q0, then measure q0 and q1. (Since Cirq lacks native classical control, we will process measurement outcomes in Python.)\n4. **Conditional Corrections (Bob):** Depending on the measurement outcomes, apply a Z gate (if q0 measured as 1) and an X gate (if q1 measured as 1) to q2 to recover \\( |\\psi\\rangle \\).\n\nThe following cells implement these steps.","metadata":{}},{"id":"c0930165-95ce-4725-85dc-058a9673ee26","cell_type":"markdown","source":"## 4. Teleportation Implementation with Cirq <a id=\"Implementation\"></a>\n\nThe code below constructs the teleportation circuit in Cirq. Because Cirq does not support conditional operations within the circuit natively, we simulate the process in two stages:\n\n1. **Stage 1:** Build the circuit up to the measurement and run it to obtain Alice’s measurement outcomes.\n2. **Stage 2:** Based on these outcomes, apply the corresponding correction gates to Bob’s qubit and then analyze the final state.\n\nRun the cell below to simulate one teleportation event.","metadata":{}},{"id":"d701c661-82f4-474b-9cb4-d9c75aa308aa","cell_type":"code","source":"!pip install cirq ipywidgets","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-24T17:44:52.701384Z","iopub.execute_input":"2025-03-24T17:44:52.701674Z","iopub.status.idle":"2025-03-24T17:45:10.936332Z","shell.execute_reply.started":"2025-03-24T17:44:52.701624Z","shell.execute_reply":"2025-03-24T17:45:10.935304Z"}},"outputs":[{"name":"stdout","text":"Collecting cirq\n  Downloading cirq-1.4.1-py3-none-any.whl.metadata (7.4 kB)\nRequirement already satisfied: ipywidgets in /usr/local/lib/python3.10/dist-packages (8.1.5)\nCollecting cirq-aqt==1.4.1 (from cirq)\n  Downloading cirq_aqt-1.4.1-py3-none-any.whl.metadata (1.6 kB)\nCollecting cirq-core==1.4.1 (from cirq)\n  Downloading cirq_core-1.4.1-py3-none-any.whl.metadata (1.8 kB)\nCollecting cirq-google==1.4.1 (from cirq)\n  Downloading cirq_google-1.4.1-py3-none-any.whl.metadata (2.0 kB)\nCollecting cirq-ionq==1.4.1 (from cirq)\n  Downloading cirq_ionq-1.4.1-py3-none-any.whl.metadata (1.6 kB)\nCollecting cirq-pasqal==1.4.1 (from cirq)\n  Downloading cirq_pasqal-1.4.1-py3-none-any.whl.metadata (1.6 kB)\nCollecting cirq-rigetti==1.4.1 (from cirq)\n  Downloading cirq_rigetti-1.4.1-py3-none-any.whl.metadata (1.7 kB)\nCollecting cirq-web==1.4.1 (from cirq)\n  Downloading cirq_web-1.4.1-py3-none-any.whl.metadata (2.6 kB)\nRequirement already satisfied: requests~=2.18 in /usr/local/lib/python3.10/dist-packages (from cirq-aqt==1.4.1->cirq) (2.32.3)\nRequirement already satisfied: attrs>=21.3.0 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (25.1.0)\nCollecting duet>=0.2.8 (from cirq-core==1.4.1->cirq)\n  Downloading duet-0.2.9-py3-none-any.whl.metadata (2.3 kB)\nRequirement already satisfied: matplotlib~=3.0 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (3.7.5)\nRequirement already satisfied: networkx>=2.4 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (3.4.2)\nRequirement already satisfied: numpy~=1.22 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (1.26.4)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (2.2.3)\nRequirement already satisfied: sortedcontainers~=2.0 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (2.4.0)\nRequirement already satisfied: scipy~=1.0 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (1.13.1)\nRequirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (1.13.1)\nRequirement already satisfied: typing-extensions>=4.2 in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (4.12.2)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from cirq-core==1.4.1->cirq) (4.67.1)\nRequirement already satisfied: google-api-core>=1.14.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (1.34.1)\nRequirement already satisfied: proto-plus>=1.20.0 in /usr/local/lib/python3.10/dist-packages (from cirq-google==1.4.1->cirq) (1.25.0)\nRequirement already satisfied: protobuf<5.0.0,>=3.15.0 in /usr/local/lib/python3.10/dist-packages (from cirq-google==1.4.1->cirq) (3.20.3)\nCollecting pyquil<5.0.0,>=4.11.0 (from cirq-rigetti==1.4.1->cirq)\n  Downloading pyquil-4.16.1-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (0.2.2)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (7.34.0)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (5.7.1)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (4.0.13)\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (3.0.13)\nRequirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (75.1.0)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (0.19.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (4.4.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (0.7.5)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (3.0.48)\nRequirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (2.19.1)\nRequirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=6.1.0->ipywidgets) (4.9.0)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (1.66.0)\nRequirement already satisfied: google-auth<3.0dev,>=1.25.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (2.27.0)\nRequirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (1.68.1)\nRequirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (1.48.2)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.4)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (4.55.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (1.4.7)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (24.2)\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (11.0.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (3.2.0)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->cirq-core==1.4.1->cirq) (2.9.0.post0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy~=1.22->cirq-core==1.4.1->cirq) (2.4.1)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=6.1.0->ipywidgets) (0.2.13)\nRequirement already satisfied: deprecated<2.0.0,>=1.2.14 in /usr/local/lib/python3.10/dist-packages (from pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.2.15)\nCollecting packaging>=20.0 (from matplotlib~=3.0->cirq-core==1.4.1->cirq)\n  Downloading packaging-23.2-py3-none-any.whl.metadata (3.2 kB)\nCollecting qcs-sdk-python>=0.20.1 (from pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading qcs_sdk_python-0.21.17-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (7.0 kB)\nCollecting quil>=0.15.3 (from pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading quil-0.16.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.8 kB)\nCollecting rpcq<4.0.0,>=3.11.0 (from pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading rpcq-3.11.0.tar.gz (45 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.6/45.6 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\nCollecting types-deprecated<2.0.0.0,>=1.2.9.3 (from pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading types_deprecated-1.2.15.20250304-py3-none-any.whl.metadata (2.0 kB)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests~=2.18->cirq-aqt==1.4.1->cirq) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests~=2.18->cirq-aqt==1.4.1->cirq) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests~=2.18->cirq-aqt==1.4.1->cirq) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests~=2.18->cirq-aqt==1.4.1->cirq) (2025.1.31)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->cirq-core==1.4.1->cirq) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->cirq-core==1.4.1->cirq) (2025.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->cirq-core==1.4.1->cirq) (1.3.0)\nRequirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated<2.0.0,>=1.2.14->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.17.0)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0dev,>=1.25.0->google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (5.5.0)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0dev,>=1.25.0->google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0dev,>=1.25.0->google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (4.9)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib~=3.0->cirq-core==1.4.1->cirq) (1.17.0)\nCollecting qcs-api-client-common>=0.11.8 (from qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading qcs_api_client_common-0.11.8-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (2.5 kB)\nRequirement already satisfied: msgpack<2.0,>=0.6 in /usr/local/lib/python3.10/dist-packages (from rpcq<4.0.0,>=3.11.0->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.1.0)\nCollecting python-rapidjson (from rpcq<4.0.0,>=3.11.0->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading python_rapidjson-1.20-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (22 kB)\nRequirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.10/dist-packages (from rpcq<4.0.0,>=3.11.0->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (24.0.1)\nCollecting ruamel.yaml (from rpcq<4.0.0,>=3.11.0->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading ruamel.yaml-0.18.10-py3-none-any.whl.metadata (23 kB)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy~=1.22->cirq-core==1.4.1->cirq) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy~=1.22->cirq-core==1.4.1->cirq) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy~=1.22->cirq-core==1.4.1->cirq) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy~=1.22->cirq-core==1.4.1->cirq) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy~=1.22->cirq-core==1.4.1->cirq) (2024.2.0)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0dev,>=1.25.0->google-api-core>=1.14.0->google-api-core[grpc]>=1.14.0->cirq-google==1.4.1->cirq) (0.6.1)\nCollecting grpc-interceptor>=0.15.0 (from qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading grpc_interceptor-0.15.4-py3-none-any.whl.metadata (8.4 kB)\nRequirement already satisfied: httpx>=0.27.0 in /usr/local/lib/python3.10/dist-packages (from qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (0.28.1)\nCollecting ruamel.yaml.clib>=0.2.7 (from ruamel.yaml->rpcq<4.0.0,>=3.11.0->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq)\n  Downloading ruamel.yaml.clib-0.2.12-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.7 kB)\nRequirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.27.0->qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (3.7.1)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.27.0->qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.0.7)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.27.0->qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (0.14.0)\nRequirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.27.0->qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.3.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.27.0->qcs-api-client-common>=0.11.8->qcs-sdk-python>=0.20.1->pyquil<5.0.0,>=4.11.0->cirq-rigetti==1.4.1->cirq) (1.2.2)\nDownloading cirq-1.4.1-py3-none-any.whl (8.0 kB)\nDownloading cirq_aqt-1.4.1-py3-none-any.whl (30 kB)\nDownloading cirq_core-1.4.1-py3-none-any.whl (1.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m26.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading cirq_google-1.4.1-py3-none-any.whl (532 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m532.7/532.7 kB\u001b[0m \u001b[31m30.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading cirq_ionq-1.4.1-py3-none-any.whl (60 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.5/60.5 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading cirq_pasqal-1.4.1-py3-none-any.whl (31 kB)\nDownloading cirq_rigetti-1.4.1-py3-none-any.whl (69 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m69.3/69.3 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading cirq_web-1.4.1-py3-none-any.whl (596 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m596.5/596.5 kB\u001b[0m \u001b[31m35.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading duet-0.2.9-py3-none-any.whl (29 kB)\nDownloading pyquil-4.16.1-py3-none-any.whl (203 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m203.2/203.2 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading packaging-23.2-py3-none-any.whl (53 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.0/53.0 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading qcs_sdk_python-0.21.17-cp310-cp310-manylinux_2_28_x86_64.whl (6.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.5/6.5 MB\u001b[0m \u001b[31m55.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0mm\n\u001b[?25hDownloading quil-0.16.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m65.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading types_deprecated-1.2.15.20250304-py3-none-any.whl (8.6 kB)\nDownloading qcs_api_client_common-0.11.8-cp310-cp310-manylinux_2_28_x86_64.whl (2.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.7/2.7 MB\u001b[0m \u001b[31m74.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading python_rapidjson-1.20-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m60.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading ruamel.yaml-0.18.10-py3-none-any.whl (117 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m117.7/117.7 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading grpc_interceptor-0.15.4-py3-none-any.whl (20 kB)\nDownloading ruamel.yaml.clib-0.2.12-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (722 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m722.2/722.2 kB\u001b[0m \u001b[31m38.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hBuilding wheels for collected packages: rpcq\n  Building wheel for rpcq (setup.py) ... \u001b[?25l\u001b[?25hdone\n  Created wheel for rpcq: filename=rpcq-3.11.0-py3-none-any.whl size=45967 sha256=3609d54f4b48770116bc2b79b66c97e6e3d04f297d91e1b14a7991bad19135cc\n  Stored in directory: /root/.cache/pip/wheels/91/97/0a/b384d94155345284ec00712ab814cbfb5bc2b631080b4fa4c3\nSuccessfully built rpcq\nInstalling collected packages: types-deprecated, ruamel.yaml.clib, python-rapidjson, packaging, grpc-interceptor, duet, ruamel.yaml, rpcq, qcs-api-client-common, quil, qcs-sdk-python, pyquil, cirq-core, cirq-web, cirq-rigetti, cirq-pasqal, cirq-ionq, cirq-google, cirq-aqt, cirq\n  Attempting uninstall: packaging\n    Found existing installation: packaging 24.2\n    Uninstalling packaging-24.2:\n      Successfully uninstalled packaging-24.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nmlxtend 0.23.3 requires scikit-learn>=1.3.1, but you have scikit-learn 1.2.2 which is incompatible.\npandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\nplotnine 0.14.4 requires matplotlib>=3.8.0, but you have matplotlib 3.7.5 which is incompatible.\ntensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, but you have tensorflow 2.17.1 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed cirq-1.4.1 cirq-aqt-1.4.1 cirq-core-1.4.1 cirq-google-1.4.1 cirq-ionq-1.4.1 cirq-pasqal-1.4.1 cirq-rigetti-1.4.1 cirq-web-1.4.1 duet-0.2.9 grpc-interceptor-0.15.4 packaging-23.2 pyquil-4.16.1 python-rapidjson-1.20 qcs-api-client-common-0.11.8 qcs-sdk-python-0.21.17 quil-0.16.0 rpcq-3.11.0 ruamel.yaml-0.18.10 ruamel.yaml.clib-0.2.12 types-deprecated-1.2.15.20250304\n","output_type":"stream"}],"execution_count":1},{"id":"b77015b7-49aa-459f-b498-32fec2425f08","cell_type":"code","source":"import cirq\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define three qubits for the teleportation protocol\nq0, q1, q2 = cirq.LineQubit.range(3)\n\n# Build the circuit up to measurement (Stage 1)\nteleportation_circuit = cirq.Circuit()\n\n# --- State Preparation ---\n# For example, prepare |+> on q0 using a Hadamard gate\nteleportation_circuit.append(cirq.H(q0))\n\n# --- Entanglement Generation ---\nteleportation_circuit.append(cirq.H(q1))\nteleportation_circuit.append(cirq.CNOT(q1, q2))\n\n# --- Bell Measurement (Alice) ---\nteleportation_circuit.append(cirq.CNOT(q0, q1))\nteleportation_circuit.append(cirq.H(q0))\nteleportation_circuit.append(cirq.measure(q0, key='m0'))\nteleportation_circuit.append(cirq.measure(q1, key='m1'))\n\nprint(\"--- Teleportation Circuit (Stage 1) ---\")\nprint(teleportation_circuit)\n\n# Simulate Stage 1 to get measurement outcomes\nsimulator = cirq.Simulator()\nresult = simulator.run(teleportation_circuit, repetitions=1)\nm0 = int(result.measurements['m0'][0][0])\nm1 = int(result.measurements['m1'][0][0])\nprint(f\"Measurement outcomes: m0 = {m0}, m1 = {m1}\")\n\n# --- Stage 2: Apply Conditional Corrections on q2 (Bob) ---\ncorrection_circuit = cirq.Circuit()\nif m0 == 1:\n    correction_circuit.append(cirq.Z(q2))\nif m1 == 1:\n    correction_circuit.append(cirq.X(q2))\n\nprint(\"--- Correction Circuit (Stage 2) ---\")\nprint(correction_circuit)\n\n# Combine the circuits for a full simulation with corrections\n# Note: We simulate the final state of Bob's qubit by appending the correction circuit after the measurement\nfull_circuit = teleportation_circuit + correction_circuit\n\n# Since measurements collapse the state, we reconstruct the state vector after corrections by\n# simulating a branch of the circuit corresponding to the measured outcomes.\n\n# For demonstration, we simulate the unitary part (ignoring measurement) using the following trick:\n# We create a new circuit that prepares the same initial state on q0, builds the entanglement, applies the same operations,\n# and then directly applies the correction gates conditioned on the classical outcomes we obtained.\n\n# Build a deferred-measurement version of the circuit\ndeferred_circuit = cirq.Circuit()\ndeferred_circuit.append(cirq.H(q0))\ndeferred_circuit.append(cirq.H(q1))\ndeferred_circuit.append(cirq.CNOT(q1, q2))\ndeferred_circuit.append(cirq.CNOT(q0, q1))\ndeferred_circuit.append(cirq.H(q0))\n\n# Append the same correction gates based on measured outcomes\nif m0 == 1:\n    deferred_circuit.append(cirq.Z(q2))\nif m1 == 1:\n    deferred_circuit.append(cirq.X(q2))\n\nprint(\"--- Deferred Measurement Circuit with Corrections ---\")\nprint(deferred_circuit)\n\n# Simulate the final state vector of the full circuit\nfinal_state = simulator.simulate(deferred_circuit).final_state_vector\n\n# For simplicity, extract Bob's qubit (q2) state by reshaping the state vector\n# Here we assume qubits are ordered as [q0, q1, q2]\nstate_vector_bob = np.zeros(2, dtype=complex)\nfor i in range(len(final_state)):\n    # Binary representation of index i padded to 3 bits\n    b = format(i, '03b')\n    # If q0 and q1 are in the |00> branch (which they should be after correction), add amplitude to Bob's state\n    if b[0:2] == '00':\n        state_vector_bob[int(b[2])] += final_state[i]\n\nprint(\"Bob's final state vector:\", state_vector_bob)\n\n# Compute fidelity with the initial state |+> = (|0> + |1>)/sqrt(2)\ninitial_state = np.array([1/np.sqrt(2), 1/np.sqrt(2)], dtype=complex)\nfidelity = np.abs(np.vdot(initial_state, state_vector_bob))**2\nprint(f\"Fidelity of teleportation: {fidelity:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-24T17:45:10.937477Z","iopub.execute_input":"2025-03-24T17:45:10.937826Z","iopub.status.idle":"2025-03-24T17:45:11.679584Z","shell.execute_reply.started":"2025-03-24T17:45:10.937795Z","shell.execute_reply":"2025-03-24T17:45:11.678285Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-84fc052e786f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mcirq\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Define three qubits for the teleportation protocol\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/cirq/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     30\u001b[0m )\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0m_import\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelay_import\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cirq.protocols'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m     from cirq import (\n\u001b[1;32m     34\u001b[0m         \u001b[0;31m# Core\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/cirq/_import.py\u001b[0m in \u001b[0;36mdelay_import\u001b[0;34m(module_name)\u001b[0m\n\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mwrap_module_executions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrap_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 166\u001b[0;31m         \u001b[0mimportlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimport_module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m     \u001b[0;32myield\u001b[0m  \u001b[0;31m# Run the body of the context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/importlib/__init__.py\u001b[0m in \u001b[0;36mimport_module\u001b[0;34m(name, package)\u001b[0m\n\u001b[1;32m    124\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0mlevel\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 126\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_bootstrap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_gcd_import\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpackage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_gcd_import\u001b[0;34m(name, package, level)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_spec\u001b[0;34m(name, path, target)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/cirq/_import.py\u001b[0m in \u001b[0;36mfind_spec\u001b[0;34m(self, fullname, path, target)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfind_spec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfullname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0mcomponents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfullname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m         \u001b[0mspec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_spec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfullname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mspec\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: DaskFinder.find_spec() got an unexpected keyword argument 'path'"],"ename":"TypeError","evalue":"DaskFinder.find_spec() got an unexpected keyword argument 'path'","output_type":"error"}],"execution_count":2},{"id":"114f2c03-1cd9-4837-9a60-b8b9c073eced","cell_type":"markdown","source":"## 5. Bloch Sphere Visualization <a id=\"BlochSphere\"></a>\n\nTo gain insight into the qubit states, we visualize the Bloch sphere representation of Bob's final state. The Bloch vector components for a state \\( |\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle \\) are:\n\n- \\(x = 2\\,\\text{Re}(\\alpha^*\\beta)\\)\n- \\(y = 2\\,\\text{Im}(\\alpha^*\\beta)\\)\n- \\(z = |\\alpha|^2 - |\\beta|^2\\)\n\nThe cell below defines helper functions to compute and plot the Bloch vector.","metadata":{}},{"id":"4d8d9f48-ed05-4b33-b552-ae0088517e8e","cell_type":"code","source":"from mpl_toolkits.mplot3d import Axes3D\n\ndef state_to_bloch_vector(state):\n    # state: 1D array [alpha, beta]\n    alpha, beta = state[0], state[1]\n    x = 2 * np.real(np.conj(alpha) * beta)\n    y = 2 * np.imag(np.conj(alpha) * beta)\n    z = np.abs(alpha)**2 - np.abs(beta)**2\n    return np.array([x, y, z])\n\ndef plot_bloch_vector(b):\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    # Create a wireframe sphere\n    u = np.linspace(0, 2*np.pi, 100)\n    v = np.linspace(0, np.pi, 100)\n    x = np.outer(np.cos(u), np.sin(v))\n    y = np.outer(np.sin(u), np.sin(v))\n    z = np.outer(np.ones(np.size(u)), np.cos(v))\n    ax.plot_wireframe(x, y, z, color='gray', alpha=0.2)\n    # Plot the Bloch vector\n    ax.quiver(0, 0, 0, b[0], b[1], b[2], color='red', arrow_length_ratio=0.2, linewidth=2)\n    ax.set_xlim([-1,1])\n    ax.set_ylim([-1,1])\n    ax.set_zlim([-1,1])\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    plt.title('Bloch Sphere Representation')\n    plt.show()\n\n# Compute and plot the Bloch vector for Bob's final state\nbloch_vec = state_to_bloch_vector(state_vector_bob)\nprint(\"Bloch vector for Bob's state:\", bloch_vec)\nplot_bloch_vector(bloch_vec)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-24T17:45:11.680043Z","iopub.status.idle":"2025-03-24T17:45:11.680316Z","shell.execute_reply":"2025-03-24T17:45:11.680208Z"}},"outputs":[],"execution_count":null},{"id":"d10d0a92-f71d-4bc7-8f7f-2f5e236a7039","cell_type":"markdown","source":"## 6. Noise Simulation and Fidelity Analysis <a id=\"Noise\"></a>\n\nIn realistic quantum devices, noise is unavoidable. We now simulate the teleportation protocol under a depolarizing noise model using Cirq's built‑in noise channels. This section shows how noise affects teleportation fidelity.\n\nBelow, we add depolarizing noise to each gate in a new circuit and compare the fidelity of the teleported state.","metadata":{}},{"id":"fa7cef41-0f85-4687-bb50-8dab5cd69103","cell_type":"code","source":"import cirq\n\n# Define a depolarizing noise channel (for a single qubit gate)\ndef depolarizing_channel(prob):\n    return cirq.DepolarizingChannel(prob)\n\n# Create a noisy simulator by defining a noise model\nnoise = cirq.ConstantQubitNoiseModel(depolarizing_channel(0.005))\n\n# Build the deferred measurement circuit as before, but now simulate with noise\nnoisy_circuit = deferred_circuit\nprint(\"--- Noisy Deferred Circuit ---\")\nprint(noisy_circuit)\n\n# Simulate with noise\nnoisy_state = cirq.Simulator(noise=noise).simulate(noisy_circuit).final_state_vector\n\n# Extract Bob's qubit state (assuming q0, q1 in |00>)\nstate_vector_bob_noisy = np.zeros(2, dtype=complex)\nfor i in range(len(noisy_state)):\n    b = format(i, '03b')\n    if b[0:2] == '00':\n        state_vector_bob_noisy[int(b[2])] += noisy_state[i]\n\nfidelity_noisy = np.abs(np.vdot(initial_state, state_vector_bob_noisy))**2\nprint(f\"Noisy Teleportation Fidelity: {fidelity_noisy:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-24T17:45:11.681103Z","iopub.status.idle":"2025-03-24T17:45:11.681464Z","shell.execute_reply":"2025-03-24T17:45:11.681302Z"}},"outputs":[],"execution_count":null},{"id":"15cf78d5-6dca-4736-bbff-9911989ae162","cell_type":"markdown","source":"## 7. Interactive Exploration <a id=\"Interactive\"></a>\n\nUse the interactive widget below to adjust the state preparation parameters for q0. Modify the rotation angles (\\(\\theta\\) and \\(\\phi\\)) and observe how the teleportation outcome changes. This helps you explore the protocol’s robustness and the effects of noise.\n\nMake sure you have `ipywidgets` installed (e.g., via `pip install ipywidgets`).","metadata":{}},{"id":"9e004f00-34df-4a6f-8a5c-a694f4f4de5d","cell_type":"code","source":"import ipywidgets as widgets\nfrom ipywidgets import interact\n\ndef run_teleportation_interactive(theta=0.0, phi=0.0):\n    # Define new qubits\n    q0_int, q1_int, q2_int = cirq.LineQubit.range(3)\n    \n    # Build a circuit with custom state preparation on q0\n    circuit_int = cirq.Circuit()\n    \n    # Prepare an arbitrary state on q0 using RX and RZ rotations\n    circuit_int.append(cirq.rx(theta)(q0_int))\n    circuit_int.append(cirq.rz(phi)(q0_int))\n    \n    # Proceed with entanglement generation\n    circuit_int.append(cirq.H(q1_int))\n    circuit_int.append(cirq.CNOT(q1_int, q2_int))\n    \n    # Bell measurement operations\n    circuit_int.append(cirq.CNOT(q0_int, q1_int))\n    circuit_int.append(cirq.H(q0_int))\n    circuit_int.append(cirq.measure(q0_int, key='m0'))\n    circuit_int.append(cirq.measure(q1_int, key='m1'))\n    \n    # Run measurement to get outcomes\n    result_int = simulator.run(circuit_int, repetitions=1)\n    m0_int = int(result_int.measurements['m0'][0][0])\n    m1_int = int(result_int.measurements['m1'][0][0])\n    print(f\"Interactive measurement outcomes: m0 = {m0_int}, m1 = {m1_int}\")\n    \n    # Build deferred circuit with corrections based on outcomes\n    deferred_int = cirq.Circuit()\n    # Re-prepare the same state on q0\n    deferred_int.append(cirq.rx(theta)(q0_int))\n    deferred_int.append(cirq.rz(phi)(q0_int))\n    \n    deferred_int.append(cirq.H(q1_int))\n    deferred_int.append(cirq.CNOT(q1_int, q2_int))\n    deferred_int.append(cirq.CNOT(q0_int, q1_int))\n    deferred_int.append(cirq.H(q0_int))\n    \n    if m0_int == 1:\n        deferred_int.append(cirq.Z(q2_int))\n    if m1_int == 1:\n        deferred_int.append(cirq.X(q2_int))\n    \n    final_state_int = simulator.simulate(deferred_int).final_state_vector\n    \n    # Extract Bob's state\n    state_bob_int = np.zeros(2, dtype=complex)\n    for i in range(len(final_state_int)):\n        b = format(i, '03b')\n        if b[0:2] == '00':\n            state_bob_int[int(b[2])] += final_state_int[i]\n    \n    fidelity_int = np.abs(np.vdot(initial_state, state_bob_int))**2\n    print(f\"Interactive Teleportation Fidelity: {fidelity_int:.4f}\")\n    \n    # Compute and plot Bloch vector for Bob's state\n    bloch_int = state_to_bloch_vector(state_bob_int)\n    plot_bloch_vector(bloch_int)\n\ninteract(run_teleportation_interactive, \n         theta=widgets.FloatSlider(min=0, max=2*np.pi, step=0.1, value=0), \n         phi=widgets.FloatSlider(min=0, max=2*np.pi, step=0.1, value=0));","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-24T17:45:11.682458Z","iopub.status.idle":"2025-03-24T17:45:11.682842Z","shell.execute_reply":"2025-03-24T17:45:11.682655Z"}},"outputs":[],"execution_count":null},{"id":"014784cf-976d-41fd-b34c-2622e4b53615","cell_type":"markdown","source":"## 8. Summary and Future Directions <a id=\"Summary\"></a>\n\nIn this notebook we have:\n\n- Detailed the theory behind quantum teleportation and its significance for quantum networking.\n- Constructed a quantum teleportation circuit using Cirq and simulated the protocol in two stages (measurement and conditional correction).\n- Visualized the state of Bob’s qubit on the Bloch sphere.\n- Simulated the effects of realistic depolarizing noise and analyzed the fidelity of teleportation.\n- Enabled interactive exploration of state preparation parameters.\n\nFuture work includes integrating more advanced noise models, extending the protocol to multi-qubit teleportation, and exploring remote quantum logic for distributed quantum computing.\n\nThis project is designed to be a comprehensive resource and a forward‑thinking blueprint for future quantum internet architectures.","metadata":{}},{"id":"5b9a4a6d-e04e-4072-b6bd-962f37a6a68f","cell_type":"markdown","source":"## 9. Further Reading & References <a id=\"References\"></a>\n\n- [Cirq Documentation](https://cirq.readthedocs.io/)\n- [Google’s Quantum AI](https://quantumai.google/)\n- [Quantum Teleportation – Theory and Experiment](https://arxiv.org/abs/quant-ph/0303108)\n- [Review of Quantum Information](https://doi.org/10.1103/RevModPhys.81.865)\n- [Quantum Internet Alliance](https://quantum-internet.alliance/)\n\nFor deeper study, consult recent research publications on distributed quantum computing and photonic quantum interfaces.","metadata":{}}]}