{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.x"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/quantum?scriptVersionId=229450292\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"4bf6387a-a61e-40db-aec9-fe2672ce1818","cell_type":"markdown","source":"# Quantum Teleportation and the Dawn of the Quantum Internet\n### A Hands-on Journey Using Qiskit\n\nWelcome to this advanced project exploring quantum teleportation – a key protocol for secure quantum communication and the building blocks for a future quantum internet. In this notebook, we dive deep into the theory, practical implementation, visualization, noise effects, and interactive experimentation with IBM’s Qiskit framework.","metadata":{}},{"id":"f0e075ae-15a6-446a-8f68-c85927adcc7f","cell_type":"code","source":"!pip install qiskit ipywidgets","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"ce92a3d0-7f64-4cef-b406-61dbdaccd829","cell_type":"markdown","source":"## Abstract\n\nIn this project, we simulate quantum teleportation—the transfer of quantum state information between remote quantum processors—using Qiskit. We cover the underlying theory, construct and explain a quantum circuit for teleportation, simulate the protocol on a noise-free and noisy backend, visualize quantum states on the Bloch sphere, and provide an interactive section for experimentation. We also discuss recent breakthroughs in distributed quantum computing and photonic interfaces, paving the way toward a quantum internet.","metadata":{}},{"id":"5a62b300-1dc9-4972-90b8-ab6859f2e5d6","cell_type":"markdown","source":"## Table of Contents\n1. [Introduction & Background](#Introduction)\n2. [Quantum Teleportation Theory](#Theory)\n3. [Circuit Construction and Explanation](#Circuit)\n4. [Teleportation in Practice with Qiskit](#Implementation)\n5. [Visualizing the Bloch Sphere](#BlochSphere)\n6. [Noise Simulation and Fidelity Analysis](#Noise)\n7. [Advanced Topics: Distributed Quantum Logic](#Advanced)\n8. [Interactive Exploration](#Interactive)\n9. [Summary and Future Directions](#Summary)\n10. [Further Reading & References](#References)","metadata":{}},{"id":"854208a3-9005-41bb-9b46-dacfb8ccd06a","cell_type":"markdown","source":"## Introduction & Background <a id=\"Introduction\"></a>\n\nQuantum teleportation is one of the most fascinating protocols in quantum information science. It enables the transfer of a quantum state from one location to another without moving the physical particle, relying on entanglement, Bell-state measurements, and classical communication. This project illustrates these concepts using Qiskit and serves as a stepping stone toward understanding the architecture of a quantum internet.\n\n**Prerequisites:**\n- Basic knowledge of quantum computing and qubit representation.\n- Familiarity with Qiskit and Python programming.\n- An installation of Qiskit (e.g., via `pip install qiskit`).","metadata":{}},{"id":"2db7fe76-1696-4974-b7c3-0a6de52ed609","cell_type":"markdown","source":"## Quantum Teleportation Theory <a id=\"Theory\"></a>\n\nThe teleportation protocol relies on three main ingredients:\n\n- **Entanglement:** A pair of qubits (one with Alice and one with Bob) is prepared in a maximally entangled state (a Bell state).\n- **Bell-State Measurement:** Alice performs a joint measurement on the qubit to be teleported and her half of the entangled pair. This projects the combined state into one of the four Bell states.\n- **Classical Communication and Correction:** Alice sends her measurement results (two classical bits) to Bob, who then applies the appropriate quantum gates (corrections) to recover the original state.\n\nMathematically, if the state to be teleported is \\( |\\psi\\rangle = \\alpha |0\\rangle + \\beta |1\\rangle \\) and the entangled pair is in the Bell state \\( |\\Phi^+\\rangle = \\frac{1}{\\sqrt{2}}(|00\\rangle+|11\\rangle) \\), then after the Bell measurement and corrections, Bob's qubit becomes \\( |\\psi\\rangle \\).\n\nThis protocol forms the basis for more advanced schemes, including distributed quantum computation and secure quantum networks.","metadata":{}},{"id":"5ceb9601-438a-4e46-9130-bea98df0c05c","cell_type":"markdown","source":"## Circuit Construction and Explanation <a id=\"Circuit\"></a>\n\nIn our teleportation circuit we use three qubits:\n\n- **q[0]:** The state to be teleported (Alice’s qubit).\n- **q[1]:** Alice’s half of the entangled pair.\n- **q[2]:** Bob’s half of the entangled pair (receiver).\n\nThe circuit is constructed in the following steps:\n\n1. **State Preparation:** Prepare the state \\( |\\psi\\rangle \\) (e.g., the \\(|+\\rangle\\) state) on qubit 0.\n2. **Entanglement Generation:** Entangle qubits 1 and 2 using a Hadamard gate followed by a CNOT gate.\n3. **Bell Measurement:** Apply CNOT and Hadamard gates on qubits 0 and 1, then measure both.\n4. **Conditional Corrections:** Depending on the measurement outcomes, apply corrective gates (X and/or Z) on qubit 2 to reconstruct \\( |\\psi\\rangle \\).","metadata":{}},{"id":"fbef7849-7956-4bb4-93b5-c33d677ec14d","cell_type":"markdown","source":"## Teleportation in Practice with Qiskit <a id=\"Implementation\"></a>\n\nBelow is the full Qiskit implementation of the quantum teleportation protocol. The code is richly commented to explain each step.\n\nRun the following cell to simulate quantum teleportation on a noise-free backend.","metadata":{}},{"id":"708f1f0d-6152-4d43-b37b-03bf4dfacc90","cell_type":"code","source":"# Import required modules from Qiskit and other libraries\nfrom qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister, Aer, execute, transpile\nfrom qiskit.visualization import plot_bloch_multivector, plot_histogram\nfrom qiskit.quantum_info import Statevector\nimport matplotlib.pyplot as plt\n\n# STEP 0: Create registers and a quantum circuit\nqr = QuantumRegister(3, name='q')\ncr = ClassicalRegister(2, name='c')\nqc = QuantumCircuit(qr, cr)\n\n# STEP 1: Prepare the input state on qubit 0 (e.g., |+> state)\nqc.h(qr[0])\n\n# STEP 2: Create an entangled pair between qubits 1 and 2\nqc.h(qr[1])\nqc.cx(qr[1], qr[2])\n\n# STEP 3: Perform Bell measurement on qubits 0 and 1\nqc.cx(qr[0], qr[1])\nqc.h(qr[0])\nqc.measure(qr[0], cr[0])\nqc.measure(qr[1], cr[1])\n\n# STEP 4: Apply conditional corrections on qubit 2\n# Correction strategy: if measurement outcomes indicate, apply X and Z gates accordingly.\n# For simplicity, we use two separate conditional operations.\nqc.x(qr[2]).c_if(cr, 2)  # If the classical value equals 2 (binary 10), apply X\nqc.z(qr[2]).c_if(cr, 1)  # If the classical value equals 1 (binary 01), apply Z\n\n# Visualize the quantum circuit\ndisplay(qc.draw('mpl'))\n\n# Simulate the circuit using the Qiskit Aer simulator\nsimulator = Aer.get_backend('aer_simulator')\ncompiled_qc = transpile(qc, simulator)\nresult = execute(compiled_qc, simulator, shots=1024).result()\ncounts = result.get_counts(compiled_qc)\n\n# Plot measurement outcomes\nplot_histogram(counts, title=\"Teleportation Measurement Outcomes\")\nplt.show()","metadata":{},"outputs":[],"execution_count":null},{"id":"2eda8831-6679-4913-9c68-a083b58565ec","cell_type":"markdown","source":"## Visualizing the Bloch Sphere <a id=\"BlochSphere\"></a>\n\nVisualizing the state of a single qubit on the Bloch sphere provides deep insight into its quantum behavior. The cell below constructs a single-qubit circuit, prepares the \\(|+\\rangle\\) state, and plots its representation on the Bloch sphere.","metadata":{}},{"id":"57e16808-0a36-4e5b-8d82-bfa7c37ee4d6","cell_type":"code","source":"# Create a single-qubit circuit and prepare the |+> state\nqc_init = QuantumCircuit(1)\nqc_init.h(0)\nstate = Statevector.from_instruction(qc_init)\n\n# Plot the Bloch sphere for the state\nplot_bloch_multivector(state)\nplt.show()","metadata":{},"outputs":[],"execution_count":null},{"id":"682e3669-b65f-4356-9ed5-5d22d689df64","cell_type":"markdown","source":"## Noise Simulation and Fidelity Analysis <a id=\"Noise\"></a>\n\nIn a real-world scenario, quantum channels are subject to various noise processes. In this section, we introduce a noise model and analyze its impact on teleportation fidelity.\n\nThe steps include:\n\n- **Defining a Noise Model:** Simulate realistic errors (e.g., depolarizing noise).\n- **Running the Circuit with Noise:** Execute the teleportation circuit on a noisy backend.\n- **Comparing Fidelity:** Analyze how noise affects the probability of successful teleportation.\n\nThis provides insights into error sources and robustness of quantum communication protocols.","metadata":{}},{"id":"7550310d-b72b-4784-9b8f-0947b9cb63db","cell_type":"code","source":"# Import noise model tools from Qiskit\nfrom qiskit.providers.aer.noise import NoiseModel, depolarizing_error\nfrom qiskit.providers.aer.noise.errors import pauli_error\n\n# Create a simple depolarizing noise model for single-qubit gates\nnoise_model = NoiseModel()\n\n# Define a depolarizing error with error probability 0.005\nerror_1q = depolarizing_error(0.005, 1)\n\n# Add the error to all single-qubit gates\nfor gate in ['h', 'x', 'z']:\n    noise_model.add_all_qubit_quantum_error(error_1q, gate)\n\n# Recompile and execute the teleportation circuit on a noisy backend\ncompiled_qc_noisy = transpile(qc, simulator)\nresult_noisy = execute(compiled_qc_noisy, simulator, noise_model=noise_model, shots=1024).result()\ncounts_noisy = result_noisy.get_counts(compiled_qc_noisy)\n\n# Display the noisy measurement outcomes\nplot_histogram(counts_noisy, title=\"Noisy Teleportation Measurement Outcomes\")\nplt.show()\n\n# (Optional) Compare state fidelity if desired using additional Qiskit tools.","metadata":{},"outputs":[],"execution_count":null},{"id":"0f453a6b-39fc-48aa-9d0d-36fd7c20f5b2","cell_type":"markdown","source":"## Advanced Topics: Distributed Quantum Logic <a id=\"Advanced\"></a>\n\nRecent research from Oxford and other institutions has extended the basic teleportation protocol into more sophisticated schemes:\n\n- **Remote Quantum Logic Gates:** Teleportation can be used to implement quantum logic gates between physically separated processors, forming the basis for distributed quantum computation.\n- **Photonic Interfaces:** By leveraging photonic entanglement, these protocols can be executed over long distances, crucial for a scalable quantum internet.\n- **Hybrid Architectures:** Integration of superconducting qubits, trapped ions, or other platforms with photonic links to create robust, networked quantum systems.\n\nWhile our simulation uses standard gate-level teleportation, these advanced ideas push the boundaries of what is possible in networked quantum information processing.","metadata":{}},{"id":"7ddf7c6d-34e8-431d-bcca-9d87ad29fd3a","cell_type":"markdown","source":"## Interactive Exploration <a id=\"Interactive\"></a>\n\nThe following interactive cell allows you to modify the input state parameters (using rotation angles) and observe the effects on teleportation outcomes. Experiment with different settings and noise levels to deepen your understanding.\n\nEnsure you have `ipywidgets` installed (e.g., via `pip install ipywidgets`).","metadata":{}},{"id":"d5b7f1f9-5b61-46b9-a7aa-12f66f061713","cell_type":"code","source":"import numpy as np\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\ndef run_teleportation(theta=0.0, phi=0.0):\n    # Create a new circuit for each run\n    qr_int = QuantumRegister(3, name='q')\n    cr_int = ClassicalRegister(2, name='c')\n    qc_int = QuantumCircuit(qr_int, cr_int)\n\n    # Prepare a custom state on qubit 0 using RX and RZ rotations\n    qc_int.rx(theta, qr_int[0])\n    qc_int.rz(phi, qr_int[0])\n\n    # Continue with entanglement and teleportation as before\n    qc_int.h(qr_int[1])\n    qc_int.cx(qr_int[1], qr_int[2])\n    qc_int.cx(qr_int[0], qr_int[1])\n    qc_int.h(qr_int[0])\n    qc_int.measure(qr_int[0], cr_int[0])\n    qc_int.measure(qr_int[1], cr_int[1])\n\n    # Conditional corrections\n    qc_int.x(qr_int[2]).c_if(cr_int, 2)\n    qc_int.z(qr_int[2]).c_if(cr_int, 1)\n\n    # Simulate on the noise-free backend\n    compiled_qc_int = transpile(qc_int, simulator)\n    result_int = execute(compiled_qc_int, simulator, shots=1024).result()\n    counts_int = result_int.get_counts(compiled_qc_int)\n    \n    display(qc_int.draw('mpl'))\n    plot_histogram(counts_int, title=f\"Teleportation Outcomes (theta={theta:.2f}, phi={phi:.2f})\")\n    plt.show()\n\n# Create interactive sliders for theta and phi (in radians)\ninteract(run_teleportation, theta=widgets.FloatSlider(min=0, max=2*np.pi, step=0.1, value=0),\n         phi=widgets.FloatSlider(min=0, max=2*np.pi, step=0.1, value=0));","metadata":{},"outputs":[],"execution_count":null},{"id":"81a76f90-6d0c-460f-9319-03d6556fe138","cell_type":"markdown","source":"## Summary and Future Directions <a id=\"Summary\"></a>\n\nIn this notebook we have:\n\n- Explored the theoretical underpinnings of quantum teleportation.\n- Built and explained a detailed quantum circuit that implements teleportation.\n- Visualized quantum states using the Bloch sphere.\n- Investigated the impact of realistic noise on the protocol.\n- Provided an interactive framework for further exploration.\n\nLooking ahead, integrating remote quantum logic, robust error correction, and scalable photonic interfaces will be key to realizing a quantum internet. Continue exploring and innovating in this rapidly evolving field!","metadata":{}},{"id":"0017fa02-9e63-4eef-8b89-73e0ff301e52","cell_type":"markdown","source":"## Further Reading & References <a id=\"References\"></a>\n\n- [Qiskit Documentation](https://qiskit.org/documentation/)\n- [Qiskit Textbook](https://qiskit.org/textbook/)\n- [IBM Quantum Experience](https://quantum-computing.ibm.com/)\n- [Quantum Internet Alliance](https://quantum-internet.alliance/)\n- [Nature: Oxford Quantum Breakthrough](https://www.nature.com/articles/d41586-019-01746-0)\n\nFor advanced studies, consult recent publications on distributed quantum computing and photonic quantum interfaces.","metadata":{}}]}