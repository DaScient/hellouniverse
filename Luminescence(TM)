{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/luminescence-tm?scriptVersionId=218252190\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"e8e4d0bb","metadata":{"papermill":{"duration":0.002743,"end_time":"2025-01-19T03:40:02.816045","exception":false,"start_time":"2025-01-19T03:40:02.813302","status":"completed"},"tags":[]},"source":["# ðŸŒŸ Luminescence: A Computer Vision Learning Journey\n","\n","Welcome to an immersive journey into computer vision and image processing! This notebook will guide you through building a sophisticated image processing application while learning fundamental concepts.\n","\n","## ðŸ“š Module 1: Understanding Digital Images\n","\n","Before we dive into implementation, let's understand how digital images work in computer vision."]},{"cell_type":"code","execution_count":1,"id":"fe2efd1c","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:40:02.822276Z","iopub.status.busy":"2025-01-19T03:40:02.821916Z","iopub.status.idle":"2025-01-19T03:40:02.828743Z","shell.execute_reply":"2025-01-19T03:40:02.827553Z"},"papermill":{"duration":0.011877,"end_time":"2025-01-19T03:40:02.830546","exception":false,"start_time":"2025-01-19T03:40:02.818669","status":"completed"},"tags":[]},"outputs":[],"source":["# Import required libraries\n","import numpy as np\n","from PIL import Image\n","import matplotlib.pyplot as plt\n","\n","# Enable inline plotting\n","%matplotlib inline"]},{"cell_type":"markdown","id":"7fcc0699","metadata":{"papermill":{"duration":0.002134,"end_time":"2025-01-19T03:40:02.835303","exception":false,"start_time":"2025-01-19T03:40:02.833169","status":"completed"},"tags":[]},"source":["### 1.1 Image Representation\n","\n","Digital images are represented as multi-dimensional arrays of numbers. Each pixel contains values representing color intensities:\n","- Grayscale images: Single channel (intensity)\n","- RGB images: Three channels (Red, Green, Blue)\n","- RGBA images: Four channels (Red, Green, Blue, Alpha/transparency)"]},{"cell_type":"code","execution_count":2,"id":"fd8594f2","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:40:02.841063Z","iopub.status.busy":"2025-01-19T03:40:02.840719Z","iopub.status.idle":"2025-01-19T03:40:02.846774Z","shell.execute_reply":"2025-01-19T03:40:02.845763Z"},"papermill":{"duration":0.010829,"end_time":"2025-01-19T03:40:02.84843","exception":false,"start_time":"2025-01-19T03:40:02.837601","status":"completed"},"tags":[]},"outputs":[],"source":["def load_and_display_image(image_path):\n","    \"\"\"Load and display an image with its shape and data type information.\"\"\"\n","    img = Image.open(image_path)\n","    img_array = np.array(img)\n","    \n","    plt.figure(figsize=(12, 4))\n","    \n","    plt.subplot(121)\n","    plt.imshow(img_array)\n","    plt.title('Original Image')\n","    plt.axis('off')\n","    \n","    plt.subplot(122)\n","    plt.text(0.1, 0.5, f'Shape: {img_array.shape}\\nData type: {img_array.dtype}',\n","             fontsize=12)\n","    plt.axis('off')\n","    \n","    plt.show()\n","    \n","    return img_array"]},{"cell_type":"markdown","id":"13090be4","metadata":{"papermill":{"duration":0.002054,"end_time":"2025-01-19T03:40:02.854225","exception":false,"start_time":"2025-01-19T03:40:02.852171","status":"completed"},"tags":[]},"source":["### 1.2 Basic Color Manipulation\n","\n","Let's implement our first image processing function: colorization through sepia tone effect. This will help us understand how to manipulate color channels."]},{"cell_type":"code","execution_count":3,"id":"9a4259bb","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:40:02.860033Z","iopub.status.busy":"2025-01-19T03:40:02.859663Z","iopub.status.idle":"2025-01-19T03:40:02.8666Z","shell.execute_reply":"2025-01-19T03:40:02.865518Z"},"papermill":{"duration":0.011809,"end_time":"2025-01-19T03:40:02.868267","exception":false,"start_time":"2025-01-19T03:40:02.856458","status":"completed"},"tags":[]},"outputs":[],"source":["def apply_sepia(image_array):\n","    \"\"\"Apply sepia tone effect to an image.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image as numpy array\n","        \n","    Returns:\n","        np.ndarray: Sepia-toned image\n","    \"\"\"\n","    # Create copy to avoid modifying original\n","    sepia_array = image_array.copy()\n","    \n","    # Sepia matrix transformation\n","    sepia_matrix = np.array([\n","        [0.393, 0.769, 0.189],\n","        [0.349, 0.686, 0.168],\n","        [0.272, 0.534, 0.131]\n","    ])\n","    \n","    # Apply transformation\n","    sepia_array = np.dot(sepia_array[...,:3], sepia_matrix.T)\n","    \n","    # Clip values to valid range\n","    np.clip(sepia_array, 0, 255, out=sepia_array)\n","    \n","    return sepia_array.astype(np.uint8)\n","\n","# Interactive demonstration\n","def compare_original_and_sepia(image_path):\n","    \"\"\"Display original and sepia-toned versions side by side.\"\"\"\n","    original = np.array(Image.open(image_path))\n","    sepia = apply_sepia(original)\n","    \n","    plt.figure(figsize=(12, 4))\n","    \n","    plt.subplot(121)\n","    plt.imshow(original)\n","    plt.title('Original Image')\n","    plt.axis('off')\n","    \n","    plt.subplot(122)\n","    plt.imshow(sepia)\n","    plt.title('Sepia Tone')\n","    plt.axis('off')\n","    \n","    plt.show()"]},{"cell_type":"markdown","id":"4dca04e6","metadata":{"papermill":{"duration":0.002127,"end_time":"2025-01-19T03:40:02.872989","exception":false,"start_time":"2025-01-19T03:40:02.870862","status":"completed"},"tags":[]},"source":["## ðŸŽ¯ Exercise 1: Color Channel Manipulation\n","\n","Now it's your turn! Try to implement these functions:\n","1. Increase brightness\n","2. Adjust contrast\n","3. Create a custom color filter\n","\n","Use the template below to get started:"]},{"cell_type":"code","execution_count":4,"id":"3edb3d9e","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:40:02.879002Z","iopub.status.busy":"2025-01-19T03:40:02.878635Z","iopub.status.idle":"2025-01-19T03:40:02.883351Z","shell.execute_reply":"2025-01-19T03:40:02.882108Z"},"papermill":{"duration":0.009854,"end_time":"2025-01-19T03:40:02.885183","exception":false,"start_time":"2025-01-19T03:40:02.875329","status":"completed"},"tags":[]},"outputs":[],"source":["def adjust_brightness(image_array, factor):\n","    \"\"\"Adjust image brightness.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image\n","        factor (float): Brightness factor (>1 for brighter, <1 for darker)\n","    \"\"\"\n","    # Your code here\n","    pass\n","\n","def adjust_contrast(image_array, factor):\n","    \"\"\"Adjust image contrast.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image\n","        factor (float): Contrast factor\n","    \"\"\"\n","    # Your code here\n","    pass"]},{"cell_type":"markdown","id":"0c5ca6af","metadata":{"papermill":{"duration":0.002251,"end_time":"2025-01-19T03:40:02.890078","exception":false,"start_time":"2025-01-19T03:40:02.887827","status":"completed"},"tags":[]},"source":["## Coming Up Next\n","\n","In the next section, we'll explore:\n","- Image filtering and convolutions\n","- Edge detection\n","- Building a web interface for our image processor\n","\n","Stay tuned! ðŸš€"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":3.267221,"end_time":"2025-01-19T03:40:03.311719","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-01-19T03:40:00.044498","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}