{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/luminescence-tm?scriptVersionId=218252181\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"71329f7a","metadata":{"papermill":{"duration":0.002885,"end_time":"2025-01-19T03:39:48.76276","exception":false,"start_time":"2025-01-19T03:39:48.759875","status":"completed"},"tags":[]},"source":["# ðŸŒŸ Luminescence: A Computer Vision Learning Journey\n","\n","Welcome to an immersive journey into computer vision and image processing! This notebook will guide you through building a sophisticated image processing application while learning fundamental concepts.\n","\n","## ðŸ“š Module 1: Understanding Digital Images\n","\n","Before we dive into implementation, let's understand how digital images work in computer vision."]},{"cell_type":"code","execution_count":1,"id":"e207dfdd","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:39:48.768996Z","iopub.status.busy":"2025-01-19T03:39:48.768606Z","iopub.status.idle":"2025-01-19T03:39:48.775247Z","shell.execute_reply":"2025-01-19T03:39:48.7743Z"},"papermill":{"duration":0.011396,"end_time":"2025-01-19T03:39:48.776736","exception":false,"start_time":"2025-01-19T03:39:48.76534","status":"completed"},"tags":[]},"outputs":[],"source":["# Import required libraries\n","import numpy as np\n","from PIL import Image\n","import matplotlib.pyplot as plt\n","\n","# Enable inline plotting\n","%matplotlib inline"]},{"cell_type":"markdown","id":"78052beb","metadata":{"papermill":{"duration":0.002128,"end_time":"2025-01-19T03:39:48.781285","exception":false,"start_time":"2025-01-19T03:39:48.779157","status":"completed"},"tags":[]},"source":["### 1.1 Image Representation\n","\n","Digital images are represented as multi-dimensional arrays of numbers. Each pixel contains values representing color intensities:\n","- Grayscale images: Single channel (intensity)\n","- RGB images: Three channels (Red, Green, Blue)\n","- RGBA images: Four channels (Red, Green, Blue, Alpha/transparency)"]},{"cell_type":"code","execution_count":2,"id":"e87ca451","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:39:48.7869Z","iopub.status.busy":"2025-01-19T03:39:48.786605Z","iopub.status.idle":"2025-01-19T03:39:48.792015Z","shell.execute_reply":"2025-01-19T03:39:48.791069Z"},"papermill":{"duration":0.010032,"end_time":"2025-01-19T03:39:48.793522","exception":false,"start_time":"2025-01-19T03:39:48.78349","status":"completed"},"tags":[]},"outputs":[],"source":["def load_and_display_image(image_path):\n","    \"\"\"Load and display an image with its shape and data type information.\"\"\"\n","    img = Image.open(image_path)\n","    img_array = np.array(img)\n","    \n","    plt.figure(figsize=(12, 4))\n","    \n","    plt.subplot(121)\n","    plt.imshow(img_array)\n","    plt.title('Original Image')\n","    plt.axis('off')\n","    \n","    plt.subplot(122)\n","    plt.text(0.1, 0.5, f'Shape: {img_array.shape}\\nData type: {img_array.dtype}',\n","             fontsize=12)\n","    plt.axis('off')\n","    \n","    plt.show()\n","    \n","    return img_array"]},{"cell_type":"markdown","id":"970eb5bd","metadata":{"papermill":{"duration":0.001948,"end_time":"2025-01-19T03:39:48.79893","exception":false,"start_time":"2025-01-19T03:39:48.796982","status":"completed"},"tags":[]},"source":["### 1.2 Basic Color Manipulation\n","\n","Let's implement our first image processing function: colorization through sepia tone effect. This will help us understand how to manipulate color channels."]},{"cell_type":"code","execution_count":3,"id":"f027bbb0","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:39:48.804272Z","iopub.status.busy":"2025-01-19T03:39:48.803937Z","iopub.status.idle":"2025-01-19T03:39:48.810321Z","shell.execute_reply":"2025-01-19T03:39:48.809385Z"},"papermill":{"duration":0.0106,"end_time":"2025-01-19T03:39:48.811715","exception":false,"start_time":"2025-01-19T03:39:48.801115","status":"completed"},"tags":[]},"outputs":[],"source":["def apply_sepia(image_array):\n","    \"\"\"Apply sepia tone effect to an image.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image as numpy array\n","        \n","    Returns:\n","        np.ndarray: Sepia-toned image\n","    \"\"\"\n","    # Create copy to avoid modifying original\n","    sepia_array = image_array.copy()\n","    \n","    # Sepia matrix transformation\n","    sepia_matrix = np.array([\n","        [0.393, 0.769, 0.189],\n","        [0.349, 0.686, 0.168],\n","        [0.272, 0.534, 0.131]\n","    ])\n","    \n","    # Apply transformation\n","    sepia_array = np.dot(sepia_array[...,:3], sepia_matrix.T)\n","    \n","    # Clip values to valid range\n","    np.clip(sepia_array, 0, 255, out=sepia_array)\n","    \n","    return sepia_array.astype(np.uint8)\n","\n","# Interactive demonstration\n","def compare_original_and_sepia(image_path):\n","    \"\"\"Display original and sepia-toned versions side by side.\"\"\"\n","    original = np.array(Image.open(image_path))\n","    sepia = apply_sepia(original)\n","    \n","    plt.figure(figsize=(12, 4))\n","    \n","    plt.subplot(121)\n","    plt.imshow(original)\n","    plt.title('Original Image')\n","    plt.axis('off')\n","    \n","    plt.subplot(122)\n","    plt.imshow(sepia)\n","    plt.title('Sepia Tone')\n","    plt.axis('off')\n","    \n","    plt.show()"]},{"cell_type":"markdown","id":"79f5c29b","metadata":{"papermill":{"duration":0.002045,"end_time":"2025-01-19T03:39:48.816089","exception":false,"start_time":"2025-01-19T03:39:48.814044","status":"completed"},"tags":[]},"source":["## ðŸŽ¯ Exercise 1: Color Channel Manipulation\n","\n","Now it's your turn! Try to implement these functions:\n","1. Increase brightness\n","2. Adjust contrast\n","3. Create a custom color filter\n","\n","Use the template below to get started:"]},{"cell_type":"code","execution_count":4,"id":"e98f5d94","metadata":{"execution":{"iopub.execute_input":"2025-01-19T03:39:48.821608Z","iopub.status.busy":"2025-01-19T03:39:48.821302Z","iopub.status.idle":"2025-01-19T03:39:48.825339Z","shell.execute_reply":"2025-01-19T03:39:48.824429Z"},"papermill":{"duration":0.008619,"end_time":"2025-01-19T03:39:48.826841","exception":false,"start_time":"2025-01-19T03:39:48.818222","status":"completed"},"tags":[]},"outputs":[],"source":["def adjust_brightness(image_array, factor):\n","    \"\"\"Adjust image brightness.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image\n","        factor (float): Brightness factor (>1 for brighter, <1 for darker)\n","    \"\"\"\n","    # Your code here\n","    pass\n","\n","def adjust_contrast(image_array, factor):\n","    \"\"\"Adjust image contrast.\n","    \n","    Args:\n","        image_array (np.ndarray): Input image\n","        factor (float): Contrast factor\n","    \"\"\"\n","    # Your code here\n","    pass"]},{"cell_type":"markdown","id":"13e868ca","metadata":{"papermill":{"duration":0.002147,"end_time":"2025-01-19T03:39:48.83168","exception":false,"start_time":"2025-01-19T03:39:48.829533","status":"completed"},"tags":[]},"source":["## Coming Up Next\n","\n","In the next section, we'll explore:\n","- Image filtering and convolutions\n","- Edge detection\n","- Building a web interface for our image processor\n","\n","Stay tuned! ðŸš€"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":3.106533,"end_time":"2025-01-19T03:39:49.252337","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-01-19T03:39:46.145804","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}