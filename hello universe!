{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hello-universe?scriptVersionId=220510322\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reality Breaker</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n    <style>\n        body { margin: 0; overflow: hidden; background: black; }\n        canvas { display: block; }\n        #fullscreen-button {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            padding: 10px 20px;\n            background: rgba(255, 255, 255, 0.2);\n            color: white;\n            border: none;\n            font-size: 16px;\n            cursor: pointer;\n            z-index: 10;\n            transition: 0.3s;\n        }\n        #fullscreen-button:hover {\n            background: rgba(255, 255, 255, 0.5);\n        }\n    </style>\n</head>\n<body>\n\n    <button id=\"fullscreen-button\">FULLSCREEN</button>\n\n    <script>\n        let scene, camera, renderer, particles, particleGeo, clock;\n\n        function init() {\n            scene = new THREE.Scene();\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n            camera.position.z = 5;\n\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(renderer.domElement);\n\n            particleGeo = new THREE.BufferGeometry();\n            let vertices = [];\n\n            for (let i = 0; i < 12000; i++) {\n                let x = (Math.random() - 0.5) * 20;\n                let y = (Math.random() - 0.5) * 20;\n                let z = (Math.random() - 0.5) * 20;\n                vertices.push(x, y, z);\n            }\n\n            particleGeo.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n            let particleMaterial = new THREE.PointsMaterial({\n                color: 0xffffff,\n                size: 0.1,\n                blending: THREE.AdditiveBlending,\n                transparent: true\n            });\n\n            particles = new THREE.Points(particleGeo, particleMaterial);\n            scene.add(particles);\n\n            clock = new THREE.Clock();\n\n            animate();\n        }\n\n        function animate() {\n            let t = clock.getElapsedTime();\n\n            let positions = particleGeo.attributes.position.array;\n            for (let i = 0; i < positions.length; i += 3) {\n                positions[i] += Math.sin(t + i * 0.0001) * 0.01;\n                positions[i + 1] += Math.cos(t + i * 0.0001) * 0.01;\n                positions[i + 2] += Math.tan(t * 0.002) * 0.01;\n            }\n            particleGeo.attributes.position.needsUpdate = true;\n\n            particles.rotation.x += 0.002;\n            particles.rotation.y += 0.004;\n            particles.rotation.z += 0.006;\n\n            renderer.render(scene, camera);\n            requestAnimationFrame(animate);\n        }\n\n        window.addEventListener('resize', () => {\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n        });\n\n        document.getElementById('fullscreen-button').addEventListener('click', () => {\n            let elem = document.documentElement;\n            if (!document.fullscreenElement) {\n                if (elem.requestFullscreen) {\n                    elem.requestFullscreen();\n                } else if (elem.mozRequestFullScreen) { // Firefox\n                    elem.mozRequestFullScreen();\n                } else if (elem.webkitRequestFullscreen) { // Chrome, Safari, and Opera\n                    elem.webkitRequestFullscreen();\n                } else if (elem.msRequestFullscreen) { // IE/Edge\n                    elem.msRequestFullscreen();\n                }\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                }\n            }\n        });\n\n        init();\n    </script>\n\n</body>\n</html>\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T00:40:54.130304Z","iopub.execute_input":"2025-02-03T00:40:54.130689Z","iopub.status.idle":"2025-02-03T00:40:54.142532Z","shell.execute_reply.started":"2025-02-03T00:40:54.130652Z","shell.execute_reply":"2025-02-03T00:40:54.141107Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m53\u001b[0m\n\u001b[0;31m    }\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"],"ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 53)","output_type":"error"}],"execution_count":2},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}