{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/gamified-dascient-llc?scriptVersionId=216260791\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"To generate an engaging Jupyter Notebook for an AI/ML-driven gamified solution that promotes the paid portfolio management service by @donutz.ai, we need to incorporate several elements:\n\nUser Interactivity: Incorporate an interactive, gamified interface for users.\nAI/ML-driven analytics: Provide portfolio management tips, performance metrics, and actionable insights.\nPromotion of Donutz.ai: Include subtle mentions of the paid service and link to Donutz.ai's offerings.\nFun Elements: Use some gamification features like progress bars, secret messages, and subtle embedded code hacks (including delta phi symbols).\nLet‚Äôs structure this notebook in several parts:\n\nIntroduction and Setup: Overview of the AI/ML tools that will be used.\nInteractive Portfolio Management Tool: Let users create their portfolios.\nGamified Performance Metrics: Show portfolio performance with engaging elements like badges.\nSubtle Secrets: Embed secret messages or hints with Delta Phi Greek symbols.\n1. Introduction and Setup\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nfrom IPython.display import display, HTML\nfrom time import sleep\n\n# Random seed for reproducibility\nnp.random.seed(42)\n\n# Welcome message and introduction\ndef display_welcome():\n    welcome_message = \"\"\"\n    Welcome to the Donutz.AI Portfolio Management Game! üç©\n    \n    Your mission: Create the best portfolio, earn fun badges, and discover secrets hidden in your portfolio analysis!\n    Ready to play? Let's get started by building your portfolio. The more strategic your choices, the higher your rewards.\n    \n    And don't forget... there's always a bit of secret sauce from Donutz.AI. Are you ready for the challenge?\n    \"\"\"\n    display(HTML(f\"<h2>{welcome_message}</h2>\"))\n\ndisplay_welcome()\n2. Interactive Portfolio Management Tool\nWe‚Äôll allow users to choose stocks and create their portfolio, but with a fun spin:\n\n# Sample data for portfolio creation (mock stock data for this demo)\nstock_data = {\n    'Stock': ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NFLX'],\n    'Price': [145, 2730, 3450, 299, 720, 592],\n    'Volatility': [0.04, 0.02, 0.05, 0.03, 0.07, 0.06],\n    'Growth Potential': [0.08, 0.05, 0.1, 0.06, 0.15, 0.12],\n    'Sector': ['Tech', 'Tech', 'E-commerce', 'Tech', 'Automotive', 'Entertainment']\n}\n\nstocks = pd.DataFrame(stock_data)\n\n# Function to allow users to select stocks and create a portfolio\ndef create_portfolio():\n    display(HTML(\"<h3>Choose your stocks for the portfolio (max 3 stocks):</h3>\"))\n    user_stocks = []\n    \n    for index, row in stocks.iterrows():\n        print(f\"{row['Stock']} - ${row['Price']} | Growth: {row['Growth Potential']*100}% | Volatility: {row['Volatility']*100}%\")\n    \n    print(\"\\n\")\n    \n    while len(user_stocks) < 3:\n        stock_choice = input(f\"Choose a stock from {stocks['Stock'].tolist()}: \").upper()\n        if stock_choice in stocks['Stock'].values:\n            if stock_choice not in user_stocks:\n                user_stocks.append(stock_choice)\n                print(f\"{stock_choice} added to your portfolio!\")\n            else:\n                print(f\"{stock_choice} is already in your portfolio!\")\n        else:\n            print(\"Invalid choice. Try again.\")\n    \n    return user_stocks\n\n# User selects stocks for their portfolio\nuser_portfolio = create_portfolio()\n3. Gamified Performance Metrics\nNow that the user has created a portfolio, let‚Äôs gamify the feedback based on the stock‚Äôs volatility, growth potential, and the portfolio's performance.\n\n# Random portfolio performance simulation based on chosen stocks\ndef portfolio_performance(portfolio):\n    total_growth = 0\n    total_volatility = 0\n    for stock in portfolio:\n        stock_info = stocks[stocks['Stock'] == stock].iloc[0]\n        total_growth += stock_info['Growth Potential']\n        total_volatility += stock_info['Volatility']\n    \n    avg_growth = total_growth / len(portfolio)\n    avg_volatility = total_volatility / len(portfolio)\n    \n    print(f\"Your portfolio's average growth potential: {avg_growth * 100:.2f}%\")\n    print(f\"Your portfolio's average volatility: {avg_volatility * 100:.2f}%\")\n    \n    # Gamification: Assign badges based on portfolio risk and growth\n    if avg_growth > 0.1:\n        badge = \"üí∞ Wealth Builder\"\n    elif avg_growth > 0.06:\n        badge = \"üìà Growth Seeker\"\n    else:\n        badge = \"üí§ Steady Investor\"\n    \n    return avg_growth, avg_volatility, badge\n\n# Calculate and display performance\navg_growth, avg_volatility, badge = portfolio_performance(user_portfolio)\n\n# Display gamified badge\ndisplay(HTML(f\"<h4>Badge Earned: {badge}</h4>\"))\n4. Subtle Secret Messages\nWe can embed some fun secret messages and symbols (like Delta Phi) for those who might be paying attention to the details:\n\n# Function to display secret message if user has certain stock combinations\ndef secret_message(portfolio):\n    secret_trigger = ['AAPL', 'TSLA']  # Hidden message if user selects AAPL and TSLA\n    if all(stock in portfolio for stock in secret_trigger):\n        print(\"\\nüåü Secret Message Unlocked! üåü\")\n        print(\"You have unlocked the secret to exponential wealth generation. Delta Phi has a plan for you. Keep pushing!\")\n        print(\"ŒîŒ¶ (Delta Phi): Always remember, with strategic choices, wealth is inevitable.\")\n    else:\n        print(\"\\nNo secret message... for now. Keep making the right choices.\")\n\nsecret_message(user_portfolio)\n5. Encouraging Progress & Subtle Promotion for Donutz.AI\nIncorporate elements where users are subtly encouraged to use Donutz.AI for real portfolio management:\n\n# Simulate progress in portfolio management game\ndef simulate_game_progress():\n    print(\"\\nSimulating your portfolio's performance over time...\")\n    sleep(2)\n    progress = random.choice([True, False])\n    \n    if progress:\n        print(\"\\nüèÜ Congratulations! Your portfolio is growing at a steady rate! üéâ\")\n        print(\"Consider leveraging Donutz.AI‚Äôs premium services for even more strategic management!\")\n    else:\n        print(\"\\nüí° You could be doing better. Why not try the Donutz.AI portfolio management service?\")\n    \nsimulate_game_progress()\nFinal Notebook Structure\nThe complete notebook includes:\n\nWelcome Section: Sets the tone and encourages user interaction.\nPortfolio Creation Tool: Users choose stocks and create their portfolio.\nGamified Metrics: Portfolio performance and gamification features like badges.\nSecret Messages: Hidden messages related to portfolio combinations.\nDonutz.AI Promotion: Subtle promotion for premium services.\nThis notebook provides a fun, interactive experience while subtly promoting Donutz.AI‚Äôs services. Through AI/ML-driven feedback and gamified elements, users can enjoy the process of building their portfolio while learning about the importance of portfolio management. Plus, with the hidden symbols and messages, users may uncover intriguing secrets, enhancing the engagement and experience.\n\nEmbedding Delta Phi (ŒîŒ¶):\nYou can also embed Greek symbols like ŒîŒ¶ in messages or within the context of secret feedback. This can create an air of mystery, adding fun and a sense of exclusivity to the user experience.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nfrom IPython.display import display, HTML\nfrom time import sleep\n\n# Random seed for reproducibility\nnp.random.seed(42)\n\n# Welcome message and introduction\ndef display_welcome():\n    welcome_message = \"\"\"\n    Welcome to the Donutz.AI Portfolio Management Game! üç©\n    \n    Your mission: Create the best portfolio, earn fun badges, and discover secrets hidden in your portfolio analysis!\n    Ready to play? Let's get started by building your portfolio. The more strategic your choices, the higher your rewards.\n    \n    And don't forget... there's always a bit of secret sauce from Donutz.AI. Are you ready for the challenge?\n    \"\"\"\n    display(HTML(f\"<h2>{welcome_message}</h2>\"))\n\ndisplay_welcome()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T22:26:24.056879Z","iopub.execute_input":"2025-01-05T22:26:24.057329Z","iopub.status.idle":"2025-01-05T22:26:24.065181Z","shell.execute_reply.started":"2025-01-05T22:26:24.057297Z","shell.execute_reply":"2025-01-05T22:26:24.064029Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h2>\n    Welcome to the Donutz.AI Portfolio Management Game! üç©\n    \n    Your mission: Create the best portfolio, earn fun badges, and discover secrets hidden in your portfolio analysis!\n    Ready to play? Let's get started by building your portfolio. The more strategic your choices, the higher your rewards.\n    \n    And don't forget... there's always a bit of secret sauce from Donutz.AI. Are you ready for the challenge?\n    </h2>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Sample data for portfolio creation (mock stock data for this demo)\nstock_data = {\n    'Stock': ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NFLX'],\n    'Price': [145, 2730, 3450, 299, 720, 592],\n    'Volatility': [0.04, 0.02, 0.05, 0.03, 0.07, 0.06],\n    'Growth Potential': [0.08, 0.05, 0.1, 0.06, 0.15, 0.12],\n    'Sector': ['Tech', 'Tech', 'E-commerce', 'Tech', 'Automotive', 'Entertainment']\n}\n\nstocks = pd.DataFrame(stock_data)\n\n# Function to allow users to select stocks and create a portfolio\ndef create_portfolio():\n    display(HTML(\"<h3>Choose your stocks for the portfolio (max 3 stocks):</h3>\"))\n    user_stocks = []\n    \n    for index, row in stocks.iterrows():\n        print(f\"{row['Stock']} - ${row['Price']} | Growth: {row['Growth Potential']*100}% | Volatility: {row['Volatility']*100}%\")\n    \n    print(\"\\n\")\n    \n    while len(user_stocks) < 3:\n        stock_choice = input(f\"Choose a stock from {stocks['Stock'].tolist()}: \").upper()\n        if stock_choice in stocks['Stock'].values:\n            if stock_choice not in user_stocks:\n                user_stocks.append(stock_choice)\n                print(f\"{stock_choice} added to your portfolio!\")\n            else:\n                print(f\"{stock_choice} is already in your portfolio!\")\n        else:\n            print(\"Invalid choice. Try again.\")\n    \n    return user_stocks\n\n# User selects stocks for their portfolio\nuser_portfolio = create_portfolio()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T22:27:01.540241Z","iopub.execute_input":"2025-01-05T22:27:01.540578Z","iopub.status.idle":"2025-01-05T22:29:02.731046Z","shell.execute_reply.started":"2025-01-05T22:27:01.540556Z","shell.execute_reply":"2025-01-05T22:29:02.730027Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h3>Choose your stocks for the portfolio (max 3 stocks):</h3>"},"metadata":{}},{"name":"stdout","text":"AAPL - $145 | Growth: 8.0% | Volatility: 4.0%\nGOOGL - $2730 | Growth: 5.0% | Volatility: 2.0%\nAMZN - $3450 | Growth: 10.0% | Volatility: 5.0%\nMSFT - $299 | Growth: 6.0% | Volatility: 3.0%\nTSLA - $720 | Growth: 15.0% | Volatility: 7.000000000000001%\nNFLX - $592 | Growth: 12.0% | Volatility: 6.0%\n\n\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Choose a stock from ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NFLX']:  AAPL\n"},{"name":"stdout","text":"AAPL added to your portfolio!\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Choose a stock from ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NFLX']:  TSLA\n"},{"name":"stdout","text":"TSLA added to your portfolio!\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Choose a stock from ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NFLX']:  MSFT\n"},{"name":"stdout","text":"MSFT added to your portfolio!\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Random portfolio performance simulation based on chosen stocks\ndef portfolio_performance(portfolio):\n    total_growth = 0\n    total_volatility = 0\n    for stock in portfolio:\n        stock_info = stocks[stocks['Stock'] == stock].iloc[0]\n        total_growth += stock_info['Growth Potential']\n        total_volatility += stock_info['Volatility']\n    \n    avg_growth = total_growth / len(portfolio)\n    avg_volatility = total_volatility / len(portfolio)\n    \n    print(f\"Your portfolio's average growth potential: {avg_growth * 100:.2f}%\")\n    print(f\"Your portfolio's average volatility: {avg_volatility * 100:.2f}%\")\n    \n    # Gamification: Assign badges based on portfolio risk and growth\n    if avg_growth > 0.1:\n        badge = \"üí∞ Wealth Builder\"\n    elif avg_growth > 0.06:\n        badge = \"üìà Growth Seeker\"\n    else:\n        badge = \"üí§ Steady Investor\"\n    \n    return avg_growth, avg_volatility, badge\n\n# Calculate and display performance\navg_growth, avg_volatility, badge = portfolio_performance(user_portfolio)\n\n# Display gamified badge\ndisplay(HTML(f\"<h4>Badge Earned: {badge}</h4>\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T22:29:07.042647Z","iopub.execute_input":"2025-01-05T22:29:07.043055Z","iopub.status.idle":"2025-01-05T22:29:07.059368Z","shell.execute_reply.started":"2025-01-05T22:29:07.043023Z","shell.execute_reply":"2025-01-05T22:29:07.058095Z"}},"outputs":[{"name":"stdout","text":"Your portfolio's average growth potential: 9.67%\nYour portfolio's average volatility: 4.67%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h4>Badge Earned: üìà Growth Seeker</h4>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# Function to display secret message if user has certain stock combinations\ndef secret_message(portfolio):\n    secret_trigger = ['AAPL', 'TSLA']  # Hidden message if user selects AAPL and TSLA\n    if all(stock in portfolio for stock in secret_trigger):\n        print(\"\\nüåü Secret Message Unlocked! üåü\")\n        print(\"You have unlocked the secret to exponential wealth generation. Delta Phi has a plan for you. Keep pushing!\")\n        print(\"ŒîŒ¶ (Delta Phi): Always remember, with strategic choices, wealth is inevitable.\")\n    else:\n        print(\"\\nNo secret message... for now. Keep making the right choices.\")\n\nsecret_message(user_portfolio)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T22:29:09.22501Z","iopub.execute_input":"2025-01-05T22:29:09.225331Z","iopub.status.idle":"2025-01-05T22:29:09.232293Z","shell.execute_reply.started":"2025-01-05T22:29:09.225308Z","shell.execute_reply":"2025-01-05T22:29:09.230914Z"}},"outputs":[{"name":"stdout","text":"\nüåü Secret Message Unlocked! üåü\nYou have unlocked the secret to exponential wealth generation. Delta Phi has a plan for you. Keep pushing!\nŒîŒ¶ (Delta Phi): Always remember, with strategic choices, wealth is inevitable.\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Simulate progress in portfolio management game\ndef simulate_game_progress():\n    print(\"\\nSimulating your portfolio's performance over time...\")\n    sleep(2)\n    progress = random.choice([True, False])\n    \n    if progress:\n        print(\"\\nüèÜ Congratulations! Your portfolio is growing at a steady rate! üéâ\")\n        print(\"Consider leveraging Donutz.AI‚Äôs premium services for even more strategic management!\")\n    else:\n        print(\"\\nüí° You could be doing better. Why not try the Donutz.AI portfolio management service?\")\n    \nsimulate_game_progress()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T22:29:09.920929Z","iopub.execute_input":"2025-01-05T22:29:09.921291Z","iopub.status.idle":"2025-01-05T22:29:11.929107Z","shell.execute_reply.started":"2025-01-05T22:29:09.921266Z","shell.execute_reply":"2025-01-05T22:29:11.927846Z"}},"outputs":[{"name":"stdout","text":"\nSimulating your portfolio's performance over time...\n\nüèÜ Congratulations! Your portfolio is growing at a steady rate! üéâ\nConsider leveraging Donutz.AI‚Äôs premium services for even more strategic management!\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"## Final Notebook Structure\n#### The complete notebook includes:\n\n- Welcome Section: Sets the tone and encourages user interaction.\n- Portfolio Creation Tool: Users choose stocks and create their portfolio.\n- Gamified Metrics: Portfolio performance and gamification features like badges.\n- Secret Messages: Hidden messages related to portfolio combinations.\n- Donutz.AI Promotion: Subtle promotion for premium services.\n\nThis notebook provides a fun, interactive experience while subtly promoting Donutz.AI‚Äôs services. Through AI/ML-driven feedback and gamified elements, users can enjoy the process of building their portfolio while learning about the importance of portfolio management. Plus, with the hidden symbols and messages, users may uncover intriguing secrets, enhancing the engagement and experience.","metadata":{}},{"cell_type":"code","source":"#enf in","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}