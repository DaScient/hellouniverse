{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/emergency-sms-protocol?scriptVersionId=217244634\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"Setting up a backend for the subscription system involves creating a server, connecting it to a database, and integrating APIs for sending messages and tracking user proximity to danger zones. Here's an outline of the process and key components:\nBackend Setup Steps\n1. Choose a Backend Framework\n\nYou can use any backend framework. Here are popular options:\n\n    Node.js with Express.js (lightweight and JavaScript-based)\n    Python with Flask or Django (great for rapid development)\n    Ruby on Rails (productive but less common now)\n    Java with Spring Boot (for enterprise applications)\n\nI'll use Node.js with Express.js in this example since it pairs well with modern JavaScript-based frontends.\n2. Install Dependencies\n\nRun the following commands in your project directory:\n\nnpm init -y\nnpm install express body-parser mongoose twilio dotenv\n\n    express: Web framework for Node.js.\n    body-parser: Parses form data sent from the frontend.\n    mongoose: For connecting to MongoDB (or use another database).\n    twilio: For SMS messaging.\n    dotenv: To manage sensitive environment variables like API keys.\n\n3. Set Up the Server\n\nHereâ€™s a basic server setup:\n\n// server.js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst twilio = require('twilio');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Database connection\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch(err => console.error('Database connection error:', err));\n\n// Schema & Model\nconst SubscriberSchema = new mongoose.Schema({\n  phone: [String], // Array of phone numbers\n  location: [String] // Array of locations\n});\nconst Subscriber = mongoose.model('Subscriber', SubscriberSchema);\n\n// Twilio setup\nconst twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);\n\n// Routes\napp.post('/subscribe', async (req, res) => {\n  const { phone, location } = req.body;\n  try {\n    const newSubscriber = new Subscriber({ phone, location });\n    await newSubscriber.save();\n    res.status(201).send('Subscription successful');\n  } catch (error) {\n    res.status(500).send('Error subscribing: ' + error.message);\n  }\n});\n\napp.post('/send-alert', async (req, res) => {\n  const { message } = req.body;\n\n  try {\n    const subscribers = await Subscriber.find();\n    subscribers.forEach(subscriber => {\n      subscriber.phone.forEach(async phone => {\n        await twilioClient.messages.create({\n          body: message,\n          from: process.env.TWILIO_PHONE_NUMBER,\n          to: phone\n        });\n      });\n    });\n    res.status(200).send('Alerts sent successfully');\n  } catch (error) {\n    res.status(500).send('Error sending alerts: ' + error.message);\n  }\n});\n\n// Start server\napp.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n\n4. Environment Variables\n\nCreate a .env file in your project directory to store sensitive information:\n\nMONGO_URI=mongodb+srv://<username>:<password>@cluster.mongodb.net/mydatabase\nTWILIO_ACCOUNT_SID=your_twilio_account_sid\nTWILIO_AUTH_TOKEN=your_twilio_auth_token\nTWILIO_PHONE_NUMBER=your_twilio_phone_number\n\n5. API Integration\n\nYou can enhance the app to detect danger zones by integrating APIs:\n\n    Google Maps API: Use Geocoding and Distance Matrix APIs to track proximity.\n    Social Media APIs: Use Facebook Graph API, X (Twitter) API, or other feeds to monitor dangerous activity in real-time.\n\nFor example, with Google Maps Distance Matrix API:\n\nconst axios = require('axios');\n\nasync function checkProximity(userLocation, dangerZone) {\n  const url = `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${userLocation}&destinations=${dangerZone}&key=${process.env.GOOGLE_MAPS_API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.rows[0].elements[0].distance.value; // Distance in meters\n}\n\n6. Testing the Backend\n\n    Use Postman to test the /subscribe and /send-alert endpoints.\n    Example JSON for subscription:\n\n    {\n      \"phone\": [\"+15555551234\", \"+15555554321\"],\n      \"location\": [\"Los Angeles, CA\", \"Santa Monica, CA\"]\n    }\n\nFuture Enhancements\n\n    Real-Time Danger Zone Alerts\n        Use WebSockets (via Socket.IO) for real-time alerts.\n        Trigger alerts when a subscriber enters a danger zone.\n\n    Admin Dashboard\n        Build a dashboard to manage subscribers and visualize danger zones on a map.\n\n    SMS Templates\n        Store and manage templates for emergency messages.\n\n    Analytics\n        Track message delivery success and subscriber engagement.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null}]}