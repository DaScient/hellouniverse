{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/existential-kingdom?scriptVersionId=220662535\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <!-- genius.html: Enciphered & Secured Version -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Chaotic Reality Breaker x Kiss Me More</title>\n        <!-- Three.js from CDN -->\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n        <style>\n            /* Base styles with transparent background */\n            body {\n                margin: 0;\n                overflow: hidden;\n                background: transparent;\n                font-family: sans-serif;\n            }\n            canvas {\n                display: block;\n            }\n\n            /* Encrypted fullscreen button (glowy purplish plasma) in the upper-left */\n            body:hover #fullscreen-button,\n            #fullscreen-button:active {\n                opacity: 1;\n            }\n            #fullscreen-button {\n                position: absolute;\n                top: 10px;\n                left: 10px;\n                padding: 4px 8px;\n                font-size: 12px;\n                font-family: \"Papyrus\", fantasy;\n                color: #fff;\n                border: 1px solid rgba(200, 0, 200, 0.8);\n                border-radius: 6px;\n                background: linear-gradient(\n                    135deg,\n                    rgba(128, 0, 128, 1),\n                    rgba(255, 0, 255, 1)\n                );\n                box-shadow: 0 0 10px rgba(255, 0, 255, 0.8);\n                letter-spacing: 1px;\n                cursor: pointer;\n                z-index: 10;\n                opacity: 0; /* hidden until hover/touch */\n                transition: opacity 0.4s ease, transform 0.4s ease;\n            }\n            #fullscreen-button:hover {\n                transform: scale(1.1) rotate(1deg);\n                background: linear-gradient(\n                    135deg,\n                    rgba(128, 0, 128, 0.8),\n                    rgba(255, 0, 255, 0.8)\n                );\n                border-color: #fff;\n                box-shadow: 0 0 15px rgba(255, 0, 255, 1);\n            }\n\n            /* Push button (“ā butțøň”) at the bottom-right */\n            #pushButton {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                padding: 10px 15px;\n                font-size: 14px;\n                background: rgba(50, 50, 50, 0.8);\n                border: 2px solid #fff;\n                color: #fff;\n                cursor: pointer;\n                z-index: 20;\n            }\n        </style>\n    </head>\n    <body>\n        <!-- Encrypted fullscreen button (hidden unless hovered/touched) -->\n        <button id=\"fullscreen-button\">ENCRYPTED</button>\n        <!-- Push button for white‑hole activation (hover/touch-hold >6 seconds) -->\n        <button id=\"pushButton\">ā butțøň</button>\n\n        <script>\n            (function(){\n              /**********************************\n               * GLOBAL VARIABLES & CONFIGURATION\n               **********************************/\n              let scene, camera, renderer, clock;\n              let particles, particleGeo;\n              const initPositions = [];\n              const particleCount = 100000;  // Main particles\n\n              // Orbiting particles configuration\n              const orbitParticleCount = 100000; // Additional orbiting particles\n              let orbitParticles, orbitGeo;\n              const orbitVertices = [];\n              const orbitColors = [];\n              const orbitParentIndices = [];    // For each orbiting particle, index into main particle set\n              const orbitDistances = [];          // Orbit radius per particle\n              const orbitInitialAngles = [];      // Starting phase (in radians)\n              const orbitAngularSpeeds = [];      // Angular speed (radians per second)\n\n              // White‑hole effect state:\n              let whiteHoleActive = false;\n              let repelActive = false;\n              const hoverForceConstant = 300;\n              const blackHoleThreshold = 0.5;\n              let blackHoleMesh = null, whiteHolePixel = null, smokeSprite = null;\n\n              // Cycle durations\n              const halfCycle = 73;\n              const fullCycle = 2 * halfCycle;   // 146 seconds\n\n              // Touch interactivity\n              let tapStartTime = 0, tapStartX = 0, tapStartY = 0;\n              let boostChaos = false, boostTimeout = null;\n\n              // --- AUDIO VARIABLES ---\n              let audioContext, analyser, audioData;\n\n              /**********************************\n               * AUDIO SETUP (Capture microphone input)\n               **********************************/\n              function setupAudio() {\n                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                  navigator.mediaDevices.getUserMedia({ audio: true })\n                    .then(stream => {\n                      audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                      const source = audioContext.createMediaStreamSource(stream);\n                      analyser = audioContext.createAnalyser();\n                      analyser.fftSize = 256;\n                      audioData = new Uint8Array(analyser.frequencyBinCount);\n                      source.connect(analyser);\n                    })\n                    .catch(err => {\n                      console.log(\"Audio capture error: \" + err);\n                    });\n                } else {\n                  console.log(\"getUserMedia not supported in this browser.\");\n                }\n              }\n\n              /**********************************\n               * HELPER FUNCTIONS\n               **********************************/\n              // Returns a multiplier with discrete pulses.\n              function heartbeat(tau) {\n                const pulseTimes = [5, 12, 19, 27, 35, 44, 52, 61, 68];\n                let multiplier = 1;\n                for (let p of pulseTimes) {\n                  let diff = Math.abs(tau - p);\n                  if (diff < 0.4) {\n                    multiplier += 0.2 * (1 - diff / 0.4);\n                  }\n                }\n                return multiplier;\n              }\n\n              // Scale function for the forward half-cycle.\n              function getForwardScale(tau) {\n                let baseScale = 1;\n                if (tau < 20) {\n                  baseScale = 1;\n                } else if (tau < 33) {\n                  let progress = (tau - 20) / 13;\n                  baseScale = 1 - 0.9 * progress;\n                } else if (tau < 40) {\n                  baseScale = 0.1;\n                } else if (tau < 53) {\n                  let progress = (tau - 40) / 13;\n                  baseScale = 0.1 + (2.0 - 0.1) * Math.pow(progress, 2);\n                } else {\n                  let progress = (tau - 53) / 20;\n                  baseScale = 2.0 - (2.0 - 1) * progress;\n                }\n                return baseScale * heartbeat(tau);\n              }\n\n              // Full-cycle scale: forward then mirror.\n              function getFullScale(time) {\n                let T = time % fullCycle;\n                return (T < halfCycle) ? getForwardScale(T) : getForwardScale(fullCycle - T);\n              }\n\n              // Returns a \"chaos amplitude\" for random jitter.\n              function getChaosAmplitude(tau) {\n                if ((tau >= 40 && tau < 53) || (tau >= 20 && tau < 33)) {\n                  return 0.06;\n                }\n                return 0.01;\n              }\n\n              /**********************************\n               * INITIALIZATION\n               **********************************/\n              function init() {\n                // Create scene, camera, renderer.\n                scene = new THREE.Scene();\n                camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 1, 1000);\n                camera.position.z = 5;\n\n                renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n                renderer.setPixelRatio(window.devicePixelRatio);\n                renderer.setSize(window.innerWidth, window.innerHeight);\n                renderer.setClearColor(0x000000, 1);\n                document.body.appendChild(renderer.domElement);\n\n                // Set up tap-to-b0ost chaos on the canvas.\n                renderer.domElement.addEventListener(\"touchstart\", (event) => {\n                  if (event.touches.length === 1) {\n                    tapStartTime = Date.now();\n                    tapStartX = event.touches[0].clientX;\n                    tapStartY = event.touches[0].clientY;\n                  }\n                }, {passive: false});\n\n                renderer.domElement.addEventListener(\"touchend\", (event) => {\n                  if (event.changedTouches.length === 1) {\n                    const tapEndTime = Date.now();\n                    const dx = event.changedTouches[0].clientX - tapStartX;\n                    const dy = event.changedTouches[0].clientY - tapStartY;\n                    const distance = Math.sqrt(dx*dx + dy*dy);\n                    const duration = tapEndTime - tapStartTime;\n                    if (duration < 200 && distance < 10) {\n                      boostChaos = true;\n                      if (boostTimeout) clearTimeout(boostTimeout);\n                      boostTimeout = setTimeout(() => { boostChaos = false; }, 2000);\n                    }\n                  }\n                }, {passive: false});\n\n                // Set up ambient audio analysis.\n                setupAudio();\n\n                // Add lights.\n                const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n                scene.add(ambientLight);\n                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n                directionalLight.position.set(1,1,1);\n                scene.add(directionalLight);\n\n                // --- MAIN PARTICLE SYSTEM ---\n                particleGeo = new THREE.BufferGeometry();\n                const vertices = [];\n                const colors = [];\n                for (let i = 0; i < particleCount; i++) {\n                  let x = (Math.random()-0.5)*50;\n                  let y = (Math.random()-0.5)*50;\n                  let z = (Math.random()-0.5)*50;\n                  vertices.push(x, y, z);\n                  initPositions.push(x, y, z);\n                  colors.push(Math.random(), Math.random(), Math.random());\n                }\n                particleGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n                particleGeo.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n\n                const material = new THREE.PointsMaterial({\n                  vertexColors: true,\n                  size: 0.1,\n                  blending: THREE.AdditiveBlending,\n                  transparent: true\n                });\n                particles = new THREE.Points(particleGeo, material);\n                scene.add(particles);\n\n                // --- ORBITING PARTICLE SYSTEM ---\n                orbitGeo = new THREE.BufferGeometry();\n                // Allocate arrays for orbiting particles.\n                for (let i = 0; i < orbitParticleCount; i++) {\n                  // Choose a random parent index (the \"lucky\" main particle);\n                  let parentIdx = Math.floor(Math.random() * particleCount);\n                  orbitParentIndices.push(parentIdx);\n                  // Random orbit radius (e.g., between 0.2 and 1.0).\n                  orbitDistances.push(0.2 + Math.random() * 0.8);\n                  // Initial phase between 0 and 2π.\n                  orbitInitialAngles.push(Math.random() * Math.PI * 2);\n                  // Angular speed between 0.2 and 1.0 radians per second.\n                  orbitAngularSpeeds.push(0.2 + Math.random() * 0.8);\n                  // Initial vertex position (will be updated in animate).\n                  orbitVertices.push(0, 0, 0);\n                  // Set a random initial color (we’ll update these later to match the pastel/satanic scheme).\n                  orbitColors.push(Math.random(), Math.random(), Math.random());\n                }\n                orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitVertices, 3));\n                orbitGeo.setAttribute(\"color\", new THREE.Float32BufferAttribute(orbitColors, 3));\n\n                // Use a slightly larger size for orbiting particles.\n                const orbitMaterial = new THREE.PointsMaterial({\n                  vertexColors: true,\n                  size: 0.15,\n                  blending: THREE.AdditiveBlending,\n                  transparent: true\n                });\n                orbitParticles = new THREE.Points(orbitGeo, orbitMaterial);\n                scene.add(orbitParticles);\n\n                clock = new THREE.Clock();\n                animate();\n              }\n\n              /**********************************\n               * ANIMATION LOOP\n               **********************************/\n              function animate() {\n                const time = clock.getElapsedTime();\n                let iterationIndex = Math.floor(time / fullCycle);\n                let T = time % fullCycle;\n                let tau = (T < halfCycle) ? T : (fullCycle - T);\n                const scaleFactor = getFullScale(time);\n                const posArray = particleGeo.attributes.position.array;\n\n                // Update main particle positions.\n                for (let i = 0; i < posArray.length; i += 3) {\n                  posArray[i]   = initPositions[i]   * scaleFactor;\n                  posArray[i+1] = initPositions[i+1] * scaleFactor;\n                  posArray[i+2] = initPositions[i+2] * scaleFactor;\n                }\n\n                // --- AUDIO ANALYSIS ---\n                let audioAverage = 0, audioFactor = 1, audioSatanicFactor = 0;\n                if (analyser && audioData) {\n                  analyser.getByteFrequencyData(audioData);\n                  let sum = 0;\n                  for (let i = 0; i < audioData.length; i++) {\n                    sum += audioData[i];\n                  }\n                  audioAverage = sum / audioData.length;  // roughly 0..255\n                  audioFactor = 1 + audioAverage / 256;     // roughly 1 to 2\n                  audioSatanicFactor = audioAverage / 255;    // normalized 0..1\n                  // Add extra random jitter (hyper-synchronicities).\n                  audioFactor += (Math.random()-0.5)*0.1;\n                  audioSatanicFactor += (Math.random()-0.5)*0.1;\n                  audioFactor = Math.max(1, Math.min(2, audioFactor));\n                  audioSatanicFactor = Math.max(0, Math.min(1, audioSatanicFactor));\n                }\n\n                // Determine chaos amplitude.\n                let chaosAmp = getChaosAmplitude(tau);\n                if (boostChaos) { chaosAmp *= 3; }\n                chaosAmp *= audioFactor;\n\n                // Add jitter to main particle positions.\n                for (let i = 0; i < posArray.length; i++) {\n                  posArray[i] += chaosAmp * (Math.random()-0.5);\n                }\n                particles.rotation.x += (Math.random()-0.5) * 0.003 * chaosAmp * 10;\n                particles.rotation.y += (Math.random()-0.5) * 0.003 * chaosAmp * 10;\n                particleGeo.attributes.position.needsUpdate = true;\n\n                /***************************************\n                 * DARK‑MATTER SATANIC TRANSFORMATION\n                 ***************************************/\n                const darkTransitionStart = fullCycle - 10;\n                let darkModeFactor = 0;\n                if (T >= darkTransitionStart) {\n                  darkModeFactor = (T - darkTransitionStart) / (fullCycle - darkTransitionStart);\n                }\n                const originalBackground = new THREE.Color(0x000000);\n                const targetBackground = new THREE.Color(0x0d0d0d);\n                const blendedBackground = originalBackground.clone().lerp(targetBackground, darkModeFactor);\n                renderer.setClearColor(blendedBackground, 1);\n\n                /***************************************\n                 * UPDATE PARTICLE COLORS (SZA Vibe)\n                 ***************************************/\n                // Pastel palette inspired by Kiss Me More.\n                const pastelA = new THREE.Color(0xffb6c1); // light pink\n                const pastelB = new THREE.Color(0xe6e6fa); // lavender\n                const pastelC = new THREE.Color(0xb0e0e6); // powder blue\n                const darkTarget = new THREE.Color(0x2B001E);\n\n                let brightnessFactor = 1;\n                if (tau >= 53) {\n                  let progress = (tau - 53) / 20;\n                  brightnessFactor = 1 + 0.5 * progress;\n                }\n                brightnessFactor *= audioFactor;\n\n                const colArray = particleGeo.attributes.color.array;\n                for (let i = 0, p = 0; i < colArray.length; i += 3, p++) {\n                  let c;\n                  if (p % 3 === 0) c = pastelA.clone();\n                  else if (p % 3 === 1) c = pastelB.clone();\n                  else c = pastelC.clone();\n                  c.multiplyScalar(brightnessFactor);\n                  c.lerp(darkTarget, darkModeFactor);\n                  c.lerp(darkTarget, audioSatanicFactor * 0.5);\n                  colArray[i]   = c.r;\n                  colArray[i+1] = c.g;\n                  colArray[i+2] = c.b;\n                }\n                particleGeo.attributes.color.needsUpdate = true;\n\n                // Continuous subtle rotation.\n                particles.rotation.x += 0.002;\n                particles.rotation.y += 0.004;\n                particles.rotation.z += 0.006;\n\n                /***********************\n                 * ORBITING PARTICLE SYSTEM UPDATE\n                 ***********************/\n                // For each orbiting particle, determine its parent's current position and compute an orbital offset.\n                const orbitPosArray = orbitGeo.attributes.position.array;\n                const orbitColArray = orbitGeo.attributes.color.array;\n                for (let i = 0; i < orbitParticleCount; i++) {\n                  let parentIdx = orbitParentIndices[i];\n                  let pIndex = parentIdx * 3;\n                  // Parent's current position from the main system.\n                  let parentX = posArray[pIndex];\n                  let parentY = posArray[pIndex+1];\n                  let parentZ = posArray[pIndex+2];\n                  // Compute orbital angle.\n                  let angle = orbitInitialAngles[i] + orbitAngularSpeeds[i] * time;\n                  let radius = orbitDistances[i];\n                  // Position offset in parent's x-y plane.\n                  let offsetX = radius * Math.cos(angle);\n                  let offsetY = radius * Math.sin(angle);\n                  // Optionally add a slight random z offset.\n                  let offsetZ = (Math.random()-0.5)*0.1;\n                  let idx3 = i * 3;\n                  orbitPosArray[idx3]     = parentX + offsetX;\n                  orbitPosArray[idx3 + 1] = parentY + offsetY;\n                  orbitPosArray[idx3 + 2] = parentZ + offsetZ;\n                  // For color, we can set orbiting particles to mimic a slightly different pastel hue.\n                  // Here we simply reuse the pastelA color, modulated by brightness.\n                  let orbitColor = pastelA.clone().multiplyScalar(brightnessFactor);\n                  orbitColor.lerp(darkTarget, darkModeFactor);\n                  orbitColor.lerp(darkTarget, audioSatanicFactor * 0.5);\n                  orbitColArray[idx3]     = orbitColor.r;\n                  orbitColArray[idx3 + 1] = orbitColor.g;\n                  orbitColArray[idx3 + 2] = orbitColor.b;\n                }\n                orbitGeo.attributes.position.needsUpdate = true;\n                orbitGeo.attributes.color.needsUpdate = true;\n\n                /***********************\n                 * WHITE-HOLE EFFECT\n                 ***********************/\n                if (whiteHoleActive) {\n                  const dt = clock.getDelta();\n                  for (let i = 0; i < posArray.length; i += 3) {\n                    let x = posArray[i], y = posArray[i+1], z = posArray[i+2];\n                    let dx = -x, dy = -y, dz = -z;\n                    let dist = Math.sqrt(dx*dx + dy*dy + dz*dz) + 0.0001;\n                    let force = hoverForceConstant / (dist * dist);\n                    if (repelActive) force = -force;\n                    if (dist < blackHoleThreshold) force = -force;\n                    let ax = force * dx / dist;\n                    let ay = force * dy / dist;\n                    let az = force * dz / dist;\n                    posArray[i]   += ax * dt;\n                    posArray[i+1] += ay * dt;\n                    posArray[i+2] += az * dt;\n                  }\n                  particleGeo.attributes.position.needsUpdate = true;\n\n                  if (!blackHoleMesh) {\n                    const geo = new THREE.IcosahedronGeometry(0.3, 0);\n                    const mat = new THREE.MeshPhongMaterial({\n                      color: 0xff0000,\n                      emissive: 0xff0000,\n                      shininess: 100,\n                      transparent: true,\n                      opacity: 1,\n                      side: THREE.DoubleSide\n                    });\n                    blackHoleMesh = new THREE.Mesh(geo, mat);\n                    scene.add(blackHoleMesh);\n                  }\n                  blackHoleMesh.position.set(0,0,0);\n                  blackHoleMesh.scale.setScalar(1 + 0.3 * Math.sin(2 * Math.PI * time));\n\n                  if (!whiteHolePixel) {\n                    const geoPixel = new THREE.SphereGeometry(0.08, 8, 8);\n                    const matPixel = new THREE.MeshBasicMaterial({ color: 0xffffff });\n                    whiteHolePixel = new THREE.Mesh(geoPixel, matPixel);\n                    scene.add(whiteHolePixel);\n                  }\n                  whiteHolePixel.position.set(0,0,0);\n                  whiteHolePixel.rotation.y += 0.1;\n\n                  if (!smokeSprite) {\n                    smokeSprite = createSmokeSprite();\n                    scene.add(smokeSprite);\n                  }\n                  smokeSprite.position.set(0,0,0);\n                  let scalePulse = 8 + 0.5 * Math.sin(time * 2);\n                  smokeSprite.scale.set(scalePulse, scalePulse, 1);\n                } else {\n                  if (blackHoleMesh) { scene.remove(blackHoleMesh); blackHoleMesh = null; }\n                  if (whiteHolePixel) { scene.remove(whiteHolePixel); whiteHolePixel = null; }\n                  if (smokeSprite) { scene.remove(smokeSprite); smokeSprite = null; }\n                }\n\n                renderer.render(scene, camera);\n                requestAnimationFrame(animate);\n              }\n\n              /**********************************\n               * SMOKE SPRITE CREATION\n               **********************************/\n              function createSmokeSprite() {\n                const canvas = document.createElement('canvas');\n                canvas.width = 128;\n                canvas.height = 128;\n                const context = canvas.getContext('2d');\n                const gradient = context.createRadialGradient(64,64,10,64,64,64);\n                gradient.addColorStop(0, 'rgba(255,255,255,0.8)');\n                gradient.addColorStop(1, 'rgba(255,255,255,0)');\n                context.fillStyle = gradient;\n                context.fillRect(0,0,128,128);\n                const texture = new THREE.CanvasTexture(canvas);\n                const material = new THREE.SpriteMaterial({\n                  map: texture,\n                  transparent: true,\n                  opacity: 0.6,\n                  blending: THREE.AdditiveBlending\n                });\n                const sprite = new THREE.Sprite(material);\n                sprite.scale.set(6,6,1);\n                return sprite;\n              }\n\n              /**********************************\n               * TOUCHSCREEN INTERACTIVITY (Existing)\n               **********************************/\n              let lastTouchX = null, lastTouchY = null, lastPinchDistance = null;\n              window.addEventListener(\"touchstart\", (event) => {\n                if (event.touches.length === 1) {\n                  lastTouchX = event.touches[0].clientX;\n                  lastTouchY = event.touches[0].clientY;\n                } else if (event.touches.length === 2) {\n                  const dx = event.touches[0].clientX - event.touches[1].clientX;\n                  const dy = event.touches[0].clientY - event.touches[1].clientY;\n                  lastPinchDistance = Math.sqrt(dx*dx + dy*dy);\n                }\n              }, {passive: false});\n\n              window.addEventListener(\"touchmove\", (event) => {\n                if (event.touches.length === 1 && lastTouchX !== null && lastTouchY !== null) {\n                  cotnst touch = event.touches[0];\n                  const dx = touch.clientX - lastTouchX;\n                  const dy = touch.clientY - lastTouchY;\n                  lastTouchX = touch.clientX;\n                  lastTouchY = touch.clientY;\n                  particles.rotation.y += dx * 0.005;\n                  particles.rotation.x += dy * 0.005;\n                } else if (event.touches.length === 2) {\n                  const dx = event.touches[0].clientX - event.touches[1].clientX;\n                  const dy = event.touches[0].clientY - event.touches[1].clientY;\n                  const currentDistance = Math.sqrt(dx*dx + dy*dy);\n                  if (lastPinchDistance !== null) {\n                    const scale = currentDistance / lastPinchDistance;\n                    camera.position.z /= scarle;\n                    camera.position.z = Math.max(3, Math.min(15, camera.position.z));\n                  }\n                  lastPinchDistance = currentDistance;\n                }\n              }, {passive: false});\n\n              window.addEventListener(\"touchend\", (event) => {\n                if (event.touches.length < 2) { lastPinchDistance = null; }\n                if (event.touches.length === 0) { lastTouchX = null; lastTouchY = null; }\n              });\n\n              /**********************************\n               * WINDOW RESIZE HANDLING\n               **********************************/\n              window.addEventListener(\"resize\", () => {\n                renderer.setSize(window.innerWidth, window.innerHeight);\n                camera.aspect = window.innerWidth/window.innerHeight;\n                camera.updateProjectionMatrix();\n              });\n\n              /**********************************\n               * Fullscreen Toggle\n               **********************************/\n              document.getElementById(\"fullscreen-button\").addEventListener(\"click\", () => {\n                let elem = document.documentElement;\n                if (!document.fullscreenElement) { elem.requestFullscreen(); }\n                else { document.exitFullscreen(); }\n              });\n\n              /**********************************\n               * WHITE-HOLE ACTIVATION VIA PUSH BUTTON\n               **********************************/\n              let hoverTimeout;\n              const pushButton = document.getElementById(\"pushButton\");\n              pushButton.addEventListener(\"mouseenter\", () => {\n                hoverTimeout = setTimeout(() => { whiteHoleActive = true; }, 6000);\n              });\n              pushButton.addEventListener(\"mouseleave\", () => { clearTimeout(hoverTimeout); whiteHoleActive = false; });\n              pushButton.addEventListener(\"touchstart\", () => {\n                hoverTimeout = setTimeout(() => { whiteHoleActive = true; }, 6000);\n              });\n              pushButton.addEventListener(\"touchend\", () => { clearTimeout(hoverTimeout); whiteHoleActive = false; });\n\n              /**********************************\n               * ENCRYPTED BUTTON (Fullscreen) REPULSION MODE\n               **********************************/\n              const fsButton = document.getElementById(\"fullscreen-button\");\n              fsButton.addEventListener(\"mouseenter\", () => { repelActive = true; });\n              fsButton.addEventListener(\"mouseleave\", () => { repelActive = false; });\n              fsButton.addEventListener(\"touchstart\", () => { repelActive = true; });\n              fsButton.addEventListener(\"touchend\", () => { repelActive = false; });\n\n              /**********************************\n               * INITIALIZE THE SCENE\n               **********************************/\n              init();\n            })();\n        </script>\n    </body>\n</html>\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en finished lol","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}