{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/wholesale-micro-sale-scraper-for-wealth-generati?scriptVersionId=216140721\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"Here is an advanced educational Python script that scrapes the World Wide Web to find wholesale and micro-sale deals for reselling, focusing on solutions and workflows related to residual income, wealth generation, and multi-family office exposures. The script incorporates creativity with Greek symbols like Delta (Î”) and Phi (Î¦) to represent profitability and optimization.\n\n# Python Script: Wholesale & Micro-Sale Scraper for Wealth Generation\n### By (Î”Î¦.\nThis script utilizes web scraping, advanced filtering, data analysis, and visualization techniques to explore profitable reselling opportunities. It combines technical elements with a fun and educational approach.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport re\n\n# -------------------------------------------\n# Fun Function: Delta and Phi Symbolism for Wealth Optimization\n# -------------------------------------------\ndef delta_phi_analysis(delta_value, phi_value):\n    \"\"\"\n    Fun function that uses Delta (Î”) and Phi (Î¦) to analyze the profitability of reselling deals.\n    \"\"\"\n    print(f\"Î” (Delta) represents change in wealth generation: {delta_value}\")\n    print(f\"Î¦ (Phi) represents the optimal balance for wealth growth: {phi_value}\")\n    \n    if delta_value > phi_value:\n        print(\"This reselling deal has great potential for residual income and wealth generation! ðŸ“ˆ\")\n    else:\n        print(\"Consider improving this deal for better wealth generation potential. ðŸ’¡\")\n\n# -------------------------------------------\n# Web Scraping Function: Scrape Wholesale and Micro-Sale Websites for Deals\n# -------------------------------------------\ndef scrape_wholesale_micro_sale(urls):\n    \"\"\"\n    Scrapes multiple wholesale and micro-sale websites for deals that align with residual income and wealth generation.\n    Filters for items that are ideal for reselling.\n    \"\"\"\n    all_deals = []\n\n    for url in urls:\n        print(f\"Scraping URL: {url}\")\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Searching for products (modify the tag and class as per target site structure)\n        products = soup.find_all('div', class_='product')  # Example class; modify for target websites\n        \n        for product in products:\n            name = product.find('h2').get_text() if product.find('h2') else \"No Name\"\n            price = product.find('span', class_='price').get_text() if product.find('span', class_='price') else \"No Price\"\n            description = product.find('p', class_='description').get_text() if product.find('p', class_='description') else \"No Description\"\n            \n            # Filtering for reselling deals based on keywords\n            if any(keyword in description.lower() for keyword in [\"wholesale\", \"bulk sale\", \"micro-sale\", \"profit\", \"resell\"]):\n                all_deals.append({\"name\": name, \"price\": price, \"description\": description})\n    \n    return all_deals\n\n# -------------------------------------------\n# Data Processing: Analyze Deals for Profitability and Residual Income Potential\n# -------------------------------------------\ndef process_deals_data(deals):\n    \"\"\"\n    Processes the scraped deals to analyze their profitability for reselling and residual income generation.\n    Uses Î” (Delta) and Î¦ (Phi) for profitability scoring.\n    \"\"\"\n    processed_deals = []\n    \n    for deal in deals:\n        # Analyzing based on price and description\n        price = float(re.sub(r'[^\\d.]', '', deal['price'])) if deal['price'] != \"No Price\" else 0\n        score = 0\n        \n        if price > 100:  # Larger deals are more profitable\n            score += 15  # Î”: Larger prices indicate higher profit potential\n        elif price > 50:\n            score += 10  # Moderate deal pricing\n        else:\n            score += 5   # Lower-end deals\n            \n        # Consider residual income and multi-family office potential in descriptions\n        if \"wholesale\" in deal['description'].lower():\n            score += 10  # Î¦: Wholesale typically has good resell value\n        if \"micro-sale\" in deal['description'].lower():\n            score += 8   # Î”: Micro-sales have a quick turnover time\n        \n        processed_deals.append({\"name\": deal['name'], \"price\": deal['price'], \"score\": score, \"description\": deal['description']})\n    \n    # Sort by score (higher score indicates better deal potential)\n    processed_deals = sorted(processed_deals, key=lambda x: x['score'], reverse=True)\n    \n    return processed_deals\n\n# -------------------------------------------\n# Visualization: Display the Best Deals for Reselling\n# -------------------------------------------\ndef visualize_deals(deals_data):\n    \"\"\"\n    Visualizes the best wholesale and micro-sale deals for reselling using bar charts.\n    \"\"\"\n    names = [deal['name'] for deal in deals_data]\n    scores = [deal['score'] for deal in deals_data]\n    \n    # Plotting a bar chart to show the best reselling deals\n    plt.figure(figsize=(10, 6))\n    plt.barh(names[:10], scores[:10], color='seagreen')\n    plt.xlabel(\"Profitability Score (Î”Î¦)\", fontsize=14)\n    plt.ylabel(\"Deals\", fontsize=14)\n    plt.title(\"Top 10 Reselling Deals with Highest Profitability\", fontsize=16)\n    plt.tight_layout()\n    plt.show()\n\n# -------------------------------------------\n# Main Function: Orchestrates Scraping, Processing, and Visualization\n# -------------------------------------------\ndef main():\n    # URLs to scrape from wholesale and micro-sale websites (add more relevant sources)\n    urls = [\n        'https://example.com/wholesale-deals',\n        'https://example.com/micro-sale-products',\n        'https://example.com/reselling-opportunities'\n    ]\n    \n    # Step 1: Scrape data\n    scraped_deals = scrape_wholesale_micro_sale(urls)\n    \n    # Step 2: Process deals and analyze profitability\n    profitable_deals = process_deals_data(scraped_deals)\n    \n    # Step 3: Visualize the top profitable deals\n    visualize_deals(profitable_deals)\n    \n    # Step 4: Demonstrate the fun Delta & Phi analysis for residual income opportunities\n    delta_phi_analysis(delta_value=20, phi_value=15)\n\n# Run the script\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T01:33:42.815854Z","iopub.execute_input":"2025-01-05T01:33:42.816184Z","iopub.status.idle":"2025-01-05T01:33:46.078732Z","shell.execute_reply.started":"2025-01-05T01:33:42.816148Z","shell.execute_reply":"2025-01-05T01:33:46.07753Z"}},"outputs":[{"name":"stdout","text":"Scraping URL: https://example.com/wholesale-deals\nScraping URL: https://example.com/micro-sale-products\nScraping URL: https://example.com/reselling-opportunities\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"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v/xSVapUUb58+ZLdwzxv3jw9+eST8vPzk5ubmwICAvTcc8/p33//daiXdO900h88x48f73AtSZx9ZtlsNg0ZMkSSNGTIEIf9bnwvt2/frvDwcNWtW1f33Xef3NzcVLBgQYWEhOiPP/645dfi0qVLGjBggB544AF5eHgoICBAnTt3TvG9T8vaBDe63e/F+vXry2az6bfffkvx2MOGDZPNZrsjtwgAdyumlwMwZu3atWratKnOnj2roKAgtWjRQjExMVqyZIlWrVql6dOn6++//5abm1uyfc+dO6datWrpzJkzDr/oDB8+XHPmzLkj9ztv2LBBklSgQAGVLFnSaZ3q1avryJEj2rBhg9q2bZsp542NjZV0/Z7vmy1btkwtWrTQuXPnVKJECTVp0kTx8fFas2aNevTooZkzZ2rWrFnKnTu3JCkxMVHNmjXTwoUL5eXlpUceeUQ+Pj46deqU9uzZo88++0wvvPCC/Rdb6fov6U2bNtWWLVtUoEAB1ahRQ/nz59f69ev12WefacqUKVqyZImKFy+eKdebko0bN+qNN96Qr6+v6tevr7Nnz2rlypX66KOPtG3bNk2fPt2hfmJiop555hnNmjVLbm5u9oXv1q5dqxo1auill14y2t527drps88+07lz5/Tvv/+qdu3a9m3bt29X06ZNdeTIERUtWlT16tVT7ty5tWbNGg0aNEjTpk3TkiVLHEZHN23apK5du6pw4cIqW7asqlWrpnPnzmndunX6+OOP9ccffygyMlIFCxa8Zdtupx+kJCQkRBs2bNCCBQscZn8sWLBAlmXZ//9Gly9f1qpVq+Tp6am6deumevymTZvKw8ND8+bNc1j3QJLTUbj09pOsktH+GRMTozp16ujw4cN65JFHVKFCBUVERGjChAlaunSpNm3alGx03eTnxQMPPKCOHTtq6tSpunjxosOaB5Ls92dn9Gt28eJFSUp2y4ZlWXr22Wc1d+5cPfLIIypfvry2bdtm3z5o0CB9+OGHstlsqlOnjoKCgrRjxw798ccfmjZtmr7//nv71zzpjxd79+7VypUrVapUKdWrVy9NbezYsaM2btyoTZs2qVKlSg73f994jC+//FI//fSTypUrp4oVK8rHx0eHDx/W4sWLtXDhQkVGRurLL790eo4rV66ocePG2rx5sxo0aKCqVatqxYoV+vnnnzV79mwtW7Ys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LwdghLu7u6ZOnaqmTZtq9OjRmj17tmrXrq3z589r0aJFiouLU2hoqMLDw53u//TTT2vr1q26//777QvpLFmyRGfPnlXp0qXtv+in1T///KMPPvjA/u/t27dLuv74nhuPFRkZ6bBfixYt1LNnT3399deqXbu2GjdurLx582rhwoWKjo5W3bp1HY6bWfr166fvv/9e+/fv19ixY9WlSxcVK1ZMf/31l1q2bKm3337b/viuokWLKiYmRjt27NC+fftUq1Yt+0qxmzdv1ltvvSUvLy9VrVpVAQEBunz5stavX69Dhw7J29tb77//vv28Li4umjFjhpo1a6bx48dr6tSpqlSpkoKCgnTlyhXt379fW7Zs0bVr19SpUyenK5xnlZ49e2r+/PmaM2eOHn74YTVs2FA+Pj5au3atjh8/rtdee02jRo267YWg3n77bfsiWBcvXtTx48e1fv16xcXFycXFRd26ddPnn3+e7Ph58+bVP//8oyeffFLDhg3T999/r4cffljFihXTpUuXtHv3bu3YsUN+fn726by5cuXSe++9p7feeksdOnTQt99+q/vvv1+HDx/WqlWr1K5dOy1btkyHDh1KU9vT2w/SIil0x8XFydPT0z66eOP2LVu2ONRNq6CgIFWvXl3//vuvKlasqOrVq8vDw0OFChXSJ598kq5j3S1M98+b3YnPC+n6CuKLFy9Wu3bt9Nhjj9kX9evTp4/Do9HupMcff1wDBw7Uhx9+qCZNmqhu3boKCgrSzp07tX79euXKlUtjxozJtHUpQkNDlTdvXs2YMUP16tVT6dKllStXLtWtW1dhYWF66qmnVK1aNa1bt05lypRR/fr1lTdvXq1evVrHjx9X3759nU47TxIcHKzExESVLVtWjRo1Up48ebRixQodP35cfn5+mjBhQqZchzPp+V50cXHR66+/rjfffFPS9Ue2mV5LA8gu7p7flgDkODVq1NDGjRv16aefas6cOZo+fbrc3d1VpUoVdejQQS+//HKKoc3X11eRkZEaNGiQ/vnnH508eVJFihRRu3btFB4e7rA6dFqcOnVKq1evTla+b98+7du3L9V9R4wYobp16+rbb7/VqlWrlJCQoFKlSqlfv3566623jKzm6+vrq759+6p///766KOP1LFjR7m5uenRRx/Vtm3bNHLkSP3zzz9au3at4uPj5efnp6CgILVr187hMTpPPfWUYmJitHz5cu3Zs0eRkZHy9PRUYGCg+vXrp+7duye7FzAgIECRkZEaN26cJk+erM2bN2vNmjUqUKCAAgIC1K1bNz399NNOZyhkpVy5cumvv/7S8OHDNW7cOC1evFj58+fXI488ohkzZmj69OmSrq8gfTuSpv+6uLgoX758KlCggEJCQhQcHKx27dqluLq0dH3Ruc2bN2vMmDGaPn26Nm/erIiICBUqVEjFihXT22+/rWeeecZhnzfffFMlS5bUsGHDtH37dm3btk3lypXTt99+q27duqXrWdG30w9uJWmV8iNHjqhevXrJHg0YEhKir776yv7/6TVt2jT1799fixcv1uTJk3X16lUVL14824Zu0/3TmTvxefHqq6/q/PnzmjhxombPnm2/nahdu3ZZFrol6YMPPlDdunX1zTffaPXq1YqMjFShQoXUunVrvf3226pZs2amnatIkSKaM2eO3n//fa1bt04RERFKTEzU1atXFRYWJldXVy1ZskRDhw7VtGnTtHDhQnl5ealOnTqaNm2azp8/n2rodnNz0z///KMhQ4Zo6tSpOnbsmHx9fdWpUye9//77xmd9ped7MTQ0VJKUJ08e+3PWAUg2KzvdtAcgxxs3bpzCwsLUsWPHVB/ZA6RXo0aNtHjxYk2bNk3PPvtsVjcHcED/RE4wcOBAffTRR+ratau+++67rG4OcNfgnm4AQI6xcePGZPeuXrlyRYMHD9bixYvl5+eXqYveAelB/0RO9t9//+nbb7+Vi4uLfYo5gOuYXg4AyDHefPNNbdy4UZUqVVLRokV17tw5bdmyRf/99588PDw0fvz4u25aPO4d9E/kRP369dOxY8e0YMECRUdHq1u3bvbF4wBcR+gGAOQYXbp00a+//mq/D92yLAUEBOill15S79699eCDD2Z1E3EPo38iJ/r99991+PBh+fv7680338y26y4AJnFPNwAAAAAAhnBPNwAAAAAAhhC6AQAAAAAwhHu6DUlMTNTx48eVP39+2Wy2rG4OAAAAACATWZal8+fPKyAgQC4uKY9nE7oNOX78uAIDA7O6GQAAAAAAg44cOaJixYqluJ3QbUj+/PklXX8DvLy8srg1AAAAAIDMFBsbq8DAQHv2Swmh25CkKeVeXl6EbgAAAADIoW51OzELqQEAAAAAYAihGwAAAAAAQwjdAAAAAAAY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EuXKlUuS1KBBA/3+++8qXry4tm7dqiJFiujrr79Wly5dMqWxd7P+/fsrJibG/jpy5EhWNwkAAAAAkMUy9JxuLy8v1apVy6GsdevWat26dYYalVaFChVSrly5dOLECYfyEydOyN/f3+k+/v7+qdZP+u+JEydUtGhRhzqVK1dOsS3u7u5yd3e/ncsAAAAAAORQGRrpzmpubm6qVq2aFi5caC9LTEzUwoULFRwc7HSf4OBgh/qSNH/+fHv9kiVLyt/f36FObGysVq9eneIxAQAAAABwJlNC9/Tp09WmTRs9/PDDeuCBB+zlO3fu1LBhw3Ts2LHMOI1TvXr10g8//KDx48drx44devXVV3Xx4kWFhYVJkjp06KD+/fvb67/xxhuaO3euvvjiC+3cuVODBw/Wv//+q9dff12SZLPZ9Oabb+rDDz/U33//rS1btqhDhw4KCAhQixYtjF0HAAAAACDnydD08sTERLVt21ZTp06VJHl6eury5cv27b6+vnr33Xd17do1h+CbmZ577jmdOnVK7733nqKiolS5cmXNnTvXvhDa4cOH5eLyf39bqFOnjiZNmqSBAwdqwIABKl26tGbMmKEKFSrY67zzzju6ePGiunbtqujoaNWrV09z586Vh4eHkWsAAAAAAORMNsuyrNvd+YsvvlCfPn3UrVs3ffLJJ/ryyy/1wQcf6Nq1a/Y6jRo10pUrV7RixYpMaXB2ERsbK29vb8XExMjLyyurmwMAAAAAyERpzXwZml4+btw41ahRQ6NGjZKXl5dsNluyOg888IAOHDiQkdMAAAAAAJAtZSh07927V4888kiqdQoWLKgzZ85k5DQAAAAAAGRLGQrdnp6eiomJSbXOoUOH5OPjk5HTAAAAAACQLWUodFepUkXz5s1TXFyc0+1nz57V3LlzVbt27YycBgAAAACAbClDobtnz546evSoWrZsqaNHjzps27dvn5555hnFxMSoZ8+eGWokAAAAAADZUYYeGda8eXP17dtXn376qYoXL668efNKkvz8/HTmzBlZlqVBgwapUaNGmdJYAAAAAACykwyNdEvS0KFDNW/ePD355JPKkyePcuXKpcTERDVt2lRz5szRkCFDMqOdAAAAAABkOxl6TjdSxnO6AQAAACDnSmvmy9D08mPHjmnGjBlau3atTp8+Len61PIaNWqoRYsWKlq0aEYODwAA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xfrZPciOGzdONptN48aNM3oey7I0ceJENWrUSAULFpSbm5uKFCmiKlWq6LXXXtPSpUuNnj+rnDt3Th988IFeeukllShRIsV6jRo1ks1mU4UKFdJ9Dg8Pj1SPnaR3795ycXFReHh4us8BALg9rlndAAAAUlKqVCm1a9dOknThwgVFRkbqt99+059//qmFCxeqbt26Rs47a9Ys5cuXT/Pnz5ebm5u9PCEhQTt27JC3t7eR896uCRMm6NKlS5leN7O99NJLGjdunHx9ffXkk0/qvvvu0+XLl7Vp0yb99NNPio2NVf369bOkbSZ99dVXOnv2rPr06ZNinf3792vJkiXy9vbWtm3btHr1atWqVSvV41qWpbVr1yoyMlJXr15VdHS0Ro0apXr16unhhx92uo+vr69efvlljRgxQv3791fx4sUzdG0AgFsjdAMA7loPPPBAsunRAwcO1EcffaR3331XS5YsMXLe48eP20dib5Q7d+5UR7yzSlBQkJG6mWn58uUaN26cKleurKVLl8rLy8the3R0tLZv354lbTPp6tWr+vHHH1W3bl2VKlUqxXo///yzLMvS6NGj9eKLL+qnn35KNXQvWrRIPXr0cPiaxcTEqHv37pKkmjVravTo0apatWqyfdu1a6cvv/xSP/74oz744IMMXB0AIC2YXg4AyFZ69OghSVq7dq29zGazqUGDBjp27Jg6dOggf39/ubi4OITysWPHqlatWsqXL5/y5cunWrVqJZtOPXjwYNlsNh04cECHDh2yT21Pmrbr7J5um81mnxZ943T4G+v8/PPPat68uUqUKCEPDw8VKFBAoaGhWrx4carXumLFCjVo0ED58+eXj4+PWrZsqb179yarl57p7TfX7dSpk8LCwiRJYWFhDtcgSfXq1ZOrq6v+++8/p8fr0KGDbDabIiIiUj1v0vaOHTsmC9yS5OPjozp16iQrv3Llir766ivVqFFD+fPnV758+fTggw+qV69eOnfunEPdrVu3qk2bNvLz85O7u7tKliypN998U2fOnEl23BIlSqhEiRKKjo7W66+/rsDAQLm6ujr0ic2bN+v5559X0aJF5ebmpuLFi6tHjx5Oj5eSuXPn6r///lPr1q1TrHPt2jWNGzdOpUuXVtu2bVWnTh39/vvvunjxotP6U6dO1WOPPabdu3frrbfe0po1a+Tu7q7AwECtWLFCnTt31tq1a1WvXj0tX7482f5VqlTRAw88YPx2AgDAdYx0AwCypZtD5pkzZxQcHKwCBQro+eefV1xcnD3c9ezZU998843uu+8+de7cWZI0bdo0hYWFacOGDRoxYoSk64FUur7olSS9+eabkq4HwpSEh4dr3LhxOnTokMN9spUrV7b/f/fu3VWpUiWFhISocOHCOnbsmGbMmKGQkBD9+eefat68ebLjRkZGaujQoWratKl69Oihbdu2afr06Vq+fLkiIyN1//33p+fLlaIWLVooOjpaf/31l5o3b+7Qbkl65ZVXtHLlSo0dO1YDBgxw2BYdHa2pU6fqoYceUnBwcKrnKViwoCRp9+7daW7b5cuX1aRJE61cuVKlS5dWWFiY3N3dtWfPHn333Xfq0KGDfH19JV3/A0VoaKiuXLmiVq1aqUSJEoqIiNCIESM0a9YsRUZGqlChQg7Hj4+PV6NGjXThwgU9/fTTcnV1VZEiRSRJf//9t9q0aSMXFxc1b95cgYGB2r59u0aOHKl58+Zp9erV9nOnZuHChZKk2rVrp1hn3rx5OnbsmIYMGSJJat++vbp166YpU6YkW7Tv1KlTevnll2VZlubOnauQkBD7NhcXF9WtW1d169bVo48+qo4dO6pDhw7atWtXslkbwcHB+uWXX7R7926VKVPmltcBAMgACwCAu8yBAwcsSVZoaGiybe+9954lyWrYsKG9TJIlyQoLC7OuXr3qUH/p0qWWJKt8+fJWdHS0vfzs2bNWmTJlLEnWsmXLHPYpXry4Vbx48RTb1bFjR4fy+vXrW6n9SN2/f3+ysuPHj1sBAQFW6dKlHcoXL15sv54xY8Y4bBszZowlyXryySdvef6k44SHh9+y7tixYy1J1tixY5O18/Lly1aBAgWs+++/30pMTHTYNnLkSEuSNXz4cKfXfaMjR45YXl5els1ms1544QVrypQp1sGDB1Pdp3fv3pYkq3379sne1+joaOv8+fOWZVnWtWvXrFKlSlmSrLlz5zrU69OnjyXJeumllxzKixcvbu9jly5dcth2+vRpy8vLy7rvvvuStfG3336zJFmvv/76La/ZsiyrRo0alouLixUXF5dinWeffdaSZO3bt8+yrOt9083NzapXr16yuqNGjbIkWc8995xDubu7e7I+W6tWLUuSNXv27GTHGTFihCXJ+vnnn9N0HQCA28f0cgDAXWvv3r0aPHiwBg8erD59+ujRRx/V+++/Lw8PD3300UcOdd3c3DRs2DDlypXLoXz8+PGSrk8dv3EBNF9fX/vItOlptiVLlkxWVrRoUbVs2VJ79uzRoUOHkm0vU6aMunTp4lDWpUsXlS5dWv/8849OnTplrL038vDwUMeOHbV//34tWrTIYdtPP/0kd3d3tW/f/pbHKVasmKZNm6bAwEBNmjRJrVu3VokSJeTn56fnnnsu2bGvXr2q77//Xt7e3hoxYkSy99Xb21v58uWTJK1cuVL79u3T448/rtDQUId67733ngoUKKBJkybpypUrydo1bNgweXp6OpRNmDBBsbGxGjp0aLKFxp5//nlVrVpVv//++y2vWZKOHj0qHx8fubu7O91+6tQpzZw5U3Xq1LHPXvD19VWzZs20YsUK7dq1y6H+tm3bJF2f9n8rSXWc3SufNKJ/9OjRNF0HAOD2Mb0cAHDX2rdvn33Kbe7cuVWkSBG98MIL6tevnypWrOhQt2TJksmmD0vShg0bJP3f1PEbNWzYUJK0cePGzG34Tfbv36+hQ4dq0aJFOnbsmOLj4x22Hz9+PFm4q1u3rlxcHP82njR9eM+ePdq0aZPD1GKTunbtqq+++ko//PCDGjduLElat26dNmzYoBdeeEEFChRI03FCQkK0b98+LVmyRMuWLdO6deu0YsUK/fHHH/rjjz/Uv39/ffzxx5KknTt36vz58woJCbnlNO7U3uN8+fKpevXq+t///qddu3Y59BsPD49k/Ui6PrVfklavXq19+/Yl2x4XF6fTp0/r9OnTTvvcjc6cOaNixYqluH38+PFKSEhI9oeL9u3ba/r06fr555/16aefJtsvLffwJ9WxLCvZtqT37PTp07c8DgAgYwjdAIC7VmhoqObOnZumukkjdzeLjY2Vi4uLChcu7HQfm82m2NjYDLUzNXv37lXNmjUVGxurhg0b6qmnnpKXl5d9obelS5cmC+FJbXMmqTwmJsZYm29Wrlw51a9fXzNmzNCZM2dUsGBB/fjjj5KUbDT+VlxdXRUSEmL/g8HVq1c1btw4vfrqqxo6dKhatWqlqlWr2q/vvvvuu+Uxk96/lL5mRYsWdaiXxM/Pz2l4PXv2rCTp22+/TfW8Fy9evGXo9vT0VFxcXIrbf/rpJ7m5ualNmzYO5c2aNZOvr68mTJigjz76SK6u139lK1++vKTro/tJK5WnZOXKlZKkBx98MNm2y5cvS5Ly5MmT6jEAABnH9HIAQI6Q0sifl5eXEhMTnU7HPnnypCzLcrqadmb56quvdO7cOY0bN07z58/X8OHD9f7772vw4MGpPn7sxIkTqZbf6WeFd+vWTfHx8fbnfP/2228qXbq009Hl9HB1ddXLL7+sF154QZLsK7onLV537NixWx4j6f1L6WsWFRXlUC9Jan1GkrZs2SLLslJ8peUZ14ULF7aH+JutWrVKO3fu1BNPPJFstkBSEI+KitLs2bPt5a1bt1b+/Pn1xx9/pPrIvF9//VUREREKCgqyz064UVKbnP0xCgCQuQjdAIAcrUqVKpLkNKAkld28Ynd6Jd1vfO3atWTbkqYn37xCuWVZ9pFIZ1auXKnExESHssTERK1atUo2m02VKlXKUJtvlFr7kzz77LMqXLiwfvzxR02ZMkUxMTF6+eWXM60NSfdnJylbtqy8vLy0du3aZI8Gu1lq7/HFixf177//ytPTU2XLlk1TW5Kej32rx6ClRcWKFRUXF6fDhw8n2/bTTz9JUor3xCeVJ9WTro/Of//997IsS4899pjeeecd++0RiYmJWrNmjbp166YOHTrIw8ND48ePd3o/edK94s6m1wMAMhehGwCQo3Xs2FGSNGTIEIfpxTExMfb7xZPq3K6kUcojR44k25Y0GrpixQqH8k8++URbt25N8Zi7d+/WDz/84FD2ww8/aPfu3WrWrFmmjlCm1v4kbm5u6tSpk7Zv364BAwYod+7cyR5nlZq5c+fqr7/+0tWrV5Nt27t3r6ZMmSLp/xb/cnV11SuvvKKYmBi98cYbyf4gEBMTowsXLki6fv97qVKlNGfOHC1YsMCh3ocffqgzZ86obdu2yR6blZKwsDDlz59f7777rn3hshtdunTJft/3rdSvX1/S9fvDb3ThwgX98ccf8vHxUbNmzZzuW7duXZUsWVKzZ8+2j9ZL1xdzmzt3rkqWLKnPPvtMVapUUXx8vI4cOaJatWrpu+++U6VKlbRs2bIUZyKsXr1arq6uTp+NDgDIXNzTDQDI0R599FH16NFD33zzjSpUqKCWLVvKsixNmzZNR48eVc+ePfXoo49m6ByNGjXS1KlT1bJlSz3++OPy8PBQpUqV9NRTT6lbt24aO3asWrZsqTZt2qhgwYKKjIzU+vXr1axZM/3zzz9OjxkaGqqePXtq9uzZeuihh7Rt2zbNnDlThQoVsj9XPLMEBwfL09NTw4cP17lz5+yBfuDAgQ71XnnlFX3++ec6fvy4WrZsKT8/vzSfY+fOnXrrrbdUqFAhPfrooypVqpQsy9LevXs1e/ZsXblyRa+++qp9lFmS3n//fUVGRuqXX35RZGSkHn/8cbm7u2v//v2aO3euVqxYocqVK8vFxUXjxo1TaGionnjiCbVu3VrFixdXRESElixZolKlSumTTz5Jc1sLFy6s3377Ta1bt1alSpXUtGlTlStXTvHx8Tp48KCWLl2qOnXqpGm9gebNm6tXr16aP3++WrdubS+fPHmyLly4oGLFiqV6b3bu3Ll19epVjR8/Xn379rWXN2nSRDt27NDq1au1evVqvf3228qXL5+GDBmievXqqVq1aike88KFC4qMjFSTJk2UN2/eNH5VAAC3LUseVAYAQCpSe063M5Ks+vXrp1rn559/tmrUqGHlyZPHypMnj1WjRo0Un1Gc3ud0JyQkWO+8844VFBRkubq6JquzePFiq27dulb+/PktHx8f64knnrDWrVtnhYeHW5KsxYsXO9TV/3++9vLly6369etbefPmtby8vKxnnnnG2rNnT7J2ZfQ53ZZlWf/8849Vo0YNy9PT0/6ccGfq1avn9HnYt3Ly5Enrhx9+sFq1amWVLVvWyp8/v5U7d26raNGi1pNPPmlNnTrV6X5xcXHW559/blWuXNny9PS08uXLZz344INW7969rXPnzjnU3bx5s9WqVSurUKFCVu7cua3ixYtbb7zxhnXq1Klkx03pPb7Rzp07rc6dO1vFixe33NzcLF9fX6tixYpWz549rTVr1qT52h9//HHL19fX4VndwcHB9q9zWl5lypRJ9RzOntOdknHjxlmSrBkzZqT5GgAAt89mWU6eIwEAAHCTuLg4FStWTPny5dP+/fuTPdIMzi1cuFAhISGaOHGiXnzxxaxujh555BGdOHFCO3bsSPb8cwBA5uOnJQAASJOxY8fqzJkzeuWVVwjc6dC4cWM1bdpUH374YbLF8e60hQsXasWKFfr0008J3ABwhzDSDQAAUvXJJ5/o1KlT+u6775Q3b17t3r37jj+yLLvbvXu3Jk2apM6dOyswMDDL2vHnn3/qwIED6t27d5a1AQDuNYRuAACQKpvNpty5c6tSpUr65ptvVLt27axuEgAA2QarlwMAgFTx93kAAG4fN2QBAAAAAGAIoRsAAAAAAEMI3QAAAAAAGELoBgAAAADAEEI3AAAAAACGELoBAAAAADCE0A0AAAAAgCGEbgAAAAAADCF0AwAAAABgyP8D2GXSFqoraUEAAAAASUVORK5CYII=\n"},"metadata":{}},{"name":"stdout","text":"Î” (Delta) represents change in wealth generation: 20\nÎ¦ (Phi) represents the optimal balance for wealth growth: 15\nThis reselling deal has great potential for residual income and wealth generation! ðŸ“ˆ\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Explanation of the Code:\n\n### 1. Delta (Î”) and Phi (Î¦) Analysis:\n\nThe delta_phi_analysis function symbolically represents the change (Î”) in wealth and the optimal balance (Î¦) for reselling and wealth generation.\nThe script prints whether the reselling deal is optimal for wealth generation, based on Delta and Phi.\n\n### 2. Web Scraping:\n\nThe scrape_wholesale_micro_sale function scrapes multiple wholesale and micro-sale websites. It looks for deals that mention keywords like \"wholesale,\" \"bulk sale,\" and \"micro-sale\" to filter out profitable reselling opportunities.\nWe scrape product name, price, and description from each product page.\n\n### 3. Data Processing & Profitability Scoring:\n\nThe process_deals_data function assigns a profitability score to each deal based on factors like price, resale potential, and the presence of keywords related to residual income.\nThe Delta (Î”) symbol is used to increase the score for larger deals, while Phi (Î¦) increases the score for deals that align with wealth-building principles.\n\n### 4. Visualization:\n\nThe visualize_deals function visualizes the top 10 profitable deals in a bar chart, ranking them by their profitability score.\nThe highest-ranked deals are displayed as the most profitable opportunities for reselling.\n\n### 5. Main Function:\n\n- The main function orchestrates the process by scraping data, processing it for profitability, and visualizing the results.\n- The script runs and prints useful information about each deal, while also providing a visual representation of the best reselling opportunities.\n\n### Fun and Creative Points:\nGreek Symbols (Î” and Î¦): The incorporation of Greek symbols makes the analysis fun and educational, while also symbolizing wealth generation and optimization.\nScoring System: Deals are scored based on the likelihood of generating residual income, with special emphasis on \"wholesale\" and \"micro-sale\" keywords.\nVisualizations: The script generates engaging visual outputs, making it easier to identify the best deals for reselling.\n\n### Use Cases:\nE-commerce Sellers: This script is useful for e-commerce entrepreneurs looking to identify profitable wholesale and micro-sale opportunities.\nFinancial Researchers: Wealth managers and researchers interested in wealth generation strategies can adapt the script for analyzing product deals that contribute to passive income.\nEducational Tool: This script serves as a learning tool for web scraping, data analysis, and visualization techniques, particularly in the context of online commerce.\n\n### Next Steps:\n- Expand URL List: Add more websites to scrape from, including wholesale marketplaces, product listing sites, and reselling platforms.\n- Advanced Filtering: Implement more advanced natural language processing (NLP) techniques to analyze product descriptions and better filter for high-margin deals.\n- AI/ML Integration: Integrate machine learning models to predict future reselling profitability based on historical data.\n\nThis Python script provides a complete workflow for scraping, analyzing, and visualizing profitable wholesale and micro-sale deals with a focus on wealth generation and reselling, all while embedding creative elements like Delta (Î”) and Phi (Î¦).","metadata":{}},{"cell_type":"code","source":"#enfin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}