{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216784890\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\n\n# Configurations\nUSER_LOCATION = (34.134117, -118.321495)  # Example: San Francisco, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper Functions\ndef get_latest_news():\n    # Simulated news articles\n    news_articles = [\n        {\"title\": \"Major Accident on Highway 101\", \"description\": \"A multi-vehicle collision has occurred on Highway 101 near Exit 23.\", \"location\": (37.7749, -122.4194)},\n        {\"title\": \"Flood Warning Issued\", \"description\": \"Severe flooding expected in low-lying areas of San Francisco.\", \"location\": (37.7749, -122.4194)},\n    ]\n    return news_articles\n\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": article.get(\"location\", None),\n        })\n    return emergencies\n\ndef get_real_time_traffic(location):\n    # Simulated traffic data\n    traffic_data = {\n        \"traffic\": {\n            (34.134117, -118.321495): {\"volume\": 120, \"severity\": \"high\"},\n        }\n    }\n    return traffic_data\n\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location:\n            distance = geopy.distance.geodesic(USER_LOCATION, location).km\n            traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n            routes.append({\n                \"emergency\": emergency,\n                \"distance\": distance,\n                \"traffic\": traffic_info,\n            })\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Machine Learning Prediction Model\ndef train_accident_risk_model():\n    # Placeholder: Normally, you'd load historical traffic and accident data\n    X = np.random.rand(100, 3)  # Simulate features like traffic volume, weather, and distance\n    y = np.random.randint(0, 2, 100)  # Simulate binary labels (accident/no accident)\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Main Execution Loop\nsubscribers = []  # List of (phone_number, carrier)\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5  # Placeholder for weather severity index\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T10:09:01.388923Z","iopub.execute_input":"2025-01-09T10:09:01.389288Z"}},"outputs":[{"name":"stdout","text":"Checking for updates at 2025-01-09 10:09:01.535582...\nSleeping for 60 seconds...\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}