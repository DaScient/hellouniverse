{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216799518\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## [Sentinelâ„¢](https://www.kaggle.com/code/dascient/sentinel) \n### Current Wildfire Trends","metadata":{}},{"cell_type":"code","source":"import folium\nfrom IPython.display import display\n\n# Constants\nMAP_CENTER = (34.1177, -118.3520)  # Hollywood Hills\nMAP_ZOOM_START = 12\n\n# Simulated Wildfire Data\nwildfire_data = [\n    {\"name\": \"Hollywood Fire\", \"latitude\": 34.118, \"longitude\": -118.352, \"size\": \"150 acres\", \"status\": \"Active\"},\n    {\"name\": \"Griffith Park Fire\", \"latitude\": 34.136, \"longitude\": -118.294, \"size\": \"75 acres\", \"status\": \"Contained\"},\n    {\"name\": \"Mulholland Fire\", \"latitude\": 34.145, \"longitude\": -118.368, \"size\": \"200 acres\", \"status\": \"Active\"},\n]\n\n# Simulated Road Closure Data\nroad_closures = [\n    {\"road\": \"Mulholland Drive\", \"latitude\": 34.126, \"longitude\": -118.352, \"status\": \"Closed\"},\n    {\"road\": \"Laurel Canyon Blvd\", \"latitude\": 34.11, \"longitude\": -118.366, \"status\": \"Partial Closure\"},\n]\n\n# Function to generate a map with wildfire and road closures data\ndef generate_combined_map(wildfire_data, road_closures):\n    combined_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for fire in wildfire_data:\n        popup_info = f\"<b>{fire['name']}</b><br>Size: {fire['size']}<br>Status: {fire['status']}\"\n        folium.Marker(\n            location=(fire[\"latitude\"], fire[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"red\" if fire[\"status\"] == \"Active\" else \"green\", icon=\"fire\")\n        ).add_to(combined_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        popup_info = f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n        folium.Marker(\n            location=(closure[\"latitude\"], closure[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(combined_map)\n\n    return combined_map\n\n# Generate the interactive map\ncombined_map = generate_combined_map(wildfire_data, road_closures)\n\n# Display the map in the Notebook\ncombined_map","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:06:17.472308Z","iopub.execute_input":"2025-01-09T12:06:17.47278Z","iopub.status.idle":"2025-01-09T12:06:17.515888Z","shell.execute_reply.started":"2025-01-09T12:06:17.472742Z","shell.execute_reply":"2025-01-09T12:06:17.514561Z"},"_kg_hide-input":true},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"<folium.folium.Map at 0x7bae7ce095a0>","text/html":"<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    \n        &lt;script&gt;\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        &lt;/script&gt;\n    \n    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_6d780f568ec325208b7c02a95e513dd8 {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n        \n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_6d780f568ec325208b7c02a95e513dd8&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_6d780f568ec325208b7c02a95e513dd8 = L.map(\n                &quot;map_6d780f568ec325208b7c02a95e513dd8&quot;,\n                {\n                    center: [34.1177, -118.352],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 12,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_4ec3a447473e9c7e59c57024813973eb = L.tileLayer(\n                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n                {&quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n            );\n        \n    \n            tile_layer_4ec3a447473e9c7e59c57024813973eb.addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var marker_5b2700bc79122c6dbe0478c5453a098b = L.marker(\n                [34.118, -118.352],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_48e413a44d84661997040fd8aac59f5c = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_5b2700bc79122c6dbe0478c5453a098b.setIcon(icon_48e413a44d84661997040fd8aac59f5c);\n        \n    \n        var popup_383465297c50e77f1c57130caf859b98 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_9dfb5b20b77bedf032217887b5175224 = $(`&lt;div id=&quot;html_9dfb5b20b77bedf032217887b5175224&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Hollywood Fire&lt;/b&gt;&lt;br&gt;Size: 150 acres&lt;br&gt;Status: Active&lt;/div&gt;`)[0];\n                popup_383465297c50e77f1c57130caf859b98.setContent(html_9dfb5b20b77bedf032217887b5175224);\n            \n        \n\n        marker_5b2700bc79122c6dbe0478c5453a098b.bindPopup(popup_383465297c50e77f1c57130caf859b98)\n        ;\n\n        \n    \n    \n            var marker_fa5fd74bc356800920a39f7e79ec87d1 = L.marker(\n                [34.136, -118.294],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_46962ca5c86ad0a784e8293a8f738802 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;green&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_fa5fd74bc356800920a39f7e79ec87d1.setIcon(icon_46962ca5c86ad0a784e8293a8f738802);\n        \n    \n        var popup_d35dd4c47a985b0ba66165cbe245adc6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_f0c777780226f193ffbf0cbb48c5cfe2 = $(`&lt;div id=&quot;html_f0c777780226f193ffbf0cbb48c5cfe2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Griffith Park Fire&lt;/b&gt;&lt;br&gt;Size: 75 acres&lt;br&gt;Status: Contained&lt;/div&gt;`)[0];\n                popup_d35dd4c47a985b0ba66165cbe245adc6.setContent(html_f0c777780226f193ffbf0cbb48c5cfe2);\n            \n        \n\n        marker_fa5fd74bc356800920a39f7e79ec87d1.bindPopup(popup_d35dd4c47a985b0ba66165cbe245adc6)\n        ;\n\n        \n    \n    \n            var marker_9a9212d2b94b89e83c83d4997ad55fd7 = L.marker(\n                [34.145, -118.368],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_d27cffbfaee13370a44b7c6e7a61aba4 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_9a9212d2b94b89e83c83d4997ad55fd7.setIcon(icon_d27cffbfaee13370a44b7c6e7a61aba4);\n        \n    \n        var popup_bf81d3437e4c56b74909e206693f1925 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_35d19fbffc523d523885c425265923ba = $(`&lt;div id=&quot;html_35d19fbffc523d523885c425265923ba&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Mulholland Fire&lt;/b&gt;&lt;br&gt;Size: 200 acres&lt;br&gt;Status: Active&lt;/div&gt;`)[0];\n                popup_bf81d3437e4c56b74909e206693f1925.setContent(html_35d19fbffc523d523885c425265923ba);\n            \n        \n\n        marker_9a9212d2b94b89e83c83d4997ad55fd7.bindPopup(popup_bf81d3437e4c56b74909e206693f1925)\n        ;\n\n        \n    \n    \n            var marker_14a0563fa9d3bce94fceb33858dafe9f = L.marker(\n                [34.126, -118.352],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_5b49b41d226955029cc2c6bb6956bb60 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;road&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_14a0563fa9d3bce94fceb33858dafe9f.setIcon(icon_5b49b41d226955029cc2c6bb6956bb60);\n        \n    \n        var popup_1365700793795aa4b4457d79da07d484 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_28b0b70c942120b02ce2b246b818ed3c = $(`&lt;div id=&quot;html_28b0b70c942120b02ce2b246b818ed3c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Road: Mulholland Drive&lt;/b&gt;&lt;br&gt;Status: Closed&lt;/div&gt;`)[0];\n                popup_1365700793795aa4b4457d79da07d484.setContent(html_28b0b70c942120b02ce2b246b818ed3c);\n            \n        \n\n        marker_14a0563fa9d3bce94fceb33858dafe9f.bindPopup(popup_1365700793795aa4b4457d79da07d484)\n        ;\n\n        \n    \n    \n            var marker_cd1f84a5fe71cd2a0babd070e25f0bea = L.marker(\n                [34.11, -118.366],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_75422235f0dfdf8143fb30051ce868b4 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;road&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_cd1f84a5fe71cd2a0babd070e25f0bea.setIcon(icon_75422235f0dfdf8143fb30051ce868b4);\n        \n    \n        var popup_34e05f4e0cb94e98b1b7b72d9faeee21 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d1abea4ed39cd1db406fab9110ecac6d = $(`&lt;div id=&quot;html_d1abea4ed39cd1db406fab9110ecac6d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Road: Laurel Canyon Blvd&lt;/b&gt;&lt;br&gt;Status: Partial Closure&lt;/div&gt;`)[0];\n                popup_34e05f4e0cb94e98b1b7b72d9faeee21.setContent(html_d1abea4ed39cd1db406fab9110ecac6d);\n            \n        \n\n        marker_cd1f84a5fe71cd2a0babd070e25f0bea.bindPopup(popup_34e05f4e0cb94e98b1b7b72d9faeee21)\n        ;\n\n        \n    \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# [Current & Latest NEWS](https://www.google.com/search?q=LA+wildfire&client=firefox-b-1-d&sca_esv=2a01fdbcda2f6ea4&ei=uKB_Z9DDMffL0PEP4JCfyAI&ved=0ahUKEwjQ_6-Rs-iKAxX3JTQIHWDIBykQ4dUDCBA&uact=5&oq=LA+wildfire&gs_lp=Egxnd3Mtd2l6LXNlcnAiC0xBIHdpbGRmaXJlMhAQABiABBixAxhDGIMBGIoFMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDSOQFUO8CWO8CcAF4AJABAJgBbKABuwGqAQMxLjG4AQPIAQD4AQGYAgKgAnnCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDMS4xoAfKCQ&sclient=gws-wiz-serp)\n\n\n## Interactive Map","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport folium\nimport datetime\n\n# Constants\nCALFIRE_URL = \"https://www.fire.ca.gov/Incidents\"\nLA_ROAD_CLOSURES_URL = \"https://pw.lacounty.gov/roadclosures/\"\nMAP_CENTER = (34.0522, -118.2437)  # Los Angeles coordinates\nMAP_ZOOM_START = 10\n\n# Helper function to scrape wildfire data\ndef fetch_wildfire_data():\n    try:\n        response = requests.get(CALFIRE_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        wildfire_data = []\n\n        # Replace with actual tags and classes for CalFire data\n        incidents = soup.find_all(class_=\"incident-row\")\n        for incident in incidents:\n            name = incident.find(class_=\"incident-name\").get_text(strip=True)\n            size = incident.find(class_=\"incident-acres\").get_text(strip=True)\n            status = incident.find(class_=\"incident-status\").get_text(strip=True)\n            latitude = incident.get(\"data-lat\")\n            longitude = incident.get(\"data-lng\")\n            if latitude and longitude:\n                wildfire_data.append({\n                    \"name\": name,\n                    \"size\": size,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return wildfire_data\n    except Exception as e:\n        print(f\"Error fetching wildfire data: {e}\")\n        return []\n\n# Helper function to scrape road closures data\ndef fetch_road_closures_data():\n    try:\n        response = requests.get(LA_ROAD_CLOSURES_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        road_closures = []\n\n        # Replace with actual tags and classes for road closure data\n        closures = soup.find_all(class_=\"closure-row\")\n        for closure in closures:\n            road_name = closure.find(class_=\"road-name\").get_text(strip=True)\n            status = closure.find(class_=\"closure-status\").get_text(strip=True)\n            latitude = closure.get(\"data-lat\")\n            longitude = closure.get(\"data-lng\")\n            if latitude and longitude:\n                road_closures.append({\n                    \"road\": road_name,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return road_closures\n    except Exception as e:\n        print(f\"Error fetching road closures data: {e}\")\n        return []\n\n# Helper function to fetch news\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nNEWS_API_URL = \"https://newsapi.org/v2/top-headlines?country=us\"\n\ndef fetch_latest_news():\n    try:\n        response = requests.get(f\"{NEWS_API_URL}&apiKey={NEWS_API_KEY}\")\n        response.raise_for_status()\n        articles = response.json().get(\"articles\", [])\n        return [\n            {\"title\": article[\"title\"], \"description\": article[\"description\"]}\n            for article in articles\n        ]\n    except Exception as e:\n        print(f\"Error fetching news: {e}\")\n        return []\n\n# Generate the map\ndef generate_interactive_map():\n    wildfire_data = fetch_wildfire_data()\n    road_closures = fetch_road_closures_data()\n    latest_news = fetch_latest_news()\n\n    interactive_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for wildfire in wildfire_data:\n        folium.Marker(\n            location=wildfire[\"location\"],\n            popup=(\n                f\"<b>{wildfire['name']}</b><br>Size: {wildfire['size']}<br>Status: {wildfire['status']}\"\n            ),\n            icon=folium.Icon(color=\"red\", icon=\"fire\")\n        ).add_to(interactive_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        folium.Marker(\n            location=closure[\"location\"],\n            popup=(\n                f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n            ),\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(interactive_map)\n\n    # Add news headlines as map footer\n    news_text = \"<br>\".join(\n        [f\"<b>{news['title']}</b>: {news['description']}\" for news in latest_news]\n    )\n    folium.Marker(\n        location=MAP_CENTER,\n        popup=folium.Popup(f\"<div>{news_text}</div>\", max_width=500),\n        icon=folium.Icon(color=\"green\", icon=\"info-sign\")\n    ).add_to(interactive_map)\n\n    # Save map to file\n    map_file = \"daily_north_la_map.html\"\n    interactive_map.save(map_file)\n    print(f\"Interactive map saved to {map_file}. Open this file in your browser to view.\")\n\n# Generate and save the map\ngenerate_interactive_map()\n\n# Add a timestamp to track when the script was last run\nprint(f\"Script completed on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notification Alert Protocol","metadata":{}},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\nfrom bs4 import BeautifulSoup\nimport folium\nimport webbrowser\n\n# Configurations\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nUSER_LOCATION = (34.1177, -118.3520)  # Hollywood Hills, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\n# Function to send SMS alerts to subscribers\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper function to fetch the latest news\ndef get_latest_news():\n    url = f\"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json().get(\"articles\", [])\n    else:\n        print(f\"Error fetching news: {response.status_code}\")\n        return []\n\n# Parse news articles for emergency events\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        # Currently, location parsing is a placeholder\n        location = None\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": location,\n        })\n    return emergencies\n\n# Scrape traffic data from SigAlert website\ndef get_real_time_traffic(location):\n    url = \"https://www.sigalert.com/?lat=33.984259&lon=-118.223015&z=2\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, 'html.parser')\n            traffic_alerts = {}\n\n            # Example: Extract alerts data (update selector as per page structure)\n            alerts = soup.find_all(class_=\"traffic-alert-class\")  # Replace \"traffic-alert-class\" with actual class\n            for alert in alerts:\n                alert_text = alert.get_text(strip=True)\n                # Placeholder for alert volume and severity\n                traffic_alerts[alert_text] = {\"volume\": 120, \"severity\": \"high\"}\n\n            return {\"traffic\": traffic_alerts}\n        else:\n            print(f\"Error fetching traffic data: {response.status_code}\")\n            return {}\n    except Exception as e:\n        print(f\"Error scraping traffic data: {e}\")\n        return {}\n\n# Calculate safe routes based on emergencies and traffic data\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location and isinstance(location, tuple) and len(location) == 2:\n            try:\n                distance = geopy.distance.geodesic(USER_LOCATION, location).km\n                traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n                routes.append({\n                    \"emergency\": emergency,\n                    \"distance\": distance,\n                    \"traffic\": traffic_info,\n                })\n            except ValueError as e:\n                print(f\"Error calculating distance for location {location}: {e}\")\n        else:\n            print(f\"Invalid or missing location data: {location}\")\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Train a model to predict accident risk\ndef train_accident_risk_model():\n    X = np.random.rand(100, 3)  # Simulated data\n    y = np.random.randint(0, 2, 100)  # Binary labels\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Visualize data on an interactive map\ndef display_map(emergencies):\n    m = folium.Map(location=USER_LOCATION, zoom_start=12)\n    for emergency in emergencies:\n        if emergency[\"location\"]:\n            folium.Marker(\n                location=emergency[\"location\"],\n                popup=f\"{emergency['title']}: {emergency['description']}\",\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\")\n            ).add_to(m)\n    return m\n\n# Generate the initial map and open it\nnews_articles = get_latest_news()\nemergencies = parse_news_for_emergencies(news_articles)\nemergency_map = display_map(emergencies)\nmap_file = \"emergency_map.html\"\nemergency_map.save(map_file)\nwebbrowser.open(map_file)  # Open the map in the default web browser\n\n# Subscribers list for SMS alerts\nsubscribers = []\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\n# Main Execution Loop\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notes | Supplemenrtaery","metadata":{}},{"cell_type":"code","source":"from geopy.distance import geodesic\n\nnewport_ri = (41.49008, -71.312796)\n\ncleveland_oh = (41.499498, -81.695391)\n\nprint(geodesic(newport_ri, cleveland_oh).miles)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}