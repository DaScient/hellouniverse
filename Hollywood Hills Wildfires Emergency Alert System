{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216792862\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# [Current & Latest NEWS](https://www.google.com/search?q=LA+wildfire&client=firefox-b-1-d&sca_esv=2a01fdbcda2f6ea4&ei=uKB_Z9DDMffL0PEP4JCfyAI&ved=0ahUKEwjQ_6-Rs-iKAxX3JTQIHWDIBykQ4dUDCBA&uact=5&oq=LA+wildfire&gs_lp=Egxnd3Mtd2l6LXNlcnAiC0xBIHdpbGRmaXJlMhAQABiABBixAxhDGIMBGIoFMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDSOQFUO8CWO8CcAF4AJABAJgBbKABuwGqAQMxLjG4AQPIAQD4AQGYAgKgAnnCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDMS4xoAfKCQ&sclient=gws-wiz-serp)","metadata":{}},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\nfrom bs4 import BeautifulSoup\nimport folium\nimport webbrowser\n\n# Configurations\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nUSER_LOCATION = (34.1177, -118.3520)  # Hollywood Hills, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\n# Function to send SMS alerts to subscribers\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper function to fetch the latest news\ndef get_latest_news():\n    url = f\"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json().get(\"articles\", [])\n    else:\n        print(f\"Error fetching news: {response.status_code}\")\n        return []\n\n# Parse news articles for emergency events\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        # Currently, location parsing is a placeholder\n        location = None\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": location,\n        })\n    return emergencies\n\n# Scrape traffic data from SigAlert website\ndef get_real_time_traffic(location):\n    url = \"https://www.sigalert.com/?lat=33.984259&lon=-118.223015&z=2\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, 'html.parser')\n            traffic_alerts = {}\n\n            # Example: Extract alerts data (update selector as per page structure)\n            alerts = soup.find_all(class_=\"traffic-alert-class\")  # Replace \"traffic-alert-class\" with actual class\n            for alert in alerts:\n                alert_text = alert.get_text(strip=True)\n                # Placeholder for alert volume and severity\n                traffic_alerts[alert_text] = {\"volume\": 120, \"severity\": \"high\"}\n\n            return {\"traffic\": traffic_alerts}\n        else:\n            print(f\"Error fetching traffic data: {response.status_code}\")\n            return {}\n    except Exception as e:\n        print(f\"Error scraping traffic data: {e}\")\n        return {}\n\n# Calculate safe routes based on emergencies and traffic data\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location and isinstance(location, tuple) and len(location) == 2:\n            try:\n                distance = geopy.distance.geodesic(USER_LOCATION, location).km\n                traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n                routes.append({\n                    \"emergency\": emergency,\n                    \"distance\": distance,\n                    \"traffic\": traffic_info,\n                })\n            except ValueError as e:\n                print(f\"Error calculating distance for location {location}: {e}\")\n        else:\n            print(f\"Invalid or missing location data: {location}\")\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Train a model to predict accident risk\ndef train_accident_risk_model():\n    X = np.random.rand(100, 3)  # Simulated data\n    y = np.random.randint(0, 2, 100)  # Binary labels\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Visualize data on an interactive map\ndef display_map(emergencies):\n    m = folium.Map(location=USER_LOCATION, zoom_start=12)\n    for emergency in emergencies:\n        if emergency[\"location\"]:\n            folium.Marker(\n                location=emergency[\"location\"],\n                popup=f\"{emergency['title']}: {emergency['description']}\",\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\")\n            ).add_to(m)\n    return m\n\n# Generate the initial map and open it\nnews_articles = get_latest_news()\nemergencies = parse_news_for_emergencies(news_articles)\nemergency_map = display_map(emergencies)\nmap_file = \"emergency_map.html\"\nemergency_map.save(map_file)\nwebbrowser.open(map_file)  # Open the map in the default web browser\n\n# Subscribers list for SMS alerts\nsubscribers = []\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\n# Main Execution Loop\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n# fuck the bourgeoisie","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from geopy.distance import geodesic\n\nnewport_ri = (41.49008, -71.312796)\n\ncleveland_oh = (41.499498, -81.695391)\n\nprint(geodesic(newport_ri, cleveland_oh).miles)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}