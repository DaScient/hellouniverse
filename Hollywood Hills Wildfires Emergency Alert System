{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216783554\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\n\n# Configurations\nUSER_LOCATION = (34.134117, -118.321495) # Hollywood Sign. Los Angeles, CA.\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper Functions\ndef get_latest_news():\n    # Simulated news articles\n    news_articles = [\n        {\"title\": \"Major Accident on Highway 101\", \"description\": \"A multi-vehicle collision has occurred on Highway 101 near Exit 23.\", \"location\": (37.7749, -122.4194)},\n        {\"title\": \"Flood Warning Issued\", \"description\": \"Severe flooding expected in low-lying areas of San Francisco.\", \"location\": (37.7749, -122.4194)},\n    ]\n    return news_articles\n\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": article.get(\"location\", None),\n        })\n    return emergencies\n\ndef get_real_time_traffic(location):\n    # Simulated traffic data\n    traffic_data = {\n        \"traffic\": {\n            (37.7749, -122.4194): {\"volume\": 120, \"severity\": \"high\"},\n        }\n    }\n    return traffic_data\n\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location:\n            distance = geopy.distance.geodesic(USER_LOCATION, location).km\n            traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n            routes.append({\n                \"emergency\": emergency,\n                \"distance\": distance,\n                \"traffic\": traffic_info,\n            })\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Machine Learning Prediction Model\ndef train_accident_risk_model():\n    # Placeholder: Normally, you'd load historical traffic and accident data\n    X = np.random.rand(100, 3)  # Simulate features like traffic volume, weather, etc.\n    y = np.random.randint(0, 2, 100)  # Simulate binary labels (accident/no accident)\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity):\n    X_new = np.array([[traffic_volume, weather_severity]])\n    return risk_model.predict(X_new)\n\n# Main Execution Loop\nsubscribers = []  # List of (phone_number, carrier)\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5  # Placeholder for weather severity index\n        risk_score = predict_risk(traffic_volume, weather_severity)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {route['risk_score']:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-09T09:58:18.692405Z","iopub.execute_input":"2025-01-09T09:58:18.692803Z","iopub.status.idle":"2025-01-09T09:58:21.191376Z","shell.execute_reply.started":"2025-01-09T09:58:18.692764Z","shell.execute_reply":"2025-01-09T09:58:21.189676Z"}},"outputs":[{"name":"stdout","text":"Checking for updates at 2025-01-09 09:58:21.024102...\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-ec7e34a84290>\u001b[0m in \u001b[0;36m<cell line: 101>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0mtraffic_volume\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroute\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"traffic\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"volume\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mroute\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"traffic\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0mweather_severity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.5\u001b[0m  \u001b[0;31m# Placeholder for weather severity index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 119\u001b[0;31m         \u001b[0mrisk_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_risk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraffic_volume\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweather_severity\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    120\u001b[0m         \u001b[0mroute\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"risk_score\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrisk_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m         \u001b[0malerts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {route['risk_score']:.2f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-ec7e34a84290>\u001b[0m in \u001b[0;36mpredict_risk\u001b[0;34m(traffic_volume, weather_severity)\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mpredict_risk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraffic_volume\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweather_severity\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m     \u001b[0mX_new\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtraffic_volume\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweather_severity\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 87\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrisk_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_new\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;31m# Main Execution Loop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    979\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m         \u001b[0;31m# Check data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0;31m# Assign chunk of trees to jobs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    600\u001b[0m         Validate X whenever one tries to predict, apply, predict_proba.\"\"\"\n\u001b[1;32m    601\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 602\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    603\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindptr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No support for np.int64 index based sparse matrices\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    586\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcheck_params\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ensure_2d\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 588\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_n_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_features\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_features_in_\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    390\u001b[0m                 \u001b[0;34mf\"X has {n_features} features, but {self.__class__.__name__} \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m                 \u001b[0;34mf\"is expecting {self.n_features_in_} features as input.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: X has 2 features, but RandomForestRegressor is expecting 3 features as input."],"ename":"ValueError","evalue":"X has 2 features, but RandomForestRegressor is expecting 3 features as input.","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}