{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216797667\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## [Sentinelâ„¢](https://www.kaggle.com/code/dascient/sentinel) \n### Current Wildfire Trends","metadata":{}},{"cell_type":"code","source":"import requests\nimport folium\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import Point\nimport pandas as pd\n\n# Constants\nMAP_CENTER = (34.1177, -118.3520)  # Hollywood Hills\nMAP_ZOOM_START = 12\n\n# Function to fetch simulated wildfire data (uses open sources, no API key required)\ndef fetch_wildfire_data():\n    # Simulated wildfire data for demonstration\n    wildfire_data = [\n        {\"name\": \"Hollywood Fire\", \"latitude\": 34.118, \"longitude\": -118.352, \"size\": \"150 acres\", \"status\": \"Active\"},\n        {\"name\": \"Griffith Park Fire\", \"latitude\": 34.136, \"longitude\": -118.294, \"size\": \"75 acres\", \"status\": \"Contained\"},\n        {\"name\": \"Mulholland Fire\", \"latitude\": 34.145, \"longitude\": -118.368, \"size\": \"200 acres\", \"status\": \"Active\"},\n    ]\n    return wildfire_data\n\n# Function to create a GeoDataFrame for plotting\ndef create_geodataframe(data):\n    geometries = [Point(item[\"longitude\"], item[\"latitude\"]) for item in data]\n    df = pd.DataFrame(data)\n    gdf = gpd.GeoDataFrame(df, geometry=geometries)\n    gdf.crs = \"EPSG:4326\"  # WGS 84 coordinate system\n    return gdf\n\n# Function to generate a map with wildfire data\ndef generate_wildfire_map(wildfire_data):\n    wildfire_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    for fire in wildfire_data:\n        popup_info = f\"<b>{fire['name']}</b><br>Size: {fire['size']}<br>Status: {fire['status']}\"\n        folium.Marker(\n            location=(fire[\"latitude\"], fire[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"red\" if fire[\"status\"] == \"Active\" else \"green\", icon=\"fire\")\n        ).add_to(wildfire_map)\n\n    return wildfire_map\n\n# Function to plot wildfire data on a static map\ndef plot_wildfires_static(gdf):\n    plt.figure(figsize=(30,20))\n    base = gdf.plot(color=\"red\", alpha=0.5, markersize=100, label=\"Wildfire Locations\")\n    plt.title(\"Wildfire Locations in Hollywood Hills\", fontsize=14)\n    plt.xlabel(\"Longitude\", fontsize=12)\n    plt.ylabel(\"Latitude\", fontsize=12)\n    plt.grid(True)\n    plt.legend()\n    plt.show()\n\n# Fetch and process wildfire data\nwildfire_data = fetch_wildfire_data()\nwildfire_gdf = create_geodataframe(wildfire_data)\n\n# Generate the interactive map\nwildfire_map = generate_wildfire_map(wildfire_data)\nmap_file = \"hollywood_hills_wildfires.html\"\nwildfire_map.save(map_file)\nprint(f\"Interactive map saved to {map_file}. Open it in your browser.\")\n\nimport webbrowser\nwebbrowser.open(map_file)\n\n# Plot static visualization\nplot_wildfires_static(wildfire_gdf)\n\n# Analyze trends (e.g., active vs contained fires)\ntrend_summary = wildfire_gdf.groupby(\"status\").size()\nprint(\"\\nCurrent Wildfire Trends:\\n\")\nprint(trend_summary)\n\n# Add Greek symbols as placeholders for deeper analysis\ndelta = trend_summary.get(\"Active\", 0) - trend_summary.get(\"Contained\", 0)\nphi = trend_summary.get(\"Active\", 0) / max(trend_summary.sum(), 1)\nprint(f\"\\u0394 (Delta - Difference between Active and Contained Fires): {delta}\")\nprint(f\"\\u03C6 (Phi - Proportion of Active Fires): {phi:.2%}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T11:52:17.619441Z","iopub.execute_input":"2025-01-09T11:52:17.619912Z","iopub.status.idle":"2025-01-09T11:52:18.058043Z","shell.execute_reply.started":"2025-01-09T11:52:17.619876Z","shell.execute_reply":"2025-01-09T11:52:18.056603Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"Interactive map saved to hollywood_hills_wildfires.html. Open it in your browser.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 3000x2000 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nCurrent Wildfire Trends:\n\nstatus\nActive       2\nContained    1\ndtype: int64\nÎ” (Delta - Difference between Active and Contained Fires): 1\nÏ† (Phi - Proportion of Active Fires): 66.67%\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# [Current & Latest NEWS](https://www.google.com/search?q=LA+wildfire&client=firefox-b-1-d&sca_esv=2a01fdbcda2f6ea4&ei=uKB_Z9DDMffL0PEP4JCfyAI&ved=0ahUKEwjQ_6-Rs-iKAxX3JTQIHWDIBykQ4dUDCBA&uact=5&oq=LA+wildfire&gs_lp=Egxnd3Mtd2l6LXNlcnAiC0xBIHdpbGRmaXJlMhAQABiABBixAxhDGIMBGIoFMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDSOQFUO8CWO8CcAF4AJABAJgBbKABuwGqAQMxLjG4AQPIAQD4AQGYAgKgAnnCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDMS4xoAfKCQ&sclient=gws-wiz-serp)\n\n\n## Interactive Map","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport folium\nimport datetime\n\n# Constants\nCALFIRE_URL = \"https://www.fire.ca.gov/Incidents\"\nLA_ROAD_CLOSURES_URL = \"https://pw.lacounty.gov/roadclosures/\"\nMAP_CENTER = (34.0522, -118.2437)  # Los Angeles coordinates\nMAP_ZOOM_START = 10\n\n# Helper function to scrape wildfire data\ndef fetch_wildfire_data():\n    try:\n        response = requests.get(CALFIRE_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        wildfire_data = []\n\n        # Replace with actual tags and classes for CalFire data\n        incidents = soup.find_all(class_=\"incident-row\")\n        for incident in incidents:\n            name = incident.find(class_=\"incident-name\").get_text(strip=True)\n            size = incident.find(class_=\"incident-acres\").get_text(strip=True)\n            status = incident.find(class_=\"incident-status\").get_text(strip=True)\n            latitude = incident.get(\"data-lat\")\n            longitude = incident.get(\"data-lng\")\n            if latitude and longitude:\n                wildfire_data.append({\n                    \"name\": name,\n                    \"size\": size,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return wildfire_data\n    except Exception as e:\n        print(f\"Error fetching wildfire data: {e}\")\n        return []\n\n# Helper function to scrape road closures data\ndef fetch_road_closures_data():\n    try:\n        response = requests.get(LA_ROAD_CLOSURES_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        road_closures = []\n\n        # Replace with actual tags and classes for road closure data\n        closures = soup.find_all(class_=\"closure-row\")\n        for closure in closures:\n            road_name = closure.find(class_=\"road-name\").get_text(strip=True)\n            status = closure.find(class_=\"closure-status\").get_text(strip=True)\n            latitude = closure.get(\"data-lat\")\n            longitude = closure.get(\"data-lng\")\n            if latitude and longitude:\n                road_closures.append({\n                    \"road\": road_name,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return road_closures\n    except Exception as e:\n        print(f\"Error fetching road closures data: {e}\")\n        return []\n\n# Helper function to fetch news\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nNEWS_API_URL = \"https://newsapi.org/v2/top-headlines?country=us\"\n\ndef fetch_latest_news():\n    try:\n        response = requests.get(f\"{NEWS_API_URL}&apiKey={NEWS_API_KEY}\")\n        response.raise_for_status()\n        articles = response.json().get(\"articles\", [])\n        return [\n            {\"title\": article[\"title\"], \"description\": article[\"description\"]}\n            for article in articles\n        ]\n    except Exception as e:\n        print(f\"Error fetching news: {e}\")\n        return []\n\n# Generate the map\ndef generate_interactive_map():\n    wildfire_data = fetch_wildfire_data()\n    road_closures = fetch_road_closures_data()\n    latest_news = fetch_latest_news()\n\n    interactive_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for wildfire in wildfire_data:\n        folium.Marker(\n            location=wildfire[\"location\"],\n            popup=(\n                f\"<b>{wildfire['name']}</b><br>Size: {wildfire['size']}<br>Status: {wildfire['status']}\"\n            ),\n            icon=folium.Icon(color=\"red\", icon=\"fire\")\n        ).add_to(interactive_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        folium.Marker(\n            location=closure[\"location\"],\n            popup=(\n                f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n            ),\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(interactive_map)\n\n    # Add news headlines as map footer\n    news_text = \"<br>\".join(\n        [f\"<b>{news['title']}</b>: {news['description']}\" for news in latest_news]\n    )\n    folium.Marker(\n        location=MAP_CENTER,\n        popup=folium.Popup(f\"<div>{news_text}</div>\", max_width=500),\n        icon=folium.Icon(color=\"green\", icon=\"info-sign\")\n    ).add_to(interactive_map)\n\n    # Save map to file\n    map_file = \"daily_north_la_map.html\"\n    interactive_map.save(map_file)\n    print(f\"Interactive map saved to {map_file}. Open this file in your browser to view.\")\n\n# Generate and save the map\ngenerate_interactive_map()\n\n# Add a timestamp to track when the script was last run\nprint(f\"Script completed on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notification Alert Protocol","metadata":{}},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\nfrom bs4 import BeautifulSoup\nimport folium\nimport webbrowser\n\n# Configurations\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nUSER_LOCATION = (34.1177, -118.3520)  # Hollywood Hills, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\n# Function to send SMS alerts to subscribers\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper function to fetch the latest news\ndef get_latest_news():\n    url = f\"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json().get(\"articles\", [])\n    else:\n        print(f\"Error fetching news: {response.status_code}\")\n        return []\n\n# Parse news articles for emergency events\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        # Currently, location parsing is a placeholder\n        location = None\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": location,\n        })\n    return emergencies\n\n# Scrape traffic data from SigAlert website\ndef get_real_time_traffic(location):\n    url = \"https://www.sigalert.com/?lat=33.984259&lon=-118.223015&z=2\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, 'html.parser')\n            traffic_alerts = {}\n\n            # Example: Extract alerts data (update selector as per page structure)\n            alerts = soup.find_all(class_=\"traffic-alert-class\")  # Replace \"traffic-alert-class\" with actual class\n            for alert in alerts:\n                alert_text = alert.get_text(strip=True)\n                # Placeholder for alert volume and severity\n                traffic_alerts[alert_text] = {\"volume\": 120, \"severity\": \"high\"}\n\n            return {\"traffic\": traffic_alerts}\n        else:\n            print(f\"Error fetching traffic data: {response.status_code}\")\n            return {}\n    except Exception as e:\n        print(f\"Error scraping traffic data: {e}\")\n        return {}\n\n# Calculate safe routes based on emergencies and traffic data\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location and isinstance(location, tuple) and len(location) == 2:\n            try:\n                distance = geopy.distance.geodesic(USER_LOCATION, location).km\n                traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n                routes.append({\n                    \"emergency\": emergency,\n                    \"distance\": distance,\n                    \"traffic\": traffic_info,\n                })\n            except ValueError as e:\n                print(f\"Error calculating distance for location {location}: {e}\")\n        else:\n            print(f\"Invalid or missing location data: {location}\")\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Train a model to predict accident risk\ndef train_accident_risk_model():\n    X = np.random.rand(100, 3)  # Simulated data\n    y = np.random.randint(0, 2, 100)  # Binary labels\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Visualize data on an interactive map\ndef display_map(emergencies):\n    m = folium.Map(location=USER_LOCATION, zoom_start=12)\n    for emergency in emergencies:\n        if emergency[\"location\"]:\n            folium.Marker(\n                location=emergency[\"location\"],\n                popup=f\"{emergency['title']}: {emergency['description']}\",\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\")\n            ).add_to(m)\n    return m\n\n# Generate the initial map and open it\nnews_articles = get_latest_news()\nemergencies = parse_news_for_emergencies(news_articles)\nemergency_map = display_map(emergencies)\nmap_file = \"emergency_map.html\"\nemergency_map.save(map_file)\nwebbrowser.open(map_file)  # Open the map in the default web browser\n\n# Subscribers list for SMS alerts\nsubscribers = []\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\n# Main Execution Loop\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notes | Supplemenrtaery","metadata":{}},{"cell_type":"code","source":"from geopy.distance import geodesic\n\nnewport_ri = (41.49008, -71.312796)\n\ncleveland_oh = (41.499498, -81.695391)\n\nprint(geodesic(newport_ri, cleveland_oh).miles)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}