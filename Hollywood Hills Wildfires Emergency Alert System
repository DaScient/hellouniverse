{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=218052067\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# [Los Angeles Wildfire Resilience Coalition (LA-WRC)](https://losangeleswildfireresilienceco.godaddysites.com/)\n### [D. Tadayaâ„¢](https://dontadaya.godaddysites.com) \n### Current Wildfire Trends","metadata":{}},{"cell_type":"code","source":"import folium\nfrom IPython.display import display\n\n# Constants\nMAP_CENTER = (34.1177, -118.3520)  # Hollywood Hills\nMAP_ZOOM_START = 12\n\n# Simulated Wildfire Data\nwildfire_data = [\n    {\"name\": \"Hollywood Fire\", \"latitude\": 34.118, \"longitude\": -118.352, \"size\": \"150 acres\", \"status\": \"Active\"},\n    {\"name\": \"Griffith Park Fire\", \"latitude\": 34.136, \"longitude\": -118.294, \"size\": \"75 acres\", \"status\": \"Contained\"},\n    {\"name\": \"Mulholland Fire\", \"latitude\": 34.145, \"longitude\": -118.368, \"size\": \"200 acres\", \"status\": \"Active\"},\n]\n\n# Simulated Road Closure Data\nroad_closures = [\n    {\"road\": \"Mulholland Drive\", \"latitude\": 34.126, \"longitude\": -118.352, \"status\": \"Closed\"},\n    {\"road\": \"Laurel Canyon Blvd\", \"latitude\": 34.11, \"longitude\": -118.366, \"status\": \"Partial Closure\"},\n]\n\n# Function to generate a map with wildfire and road closures data\ndef generate_combined_map(wildfire_data, road_closures):\n    combined_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for fire in wildfire_data:\n        popup_info = f\"<b>{fire['name']}</b><br>Size: {fire['size']}<br>Status: {fire['status']}\"\n        folium.Marker(\n            location=(fire[\"latitude\"], fire[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"red\" if fire[\"status\"] == \"Active\" else \"green\", icon=\"fire\")\n        ).add_to(combined_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        popup_info = f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n        folium.Marker(\n            location=(closure[\"latitude\"], closure[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(combined_map)\n\n    return combined_map\n\n# Generate the interactive map\ncombined_map = generate_combined_map(wildfire_data, road_closures)\n\n# Display the map in the Notebook\ncombined_map","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:06:17.472308Z","iopub.execute_input":"2025-01-09T12:06:17.47278Z","iopub.status.idle":"2025-01-09T12:06:17.515888Z","shell.execute_reply.started":"2025-01-09T12:06:17.472742Z","shell.execute_reply":"2025-01-09T12:06:17.514561Z"},"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# [Current & Latest NEWS](https://www.google.com/search?q=LA+wildfire&client=firefox-b-1-d&sca_esv=2a01fdbcda2f6ea4&ei=uKB_Z9DDMffL0PEP4JCfyAI&ved=0ahUKEwjQ_6-Rs-iKAxX3JTQIHWDIBykQ4dUDCBA&uact=5&oq=LA+wildfire&gs_lp=Egxnd3Mtd2l6LXNlcnAiC0xBIHdpbGRmaXJlMhAQABiABBixAxhDGIMBGIoFMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDSOQFUO8CWO8CcAF4AJABAJgBbKABuwGqAQMxLjG4AQPIAQD4AQGYAgKgAnnCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDMS4xoAfKCQ&sclient=gws-wiz-serp)\n\n\n## Interactive Map","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport folium\nimport datetime\n\n# Constants\nCALFIRE_URL = \"https://www.fire.ca.gov/Incidents\"\nLA_ROAD_CLOSURES_URL = \"https://pw.lacounty.gov/roadclosures/\"\nMAP_CENTER = (34.0522, -118.2437)  # Los Angeles coordinates\nMAP_ZOOM_START = 10\n\n# Helper function to scrape wildfire data\ndef fetch_wildfire_data():\n    try:\n        response = requests.get(CALFIRE_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        wildfire_data = []\n\n        # Replace with actual tags and classes for CalFire data\n        incidents = soup.find_all(class_=\"incident-row\")\n        for incident in incidents:\n            name = incident.find(class_=\"incident-name\").get_text(strip=True)\n            size = incident.find(class_=\"incident-acres\").get_text(strip=True)\n            status = incident.find(class_=\"incident-status\").get_text(strip=True)\n            latitude = incident.get(\"data-lat\")\n            longitude = incident.get(\"data-lng\")\n            if latitude and longitude:\n                wildfire_data.append({\n                    \"name\": name,\n                    \"size\": size,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return wildfire_data\n    except Exception as e:\n        print(f\"Error fetching wildfire data: {e}\")\n        return []\n\n# Helper function to scrape road closures data\ndef fetch_road_closures_data():\n    try:\n        response = requests.get(LA_ROAD_CLOSURES_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        road_closures = []\n\n        # Replace with actual tags and classes for road closure data\n        closures = soup.find_all(class_=\"closure-row\")\n        for closure in closures:\n            road_name = closure.find(class_=\"road-name\").get_text(strip=True)\n            status = closure.find(class_=\"closure-status\").get_text(strip=True)\n            latitude = closure.get(\"data-lat\")\n            longitude = closure.get(\"data-lng\")\n            if latitude and longitude:\n                road_closures.append({\n                    \"road\": road_name,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return road_closures\n    except Exception as e:\n        print(f\"Error fetching road closures data: {e}\")\n        return []\n\n# Helper function to fetch news\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nNEWS_API_URL = \"https://newsapi.org/v2/top-headlines?country=us\"\n\ndef fetch_latest_news():\n    try:\n        response = requests.get(f\"{NEWS_API_URL}&apiKey={NEWS_API_KEY}\")\n        response.raise_for_status()\n        articles = response.json().get(\"articles\", [])\n        return [\n            {\"title\": article[\"title\"], \"description\": article[\"description\"]}\n            for article in articles\n        ]\n    except Exception as e:\n        print(f\"Error fetching news: {e}\")\n        return []\n\n# Generate the map\ndef generate_interactive_map():\n    wildfire_data = fetch_wildfire_data()\n    road_closures = fetch_road_closures_data()\n    latest_news = fetch_latest_news()\n\n    interactive_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for wildfire in wildfire_data:\n        folium.Marker(\n            location=wildfire[\"location\"],\n            popup=(\n                f\"<b>{wildfire['name']}</b><br>Size: {wildfire['size']}<br>Status: {wildfire['status']}\"\n            ),\n            icon=folium.Icon(color=\"red\", icon=\"fire\")\n        ).add_to(interactive_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        folium.Marker(\n            location=closure[\"location\"],\n            popup=(\n                f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n            ),\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(interactive_map)\n\n    # Add news headlines as map footer\n    news_text = \"<br>\".join(\n        [f\"<b>{news['title']}</b>: {news['description']}\" for news in latest_news]\n    )\n    folium.Marker(\n        location=MAP_CENTER,\n        popup=folium.Popup(f\"<div>{news_text}</div>\", max_width=500),\n        icon=folium.Icon(color=\"green\", icon=\"info-sign\")\n    ).add_to(interactive_map)\n\n    # Save map to file\n    map_file = \"daily_north_la_map.html\"\n    interactive_map.save(map_file)\n    print(f\"Interactive map saved to {map_file}. Open this file in your browser to view.\")\n\n# Generate and save the map\ngenerate_interactive_map()\n\n# Add a timestamp to track when the script was last run\nprint(f\"Script completed on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notification Alert Protocol","metadata":{}},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\nfrom bs4 import BeautifulSoup\nimport folium\nimport webbrowser\n\n# Configurations\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nUSER_LOCATION = (34.1177, -118.3520)  # Hollywood Hills, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\n# Function to send SMS alerts to subscribers\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper function to fetch the latest news\ndef get_latest_news():\n    url = f\"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json().get(\"articles\", [])\n    else:\n        print(f\"Error fetching news: {response.status_code}\")\n        return []\n\n# Parse news articles for emergency events\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        # Currently, location parsing is a placeholder\n        location = None\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": location,\n        })\n    return emergencies\n\n# Scrape traffic data from SigAlert website\ndef get_real_time_traffic(location):\n    url = \"https://www.sigalert.com/?lat=33.984259&lon=-118.223015&z=2\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, 'html.parser')\n            traffic_alerts = {}\n\n            # Example: Extract alerts data (update selector as per page structure)\n            alerts = soup.find_all(class_=\"traffic-alert-class\")  # Replace \"traffic-alert-class\" with actual class\n            for alert in alerts:\n                alert_text = alert.get_text(strip=True)\n                # Placeholder for alert volume and severity\n                traffic_alerts[alert_text] = {\"volume\": 120, \"severity\": \"high\"}\n\n            return {\"traffic\": traffic_alerts}\n        else:\n            print(f\"Error fetching traffic data: {response.status_code}\")\n            return {}\n    except Exception as e:\n        print(f\"Error scraping traffic data: {e}\")\n        return {}\n\n# Calculate safe routes based on emergencies and traffic data\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location and isinstance(location, tuple) and len(location) == 2:\n            try:\n                distance = geopy.distance.geodesic(USER_LOCATION, location).km\n                traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n                routes.append({\n                    \"emergency\": emergency,\n                    \"distance\": distance,\n                    \"traffic\": traffic_info,\n                })\n            except ValueError as e:\n                print(f\"Error calculating distance for location {location}: {e}\")\n        else:\n            print(f\"Invalid or missing location data: {location}\")\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Train a model to predict accident risk\ndef train_accident_risk_model():\n    X = np.random.rand(100, 3)  # Simulated data\n    y = np.random.randint(0, 2, 100)  # Binary labels\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Visualize data on an interactive map\ndef display_map(emergencies):\n    m = folium.Map(location=USER_LOCATION, zoom_start=12)\n    for emergency in emergencies:\n        if emergency[\"location\"]:\n            folium.Marker(\n                location=emergency[\"location\"],\n                popup=f\"{emergency['title']}: {emergency['description']}\",\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\")\n            ).add_to(m)\n    return m\n\n# Generate the initial map and open it\nnews_articles = get_latest_news()\nemergencies = parse_news_for_emergencies(news_articles)\nemergency_map = display_map(emergencies)\nmap_file = \"emergency_map.html\"\nemergency_map.save(map_file)\nwebbrowser.open(map_file)  # Open the map in the default web browser\n\n# Subscribers list for SMS alerts\nsubscribers = []\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\n# Main Execution Loop\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Google Dork","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:17.758379Z","iopub.execute_input":"2025-01-09T12:10:17.758857Z","iopub.status.idle":"2025-01-09T12:10:18.032416Z","shell.execute_reply.started":"2025-01-09T12:10:17.758778Z","shell.execute_reply":"2025-01-09T12:10:18.031449Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def google_dork_search(query):\n    # Simulated function to represent Google Dork search\n    # In practice, this function would perform a search and return URLs\n    print(f\"Performing search for query: {query}\")\n    return [\n        \"https://example.com/article1\",\n        \"https://example.com/article2\",\n        \"https://example.com/article3\"\n    ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:26.944685Z","iopub.execute_input":"2025-01-09T12:10:26.945497Z","iopub.status.idle":"2025-01-09T12:10:26.95137Z","shell.execute_reply.started":"2025-01-09T12:10:26.94543Z","shell.execute_reply":"2025-01-09T12:10:26.949982Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def extract_info_from_url(url):\n    # Simulated function to extract information from a URL\n    # In practice, this would fetch the URL content and parse it\n    print(f\"Extracting information from {url}\")\n    return {\n        \"title\": \"Sample Article Title\",\n        \"content\": \"This is a summary of the article content related to Los Angeles wildfires.\"\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:37.998138Z","iopub.execute_input":"2025-01-09T12:10:37.998515Z","iopub.status.idle":"2025-01-09T12:10:38.003661Z","shell.execute_reply.started":"2025-01-09T12:10:37.99847Z","shell.execute_reply":"2025-01-09T12:10:38.002367Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize the graph\nG = nx.Graph()\n\n# Define the search query\nsearch_query = \"Los Angeles wildfires\"\n\n# Perform the search\nurls = google_dork_search(search_query)\n\n# Process each URL\nfor url in urls:\n    info = extract_info_from_url(url)\n    title = info[\"title\"]\n    content = info[\"content\"]\n    \n    # Add a node for the article\n    G.add_node(title, content=content)\n    \n    # For simplicity, connect each article to the previous one\n    if len(G.nodes) > 1:\n        previous_title = list(G.nodes)[-2]\n        G.add_edge(previous_title, title)\n\n# Draw the graph\nplt.figure(figsize=(10, 8))\npos = nx.spring_layout(G, seed=42)\nnx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2000, font_size=10, font_weight='bold', edge_color='gray')\nplt.title(\"Network Graph of Los Angeles Wildfire Articles\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:11:01.134877Z","iopub.execute_input":"2025-01-09T12:11:01.135293Z","iopub.status.idle":"2025-01-09T12:11:01.315075Z","shell.execute_reply.started":"2025-01-09T12:11:01.135258Z","shell.execute_reply":"2025-01-09T12:11:01.313724Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# IENS","metadata":{}},{"cell_type":"code","source":"import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef send_email_notification(recipient_email, subject, message):\n    \"\"\"\n    Send an email notification to a recipient.\n\n    :param recipient_email: str - The recipient's email address.\n    :param subject: str - The subject of the email.\n    :param message: str - The body of the email.\n    \"\"\"\n    # Configuration\n    sender_email = \"your_email@example.com\"  # Replace with your email\n    sender_password = \"your_password\"       # Replace with your password\n    smtp_server = \"smtp.gmail.com\"           # Replace with your SMTP server\n    smtp_port = 587                           # SMTP server port\n\n    try:\n        # Create the email\n        msg = MIMEMultipart()\n        msg['From'] = sender_email\n        msg['To'] = recipient_email\n        msg['Subject'] = subject\n        msg.attach(MIMEText(message, 'plain'))\n\n        # Connect to the SMTP server and send the email\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(sender_email, sender_password)\n            server.sendmail(sender_email, recipient_email, msg.as_string())\n\n        print(f\"Email sent to {recipient_email}\")\n\n    except Exception as e:\n        print(f\"Failed to send email to {recipient_email}: {e}\")\n\n\ndef send_sms_notification(recipient_phone, carrier_gateway, message):\n    \"\"\"\n    Send an SMS notification to a recipient via email-to-SMS gateway.\n\n    :param recipient_phone: str - The recipient's phone number.\n    :param carrier_gateway: str - The carrier's SMS gateway domain.\n    :param message: str - The SMS message body.\n    \"\"\"\n    recipient_email = f\"{recipient_phone}@{carrier_gateway}\"\n    send_email_notification(recipient_email, \"\", message)\n\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the IENSâ„  notification system.\n    \"\"\"\n    print(\"Welcome to DASCIENT, LLC's IENSâ„  - Integrated Emergency Notification System\")\n    print(\"\\n--- Example Notification Process ---\\n\")\n\n    # Example recipients\n    recipients = [\n        {\n            \"type\": \"email\",\n            \"address\": \"family_member@example.com\",\n            \"subject\": \"Emergency Alert\",\n            \"message\": \"This is a test notification for the Integrated Emergency Notification System.\"\n        },\n        {\n            \"type\": \"sms\",\n            \"phone\": \"1234567890\",\n            \"carrier_gateway\": \"txt.att.net\",  # Example: AT&T SMS gateway\n            \"message\": \"Emergency Alert: This is a test SMS notification.\"\n        }\n    ]\n\n    # Send notifications\n    for recipient in recipients:\n        if recipient['type'] == 'email':\n            send_email_notification(\n                recipient_email=recipient['address'],\n                subject=recipient['subject'],\n                message=recipient['message']\n            )\n        elif recipient['type'] == 'sms':\n            send_sms_notification(\n                recipient_phone=recipient['phone'],\n                carrier_gateway=recipient['carrier_gateway'],\n                message=recipient['message']\n            )\n\n    print(\"\\nAll notifications have been processed.\")\n\n\nif __name__ == \"__main__\":\n    main()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notes | Supplemenrtaery","metadata":{}},{"cell_type":"code","source":"from geopy.distance import geodesic\n\nnewport_ri = (41.49008, -71.312796)\n\ncleveland_oh = (41.499498, -81.695391)\n\nprint(geodesic(newport_ri, cleveland_oh).miles)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}