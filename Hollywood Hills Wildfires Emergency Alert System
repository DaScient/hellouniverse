{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/hollywood-hills-wildfires-emergency-alert-system?scriptVersionId=216801395\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## [Sentinelâ„¢](https://www.kaggle.com/code/dascient/sentinel) \n### Current Wildfire Trends","metadata":{}},{"cell_type":"code","source":"import folium\nfrom IPython.display import display\n\n# Constants\nMAP_CENTER = (34.1177, -118.3520)  # Hollywood Hills\nMAP_ZOOM_START = 12\n\n# Simulated Wildfire Data\nwildfire_data = [\n    {\"name\": \"Hollywood Fire\", \"latitude\": 34.118, \"longitude\": -118.352, \"size\": \"150 acres\", \"status\": \"Active\"},\n    {\"name\": \"Griffith Park Fire\", \"latitude\": 34.136, \"longitude\": -118.294, \"size\": \"75 acres\", \"status\": \"Contained\"},\n    {\"name\": \"Mulholland Fire\", \"latitude\": 34.145, \"longitude\": -118.368, \"size\": \"200 acres\", \"status\": \"Active\"},\n]\n\n# Simulated Road Closure Data\nroad_closures = [\n    {\"road\": \"Mulholland Drive\", \"latitude\": 34.126, \"longitude\": -118.352, \"status\": \"Closed\"},\n    {\"road\": \"Laurel Canyon Blvd\", \"latitude\": 34.11, \"longitude\": -118.366, \"status\": \"Partial Closure\"},\n]\n\n# Function to generate a map with wildfire and road closures data\ndef generate_combined_map(wildfire_data, road_closures):\n    combined_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for fire in wildfire_data:\n        popup_info = f\"<b>{fire['name']}</b><br>Size: {fire['size']}<br>Status: {fire['status']}\"\n        folium.Marker(\n            location=(fire[\"latitude\"], fire[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"red\" if fire[\"status\"] == \"Active\" else \"green\", icon=\"fire\")\n        ).add_to(combined_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        popup_info = f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n        folium.Marker(\n            location=(closure[\"latitude\"], closure[\"longitude\"]),\n            popup=popup_info,\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(combined_map)\n\n    return combined_map\n\n# Generate the interactive map\ncombined_map = generate_combined_map(wildfire_data, road_closures)\n\n# Display the map in the Notebook\ncombined_map","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:06:17.472308Z","iopub.execute_input":"2025-01-09T12:06:17.47278Z","iopub.status.idle":"2025-01-09T12:06:17.515888Z","shell.execute_reply.started":"2025-01-09T12:06:17.472742Z","shell.execute_reply":"2025-01-09T12:06:17.514561Z"},"_kg_hide-input":true},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"<folium.folium.Map at 0x7bae7ce095a0>","text/html":"<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    \n        &lt;script&gt;\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        &lt;/script&gt;\n    \n    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_6d780f568ec325208b7c02a95e513dd8 {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n        \n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_6d780f568ec325208b7c02a95e513dd8&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_6d780f568ec325208b7c02a95e513dd8 = L.map(\n                &quot;map_6d780f568ec325208b7c02a95e513dd8&quot;,\n                {\n                    center: [34.1177, -118.352],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 12,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_4ec3a447473e9c7e59c57024813973eb = L.tileLayer(\n                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n                {&quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n            );\n        \n    \n            tile_layer_4ec3a447473e9c7e59c57024813973eb.addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var marker_5b2700bc79122c6dbe0478c5453a098b = L.marker(\n                [34.118, -118.352],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_48e413a44d84661997040fd8aac59f5c = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_5b2700bc79122c6dbe0478c5453a098b.setIcon(icon_48e413a44d84661997040fd8aac59f5c);\n        \n    \n        var popup_383465297c50e77f1c57130caf859b98 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_9dfb5b20b77bedf032217887b5175224 = $(`&lt;div id=&quot;html_9dfb5b20b77bedf032217887b5175224&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Hollywood Fire&lt;/b&gt;&lt;br&gt;Size: 150 acres&lt;br&gt;Status: Active&lt;/div&gt;`)[0];\n                popup_383465297c50e77f1c57130caf859b98.setContent(html_9dfb5b20b77bedf032217887b5175224);\n            \n        \n\n        marker_5b2700bc79122c6dbe0478c5453a098b.bindPopup(popup_383465297c50e77f1c57130caf859b98)\n        ;\n\n        \n    \n    \n            var marker_fa5fd74bc356800920a39f7e79ec87d1 = L.marker(\n                [34.136, -118.294],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_46962ca5c86ad0a784e8293a8f738802 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;green&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_fa5fd74bc356800920a39f7e79ec87d1.setIcon(icon_46962ca5c86ad0a784e8293a8f738802);\n        \n    \n        var popup_d35dd4c47a985b0ba66165cbe245adc6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_f0c777780226f193ffbf0cbb48c5cfe2 = $(`&lt;div id=&quot;html_f0c777780226f193ffbf0cbb48c5cfe2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Griffith Park Fire&lt;/b&gt;&lt;br&gt;Size: 75 acres&lt;br&gt;Status: Contained&lt;/div&gt;`)[0];\n                popup_d35dd4c47a985b0ba66165cbe245adc6.setContent(html_f0c777780226f193ffbf0cbb48c5cfe2);\n            \n        \n\n        marker_fa5fd74bc356800920a39f7e79ec87d1.bindPopup(popup_d35dd4c47a985b0ba66165cbe245adc6)\n        ;\n\n        \n    \n    \n            var marker_9a9212d2b94b89e83c83d4997ad55fd7 = L.marker(\n                [34.145, -118.368],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_d27cffbfaee13370a44b7c6e7a61aba4 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;fire&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_9a9212d2b94b89e83c83d4997ad55fd7.setIcon(icon_d27cffbfaee13370a44b7c6e7a61aba4);\n        \n    \n        var popup_bf81d3437e4c56b74909e206693f1925 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_35d19fbffc523d523885c425265923ba = $(`&lt;div id=&quot;html_35d19fbffc523d523885c425265923ba&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Mulholland Fire&lt;/b&gt;&lt;br&gt;Size: 200 acres&lt;br&gt;Status: Active&lt;/div&gt;`)[0];\n                popup_bf81d3437e4c56b74909e206693f1925.setContent(html_35d19fbffc523d523885c425265923ba);\n            \n        \n\n        marker_9a9212d2b94b89e83c83d4997ad55fd7.bindPopup(popup_bf81d3437e4c56b74909e206693f1925)\n        ;\n\n        \n    \n    \n            var marker_14a0563fa9d3bce94fceb33858dafe9f = L.marker(\n                [34.126, -118.352],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_5b49b41d226955029cc2c6bb6956bb60 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;road&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_14a0563fa9d3bce94fceb33858dafe9f.setIcon(icon_5b49b41d226955029cc2c6bb6956bb60);\n        \n    \n        var popup_1365700793795aa4b4457d79da07d484 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_28b0b70c942120b02ce2b246b818ed3c = $(`&lt;div id=&quot;html_28b0b70c942120b02ce2b246b818ed3c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Road: Mulholland Drive&lt;/b&gt;&lt;br&gt;Status: Closed&lt;/div&gt;`)[0];\n                popup_1365700793795aa4b4457d79da07d484.setContent(html_28b0b70c942120b02ce2b246b818ed3c);\n            \n        \n\n        marker_14a0563fa9d3bce94fceb33858dafe9f.bindPopup(popup_1365700793795aa4b4457d79da07d484)\n        ;\n\n        \n    \n    \n            var marker_cd1f84a5fe71cd2a0babd070e25f0bea = L.marker(\n                [34.11, -118.366],\n                {}\n            ).addTo(map_6d780f568ec325208b7c02a95e513dd8);\n        \n    \n            var icon_75422235f0dfdf8143fb30051ce868b4 = L.AwesomeMarkers.icon(\n                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;road&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n            );\n            marker_cd1f84a5fe71cd2a0babd070e25f0bea.setIcon(icon_75422235f0dfdf8143fb30051ce868b4);\n        \n    \n        var popup_34e05f4e0cb94e98b1b7b72d9faeee21 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d1abea4ed39cd1db406fab9110ecac6d = $(`&lt;div id=&quot;html_d1abea4ed39cd1db406fab9110ecac6d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Road: Laurel Canyon Blvd&lt;/b&gt;&lt;br&gt;Status: Partial Closure&lt;/div&gt;`)[0];\n                popup_34e05f4e0cb94e98b1b7b72d9faeee21.setContent(html_d1abea4ed39cd1db406fab9110ecac6d);\n            \n        \n\n        marker_cd1f84a5fe71cd2a0babd070e25f0bea.bindPopup(popup_34e05f4e0cb94e98b1b7b72d9faeee21)\n        ;\n\n        \n    \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# [Current & Latest NEWS](https://www.google.com/search?q=LA+wildfire&client=firefox-b-1-d&sca_esv=2a01fdbcda2f6ea4&ei=uKB_Z9DDMffL0PEP4JCfyAI&ved=0ahUKEwjQ_6-Rs-iKAxX3JTQIHWDIBykQ4dUDCBA&uact=5&oq=LA+wildfire&gs_lp=Egxnd3Mtd2l6LXNlcnAiC0xBIHdpbGRmaXJlMhAQABiABBixAxhDGIMBGIoFMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDMgQQABgDSOQFUO8CWO8CcAF4AJABAJgBbKABuwGqAQMxLjG4AQPIAQD4AQGYAgKgAnnCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDMS4xoAfKCQ&sclient=gws-wiz-serp)\n\n\n## Interactive Map","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport folium\nimport datetime\n\n# Constants\nCALFIRE_URL = \"https://www.fire.ca.gov/Incidents\"\nLA_ROAD_CLOSURES_URL = \"https://pw.lacounty.gov/roadclosures/\"\nMAP_CENTER = (34.0522, -118.2437)  # Los Angeles coordinates\nMAP_ZOOM_START = 10\n\n# Helper function to scrape wildfire data\ndef fetch_wildfire_data():\n    try:\n        response = requests.get(CALFIRE_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        wildfire_data = []\n\n        # Replace with actual tags and classes for CalFire data\n        incidents = soup.find_all(class_=\"incident-row\")\n        for incident in incidents:\n            name = incident.find(class_=\"incident-name\").get_text(strip=True)\n            size = incident.find(class_=\"incident-acres\").get_text(strip=True)\n            status = incident.find(class_=\"incident-status\").get_text(strip=True)\n            latitude = incident.get(\"data-lat\")\n            longitude = incident.get(\"data-lng\")\n            if latitude and longitude:\n                wildfire_data.append({\n                    \"name\": name,\n                    \"size\": size,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return wildfire_data\n    except Exception as e:\n        print(f\"Error fetching wildfire data: {e}\")\n        return []\n\n# Helper function to scrape road closures data\ndef fetch_road_closures_data():\n    try:\n        response = requests.get(LA_ROAD_CLOSURES_URL)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        road_closures = []\n\n        # Replace with actual tags and classes for road closure data\n        closures = soup.find_all(class_=\"closure-row\")\n        for closure in closures:\n            road_name = closure.find(class_=\"road-name\").get_text(strip=True)\n            status = closure.find(class_=\"closure-status\").get_text(strip=True)\n            latitude = closure.get(\"data-lat\")\n            longitude = closure.get(\"data-lng\")\n            if latitude and longitude:\n                road_closures.append({\n                    \"road\": road_name,\n                    \"status\": status,\n                    \"location\": (float(latitude), float(longitude))\n                })\n\n        return road_closures\n    except Exception as e:\n        print(f\"Error fetching road closures data: {e}\")\n        return []\n\n# Helper function to fetch news\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nNEWS_API_URL = \"https://newsapi.org/v2/top-headlines?country=us\"\n\ndef fetch_latest_news():\n    try:\n        response = requests.get(f\"{NEWS_API_URL}&apiKey={NEWS_API_KEY}\")\n        response.raise_for_status()\n        articles = response.json().get(\"articles\", [])\n        return [\n            {\"title\": article[\"title\"], \"description\": article[\"description\"]}\n            for article in articles\n        ]\n    except Exception as e:\n        print(f\"Error fetching news: {e}\")\n        return []\n\n# Generate the map\ndef generate_interactive_map():\n    wildfire_data = fetch_wildfire_data()\n    road_closures = fetch_road_closures_data()\n    latest_news = fetch_latest_news()\n\n    interactive_map = folium.Map(location=MAP_CENTER, zoom_start=MAP_ZOOM_START)\n\n    # Add wildfire markers\n    for wildfire in wildfire_data:\n        folium.Marker(\n            location=wildfire[\"location\"],\n            popup=(\n                f\"<b>{wildfire['name']}</b><br>Size: {wildfire['size']}<br>Status: {wildfire['status']}\"\n            ),\n            icon=folium.Icon(color=\"red\", icon=\"fire\")\n        ).add_to(interactive_map)\n\n    # Add road closure markers\n    for closure in road_closures:\n        folium.Marker(\n            location=closure[\"location\"],\n            popup=(\n                f\"<b>Road: {closure['road']}</b><br>Status: {closure['status']}\"\n            ),\n            icon=folium.Icon(color=\"blue\", icon=\"road\")\n        ).add_to(interactive_map)\n\n    # Add news headlines as map footer\n    news_text = \"<br>\".join(\n        [f\"<b>{news['title']}</b>: {news['description']}\" for news in latest_news]\n    )\n    folium.Marker(\n        location=MAP_CENTER,\n        popup=folium.Popup(f\"<div>{news_text}</div>\", max_width=500),\n        icon=folium.Icon(color=\"green\", icon=\"info-sign\")\n    ).add_to(interactive_map)\n\n    # Save map to file\n    map_file = \"daily_north_la_map.html\"\n    interactive_map.save(map_file)\n    print(f\"Interactive map saved to {map_file}. Open this file in your browser to view.\")\n\n# Generate and save the map\ngenerate_interactive_map()\n\n# Add a timestamp to track when the script was last run\nprint(f\"Script completed on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Notification Alert Protocol","metadata":{}},{"cell_type":"code","source":"import requests\nimport geopy.distance\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport smtplib\nfrom bs4 import BeautifulSoup\nimport folium\nimport webbrowser\n\n# Configurations\nNEWS_API_KEY = \"0113ee1d35814f62bf8f5b2441bee228\"\nUSER_LOCATION = (34.1177, -118.3520)  # Hollywood Hills, CA\n\nCARRIERS = {\n    \"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"\n}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\n\n# Function to send SMS alerts to subscribers\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n    server.quit()\n\n# Helper function to fetch the latest news\ndef get_latest_news():\n    url = f\"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json().get(\"articles\", [])\n    else:\n        print(f\"Error fetching news: {response.status_code}\")\n        return []\n\n# Parse news articles for emergency events\ndef parse_news_for_emergencies(news_articles):\n    emergencies = []\n    for article in news_articles:\n        title = article.get(\"title\", \"\")\n        description = article.get(\"description\", \"\")\n        # Currently, location parsing is a placeholder\n        location = None\n        emergencies.append({\n            \"title\": title,\n            \"description\": description,\n            \"location\": location,\n        })\n    return emergencies\n\n# Scrape traffic data from SigAlert website\ndef get_real_time_traffic(location):\n    url = \"https://www.sigalert.com/?lat=33.984259&lon=-118.223015&z=2\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, 'html.parser')\n            traffic_alerts = {}\n\n            # Example: Extract alerts data (update selector as per page structure)\n            alerts = soup.find_all(class_=\"traffic-alert-class\")  # Replace \"traffic-alert-class\" with actual class\n            for alert in alerts:\n                alert_text = alert.get_text(strip=True)\n                # Placeholder for alert volume and severity\n                traffic_alerts[alert_text] = {\"volume\": 120, \"severity\": \"high\"}\n\n            return {\"traffic\": traffic_alerts}\n        else:\n            print(f\"Error fetching traffic data: {response.status_code}\")\n            return {}\n    except Exception as e:\n        print(f\"Error scraping traffic data: {e}\")\n        return {}\n\n# Calculate safe routes based on emergencies and traffic data\ndef calculate_safe_routes(emergencies, traffic_data):\n    routes = []\n    for emergency in emergencies:\n        location = emergency[\"location\"]\n        if location and isinstance(location, tuple) and len(location) == 2:\n            try:\n                distance = geopy.distance.geodesic(USER_LOCATION, location).km\n                traffic_info = traffic_data.get(\"traffic\", {}).get(location, None)\n                routes.append({\n                    \"emergency\": emergency,\n                    \"distance\": distance,\n                    \"traffic\": traffic_info,\n                })\n            except ValueError as e:\n                print(f\"Error calculating distance for location {location}: {e}\")\n        else:\n            print(f\"Invalid or missing location data: {location}\")\n    return sorted(routes, key=lambda x: x[\"distance\"])\n\n# Train a model to predict accident risk\ndef train_accident_risk_model():\n    X = np.random.rand(100, 3)  # Simulated data\n    y = np.random.randint(0, 2, 100)  # Binary labels\n    model = RandomForestRegressor()\n    model.fit(X, y)\n    return model\n\nrisk_model = train_accident_risk_model()\n\ndef predict_risk(traffic_volume, weather_severity, distance):\n    X_new = np.array([[traffic_volume, weather_severity, distance]])\n    return risk_model.predict(X_new)[0]\n\n# Visualize data on an interactive map\ndef display_map(emergencies):\n    m = folium.Map(location=USER_LOCATION, zoom_start=12)\n    for emergency in emergencies:\n        if emergency[\"location\"]:\n            folium.Marker(\n                location=emergency[\"location\"],\n                popup=f\"{emergency['title']}: {emergency['description']}\",\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\")\n            ).add_to(m)\n    return m\n\n# Generate the initial map and open it\nnews_articles = get_latest_news()\nemergencies = parse_news_for_emergencies(news_articles)\nemergency_map = display_map(emergencies)\nmap_file = \"emergency_map.html\"\nemergency_map.save(map_file)\nwebbrowser.open(map_file)  # Open the map in the default web browser\n\n# Subscribers list for SMS alerts\nsubscribers = []\n\ndef add_subscriber():\n    phone_number = input(\"Enter phone number: \")\n    carrier = input(\"Enter carrier (att, tmobile, verizon, sprint): \").lower()\n    if carrier in CARRIERS:\n        subscribers.append((phone_number, carrier))\n        print(\"Subscriber added successfully.\")\n    else:\n        print(\"Invalid carrier.\")\n\n# Main Execution Loop\nwhile True:\n    print(f\"Checking for updates at {datetime.now()}...\")\n\n    # Step 1: Fetch latest news\n    news_articles = get_latest_news()\n    emergencies = parse_news_for_emergencies(news_articles)\n\n    # Step 2: Fetch real-time traffic data\n    traffic_data = get_real_time_traffic(USER_LOCATION)\n\n    # Step 3: Calculate safe routes\n    safe_routes = calculate_safe_routes(emergencies, traffic_data)\n\n    # Step 4: Predict and prioritize risks\n    alerts = []\n    for route in safe_routes:\n        traffic_volume = route[\"traffic\"][\"volume\"] if route[\"traffic\"] else 0\n        weather_severity = 0.5\n        distance = route[\"distance\"]\n        risk_score = predict_risk(traffic_volume, weather_severity, distance)\n        route[\"risk_score\"] = risk_score\n        alerts.append(f\"Emergency: {route['emergency']['title']} at {route['emergency']['location']}. Distance: {route['distance']} km, Risk Score: {risk_score:.2f}\")\n\n    # Step 5: Send updates to subscribers\n    for alert in alerts:\n        for phone_number, carrier in subscribers:\n            send_message(phone_number, carrier, alert)\n\n    print(\"Sleeping for 60 seconds...\")\n    time.sleep(60)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Google Dork","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:17.758379Z","iopub.execute_input":"2025-01-09T12:10:17.758857Z","iopub.status.idle":"2025-01-09T12:10:18.032416Z","shell.execute_reply.started":"2025-01-09T12:10:17.758778Z","shell.execute_reply":"2025-01-09T12:10:18.031449Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"def google_dork_search(query):\n    # Simulated function to represent Google Dork search\n    # In practice, this function would perform a search and return URLs\n    print(f\"Performing search for query: {query}\")\n    return [\n        \"https://example.com/article1\",\n        \"https://example.com/article2\",\n        \"https://example.com/article3\"\n    ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:26.944685Z","iopub.execute_input":"2025-01-09T12:10:26.945497Z","iopub.status.idle":"2025-01-09T12:10:26.95137Z","shell.execute_reply.started":"2025-01-09T12:10:26.94543Z","shell.execute_reply":"2025-01-09T12:10:26.949982Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"def extract_info_from_url(url):\n    # Simulated function to extract information from a URL\n    # In practice, this would fetch the URL content and parse it\n    print(f\"Extracting information from {url}\")\n    return {\n        \"title\": \"Sample Article Title\",\n        \"content\": \"This is a summary of the article content related to Los Angeles wildfires.\"\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:10:37.998138Z","iopub.execute_input":"2025-01-09T12:10:37.998515Z","iopub.status.idle":"2025-01-09T12:10:38.003661Z","shell.execute_reply.started":"2025-01-09T12:10:37.99847Z","shell.execute_reply":"2025-01-09T12:10:38.002367Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Initialize the graph\nG = nx.Graph()\n\n# Define the search query\nsearch_query = \"Los Angeles wildfires\"\n\n# Perform the search\nurls = google_dork_search(search_query)\n\n# Process each URL\nfor url in urls:\n    info = extract_info_from_url(url)\n    title = info[\"title\"]\n    content = info[\"content\"]\n    \n    # Add a node for the article\n    G.add_node(title, content=content)\n    \n    # For simplicity, connect each article to the previous one\n    if len(G.nodes) > 1:\n        previous_title = list(G.nodes)[-2]\n        G.add_edge(previous_title, title)\n\n# Draw the graph\nplt.figure(figsize=(10, 8))\npos = nx.spring_layout(G, seed=42)\nnx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2000, font_size=10, font_weight='bold', edge_color='gray')\nplt.title(\"Network Graph of Los Angeles Wildfire Articles\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T12:11:01.134877Z","iopub.execute_input":"2025-01-09T12:11:01.135293Z","iopub.status.idle":"2025-01-09T12:11:01.315075Z","shell.execute_reply.started":"2025-01-09T12:11:01.135258Z","shell.execute_reply":"2025-01-09T12:11:01.313724Z"}},"outputs":[{"name":"stdout","text":"Performing search for query: Los Angeles wildfires\nExtracting information from https://example.com/article1\nExtracting information from https://example.com/article2\nExtracting information from https://example.com/article3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA/sAAANKCAYAAADV7l7qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABC50lEQVR4nO3deZxVdf348fedYYZZYABlkE0WEUXRRBEX9uSrhIh7fgUXcKWstNLU0tQyLTVL01+G+k0NcUlzyQUXckNMS8RdERMwQGUJCNlhzu8PvnO/jjMgJDrw4fl8PHj4mHPPuedzz9wZ53XPlsuyLAsAAAAgGQX1PQAAAABg4xL7AAAAkBixDwAAAIkR+wAAAJAYsQ8AAACJEfsAAACQGLEPAAAAiRH7AAAAkBixDwAAAIkR+wAJGzFiRDRq1Ki+h/GFeOqppyKXy8Xdd9/9ha9rypQpccABB0STJk0il8vFfffd94Wvc0tw8803Ry6Xi2nTptX3UNZbXWPu379/9O/f/zOXrX7PPvXUUzWmjx49Orp06RJFRUXRtGnTDXrOzcF/+n0eMWJEdOjQ4QsZE8CWQOwDW5TqPzpLSkpi5syZtR7v379/7LLLLv/Rc992221x1VVXfc4RbnpeffXVOOGEE6Jjx45RUlISjRo1im7dusXZZ58d7733Xn0P70sxfPjweO211+KSSy6J0aNHx5577lnnfNOmTYtcLhe//OUvv+QR1m3BggVRUlISuVwu3nrrrfoeTr27/PLLI5fLxaRJk2pMz7IsmjVrFrlcLqZOnVrjsWXLlkXDhg1j2LBhX8iY3n777RgxYkR06tQpbrjhhrj++uu/kPWsj7feeiv/+3HBggUbvPyll17qgzCATYjYB7ZIy5cvj1/84hcb9TlTjP0bbrgh9thjjxg7dmwcfvjhcc0118QVV1wRvXr1ij/84Q/RpUuXWL16dX0P8wu1dOnS+Otf/xonnXRSfPvb345jjz022rZtW9/DWi933XVX5HK5aNmyZYwZM6a+h1PvevfuHRERzz77bI3pb7zxRixYsCAaNGgQEyZMqPHY3//+91ixYkV+2eOOOy6WLl0a7du33yhjeuqpp6KqqiquvvrqGDFiRBx11FEREfHYY4/FY489tlHWsb5uvfXWaNmyZUTEf3TEzNpif2NvMwDWj9gHtkjdunWLG264IWbNmlXfQ/lCLF68+HM/x3PPPRff/OY3o1evXjFlypS48sor45RTTolvfvOb8f/+3/+LadOmxTnnnPOZz7NkyZLPPZb6NGfOnIiI/OHVm5Nbb701DjzwwBg6dGjcdttt9T2cerfnnntGSUlJrdifMGFCbL311jFgwIBaj1V/XR37hYWF+aMlNobZs2dHRO33V3FxcRQXF69z2WXLlkVVVdVGGUeWZXHbbbfFsGHD4sADD1zvD4eyLIulS5euc56Nvc0AWD9iH9gi/ehHP4rVq1ev9979W2+9Nbp37x6lpaWx1VZbxdFHHx3//Oc/84/3798/HnrooZg+fXrkcrnI5XLRoUOHyLIsmjdvHt///vfz81ZVVUXTpk2jsLCwxqGyl112WTRo0CA+/vjj/LQnnngi+vTpE+Xl5dG0adM45JBDah2OfdFFF0Uul4s333wzhg0bFs2aNcuHSV1efvnlqKysjP79+9dY16f95Cc/iVwuF2PGjInGjRvXerykpCQuvvjiKCwsrLEddtlll5g4cWL07ds3ysrK4kc/+lFERNx///0xePDgaN26dTRs2DA6deoUF198ca0jAz75HD179ozS0tLo2LFj/O53v6tznFVVVXHJJZdE27Zto6SkJAYMGBDvvvvuWl/XJ02aNCkGDRoUFRUV0ahRoxgwYEA8//zz+ccvuuii/N7IH/zgB/nv6+c1e/bsOOmkk2KbbbaJkpKS2G233eKWW26pNd8dd9wR3bt3j8aNG0dFRUXsuuuucfXVV6/XOt5///0YP358HH300XH00UfH1KlT47nnnqs1X/X2fvPNN+OrX/1qlJWVRZs2beLyyy+vNe/06dPj4IMPjvLy8mjRokV873vfi0cffbTO89BfeOGF+NrXvhZNmjSJsrKy6NevX6295mszduzY/Pu+cePGMXjw4HjjjTdqzPPhhx/GCSecEG3bto2GDRtGq1at4pBDDlnneeHFxcXRo0ePWuOYMGFC7LvvvtGrV686H2vatGn+9J71Pf98xowZceihh9bYVsuXL68xT4cOHeLCCy+MiIjKysrI5XJx0UUXRUTtc/arz/e/44474vzzz482bdpEWVlZ/Pvf/46Iz7e9q1/ntGnT8u+XZ555JmbMmFFrvg4dOsRBBx0Ujz76aOy5555RWloao0aNilwuF4sXL45bbrkl/ztwxIgR69xmY8eOjX79+uXf3z169PjMD6Wqqqriqquuiq5du0ZJSUlss802MXLkyJg/f36N+V588cUYOHBgNG/ePP875MQTT1zv7QGQggb1PQCA+tCxY8c4/vjj44Ybbohzzz03WrduvdZ5L7nkkvjxj38cRx11VJx88skxZ86cuOaaa6Jv374xadKkaNq0aZx33nmxcOHCmDFjRvz617+OiIhGjRpFLpeLXr16xTPPPJN/vldffTUWLlwYBQUFMWHChBg8eHBERIwfPz523333/AX1xo0bF4MGDYrtttsuLrrooli6dGlcc8010atXr3jppZdqRefXv/716Ny5c1x66aWRZVmdr+Xvf/97DBw4MPbcc8+4//77o7S0tM75lixZEk888UT0799/gw9ZnzdvXgwaNCiOPvroOPbYY2ObbbaJiDV/8Ddq1Ci+//3vR6NGjeKJJ56ICy64IP7973/HFVdcUeM55s+fHwceeGAcddRRMXTo0PjjH/8Y3/zmN6O4uLjWH+y/+MUvoqCgIM4666xYuHBhXH755XHMMcfECy+8sM5xvvHGG9GnT5+oqKiIs88+O4qKimLUqFHRv3//ePrpp2PvvfeOww8/PJo2bRrf+973YujQoXHggQd+7gseLl26NPr37x/vvvtufPvb346OHTvGXXfdFSNGjIgFCxbEGWecERERjz/+eAwdOjQGDBgQl112WUSsOad6woQJ+XnW5fbbb4/y8vI46KCDorS0NDp16hRjxoyJnj171pp3/vz58bWvfS0OP/zwOOqoo+Luu++Oc845J3bdddcYNGhQRKw5WmS//faLDz74IM4444xo2bJl3HbbbfHkk0/Wer4nnngiBg0aFN27d48LL7wwCgoK4qabbor99tsvxo8fH3vttddaxz169OgYPnx4DBw4MC677LJYsmRJXHfdddG7d++YNGlS/n1/xBFHxBtvvBHf+c53okOHDjF79ux4/PHH4/3331/nBzK9e/eO8ePHx7Rp0/LzTZgwIU4++eTYa6+94sILL4wFCxZE06ZNI8uyeO6552LfffeNgoL13z+ydOnSGDBgQLz//vtx+umnR+vWrWP06NHxxBNP1Jjvqquuij/84Q9x7733xnXXXReNGjWKr3zlK+t87osvvjiKi4vjrLPOiuXLl0dxcfHn2t7VxowZE506dYoePXrELrvsEmVlZXH77bfHD37wg1rzTp48OYYOHRojR46MU045JXbccccYPXp0fhueeuqpERHRqVOnta7v5ptvjhNPPDG6du0aP/zhD6Np06YxadKkeOSRR9Z5fYSRI0fGzTffHCeccEKcfvrpMXXq1Lj22mtj0qRJMWHChCgqKorZs2fHAQccEJWVlXHuuedG06ZNY9q0aXHPPfd85nYASEoGsAW56aabsojI/v73v2f/+Mc/sgYNGmSnn356/vF+/fplXbt2zX89bdq0rLCwMLvkkktqPM9rr72WNWjQoMb0wYMHZ+3bt6+1ziuuuCIrLCzM/v3vf2dZlmW/+c1vsvbt22d77bVXds4552RZlmWrV6/OmjZtmn3ve9/LL9etW7esRYsW2bx58/LTXnnllaygoCA7/vjj89MuvPDCLCKyoUOH1lr38OHDs/Ly8izLsuzZZ5/NKioqssGDB2fLli1b53Z65ZVXsojIvvvd79Z6bN68edmcOXPy/5YvX55/rF+/fllEZL/73e9qLbdkyZJa00aOHJmVlZXVGE/1c1x55ZX5acuXL89vjxUrVmRZlmVPPvlkFhHZTjvtVGMMV199dRYR2WuvvbbO13jooYdmxcXF2T/+8Y/8tFmzZmWNGzfO+vbtm582derULCKyK664Yp3Pt77zXnXVVVlEZLfeemt+2ooVK7J99903a9SoUf59csYZZ2QVFRXZqlWrPnO9ddl1112zY445Jv/1j370o6x58+bZypUra8xXvb3/8Ic/5KctX748a9myZXbEEUfkp1155ZVZRGT33XdfftrSpUuzLl26ZBGRPfnkk1mWZVlVVVXWuXPnbODAgVlVVVV+3iVLlmQdO3bM9t9///y06p/HqVOnZlmWZYsWLcqaNm2anXLKKTXG+OGHH2ZNmjTJT58/f/56f08+7aGHHsoiIhs9enSWZVn2wQcfZBGRPf3009miRYuywsLC7KGHHsqyLMtef/31LCJq/Jx/eszV27Bfv375r6u/x3/84x/z0xYvXpxtv/32NbZVlv3fz++cOXNqjPPTz1n9ft9uu+1q/CxtyPZemxUrVmRbb711dt555+WnDRs2LNttt91qzdu+ffssIrJHHnmk1mPl5eXZ8OHDa03/9DZbsGBB1rhx42zvvffOli5dWmPeT76G4cOH1/idOn78+CwisjFjxtRY5pFHHqkx/d57783/ngfYkjmMH9hibbfddnHcccfF9ddfHx988EGd89xzzz1RVVUVRx11VMydOzf/r2XLltG5c+c692p+Wp8+fWL16tX5Q6jHjx8fffr0iT59+sT48eMjIuL111+PBQsWRJ8+fSIi4oMPPoiXX345RowYEVtttVX+ub7yla/E/vvvHw8//HCt9XzjG99Y6xiefPLJGDhwYAwYMCDuueeeaNiw4TrHXH1ocF17sbfbbruorKzM//vzn/9c4/GGDRvGCSecUGu5Tx5FsGjRopg7d2706dMnlixZEm+//XaNeRs0aBAjR47Mf11cXBwjR46M2bNnx8SJE2vMe8IJJ9Q4t7l6G67rTgGrV6+Oxx57LA499NDYbrvt8tNbtWoVw4YNi2effTa/DTa2hx9+OFq2bBlDhw7NTysqKorTTz89Pv7443j66acjYs053IsXL47HH398g9fx6quvxmuvvVZjHUOHDo25c+fGo48+Wmv+Ro0axbHHHpv/uri4OPbaa68a2/CRRx6JNm3axMEHH5yfVlJSEqecckqN53r55ZdjypQpMWzYsJg3b17+Z2bx4sUxYMCAeOaZZ9Z6nvnjjz8eCxYsyI+1+l9hYWHsvffe+Z+30tLSKC4ujqeeeqrW4dufpWfPnlFQUJA/F796b3CPHj3ye9arD3+v/u+6Toupy8MPPxytWrWKI488Mj+trKwsv8f78xg+fHiNn6XPs72rjR07NubNm1fr/fLKK6/UOn0iYs2RUQMHDvyPX8Pjjz8eixYtinPPPTdKSkpqPLau8/rvuuuuaNKkSey///413h/du3ePRo0a5d8f1dc/ePDBB2PlypX/8TgBNndiH9iinX/++bFq1aq1nrs/ZcqUyLIsOnfuXCNwKysr46233spfXGtd9thjjygrK8uHfXXs9+3bN1588cVYtmxZ/rHqqJg+fXpEROy44461nm+nnXbK/zH/SR07dqxz/cuWLYvBgwfH7rvvHn/84x8/86JfEZE/R7+uc/rvv//+ePzxx9d6e7k2bdrUuY433ngjDjvssGjSpElUVFREZWVlPjAXLlxYY97WrVtHeXl5jWk77LBDRESt837btWtX4+tmzZpFRKwzAufMmRNLlixZ6/atqqqqcU2GjWn69OnRuXPnWoeF77TTTvnHIyJOO+202GGHHWLQoEHRtm3bOPHEE+ORRx5Zr3XceuutUV5eHtttt128++678e6770ZJSUl06NChzguvtW3btlZkNWvWrMY2nD59enTq1KnWfNtvv32Nr6dMmRIRa6L00z8zN954YyxfvrzW9/vTy+633361ln3sscfyP28NGzaMyy67LMaOHRvbbLNN9O3bNy6//PL48MMPP3PbNG3aNLp27Voj6Hffffd8QPfs2bPGY9UffGyI6dOnx/bbb19rW9X1fttQn/45/zzbu9qtt94aHTt2jIYNG+bfL506dYqysrI63y9r+12zvv7xj39ERGzwbU6nTJkSCxcujBYtWtR6rR9//HH+/dGvX7844ogj4ic/+Uk0b948DjnkkLjppptqXTMBIHXO2Qe2aNttt10ce+yxcf3118e5555b6/GqqqrI5XIxduzYGheiq7Y+528XFRXF3nvvHc8880y8++678eGHH0afPn1im222iZUrV8YLL7wQ48ePjy5dukRlZeV//FrWdv59w4YN48ADD4z7778/HnnkkTjooIM+87m23377aNCgQbz++uu1HuvXr19ErNn7vr7jWLBgQfTr1y8qKiripz/9aXTq1ClKSkripZdeinPOOedzXVG8ru9LRKz1ugWbixYtWsTLL78cjz76aIwdOzbGjh0bN910Uxx//PF1XsyvWpZlcfvtt8fixYtj5513rvX47Nmz4+OPP67x3t2Y27D6e3nFFVdEt27d6pxnbT831cuOHj06fwu4T/rke+673/1uDBkyJO6777549NFH48c//nH8/Oc/jyeeeCJ23333dY6xd+/e8bvf/S4WLFgQEyZMqHEdg549e8bvf//7WLlyZTz77LPRvXv3Wnuf69Onf74+z/aOWHMUzwMPPBDLli2Lzp0713r8tttui0suuaTGBxdr+13zRauqqooWLVqs9U4B1b8/c7lc3H333fH888/HAw88EI8++miceOKJceWVV8bzzz//ua+7AbC5EPvAFu/888+PW2+9NX8RtE/q1KlTZFkWHTt2zO9ZXpt1HX7ap0+fuOyyy2LcuHHRvHnz6NKlS+RyuejatWuMHz8+xo8fXyPCq68AP3ny5FrP9fbbb0fz5s1r7fle17jGjBkThxxySHz961+PsWPH1rjKd13Ky8vzF6qbOXNmtGnTZr3WtTZPPfVUzJs3L+65557o27dvfvrUqVPrnH/WrFmxePHiGq/xnXfeiYjYKFfDr6ysjLKysrVu34KCgth2220/93rq0r59+3j11Vejqqqqxt796lMZPnkv8uLi4hgyZEgMGTIkqqqq4rTTTotRo0bFj3/841p71Ks9/fTTMWPGjPjpT3+aP1qg2vz58+PUU0+N++67r8Zh++s77jfffDOyLKvxXv/0nQ+qL8pWUVER//Vf/7VB66hetkWLFuu1bKdOneLMM8+MM888M6ZMmRLdunWLK6+8Mm699dZ1Lte7d++47rrrYty4cTFp0qQaF6Hr2bNnLF26NB566KF477334ogjjtig1xCxZlu9/vrrtbZVXe+3z+vzbO+INacqLVu2LK677rpo3rx5jccmT54c559/fkyYMGG9TmVY31vrVY/59ddfX+v7eG3LjRs3Lnr16rVeHzjss88+sc8++8Qll1wSt912WxxzzDFxxx13xMknn7ze6wTYnDmMH9jiderUKY499tgYNWpUrcOADz/88CgsLIyf/OQntfZyZlkW8+bNy39dXl6+1sNl+/TpE8uXL4+rrroqevfunf+juE+fPjF69OiYNWtW/lzziDXnjnfr1i1uueWWGrfne/311+Oxxx6LAw88cINeY3Fxcdxzzz3Ro0ePGDJkSPztb3/7zGUuuOCCWL16dRx77LF1Hs6/IXt9q/ccf3KZFStWxG9/+9s651+1alWMGjWqxryjRo2KysrK6N69+3qvd13jOeCAA+L++++vcVrARx99FLfddlv07t07KioqPvd66nLggQfGhx9+GHfeeWd+2qpVq+Kaa66JRo0a5Y+c+OR7KyKioKAgf6X2dR2OXH0I/w9+8IM48sgja/w75ZRTonPnzut9D/VPGjhwYMycObPGNRqWLVsWN9xwQ435unfvHp06dYpf/vKXdb5v5syZs851VFRUxKWXXlrnudbVyy5ZsiSWLVtW47FOnTpF48aN1+tQ7epw/dWvfhUrV66ssWe/Q4cO0apVq/ytBzf0fP2INd/jWbNmxd13352ftmTJkrj++us3+Lk+y+fZ3hFr3i/bbbddfOMb36j1fjnrrLOiUaNG6/1+KS8vr/H7am0OOOCAaNy4cfz85z+v9X1c1++Vo446KlavXh0XX3xxrcdWrVqVX/f8+fNrPU/1UQ8O5Qe2JPbsA0TEeeedF6NHj47JkydH165d89M7deoUP/vZz+KHP/xhTJs2LQ499NBo3LhxTJ06Ne6999449dRT46yzzoqINX9033nnnfH9738/f7GvIUOGRETEvvvuGw0aNIjJkyfXuEhX375947rrrouIqBH7EWsOyx00aFDsu+++cdJJJ+VvvdekSZP8vbg3RGlpaTz44IOx3377xaBBg+Lpp59e5zmzffr0iWuvvTa+853vROfOneOYY46JLl26xIoVK+Kdd96JMWPGRHFxcZ2HW39az549o1mzZjF8+PA4/fTTI5fLxejRo9f6h33r1q3jsssui2nTpsUOO+wQd955Z7z88stx/fXXR1FR0Qa/9rr87Gc/i8cffzx69+4dp512WjRo0CBGjRoVy5cvr/Me8xviL3/5S62IiYg49NBD49RTT41Ro0bFiBEjYuLEidGhQ4e4++67Y8KECXHVVVflr5dw8sknx7/+9a/Yb7/9om3btjF9+vS45pprolu3brX22Fdbvnx5/OlPf4r9999/rYeeH3zwwXH11VfH7Nmzo0WLFuv9mkaOHBnXXnttDB06NM4444xo1apVjBkzJr+e6g+wCgoK4sYbb4xBgwZF165d44QTTog2bdrEzJkz48knn4yKiop44IEH6lxHRUVFXHfddXHcccfFHnvsEUcffXRUVlbG+++/Hw899FD06tUrrr322njnnXdiwIABcdRRR8XOO+8cDRo0iHvvvTc++uijOProoz/ztbRr1y623Xbb+Otf/xodOnSodevNnj17xp/+9Kf8rTM31CmnnBLXXnttHH/88TFx4sRo1apVjB49OsrKyjb4uT7L59nes2bNiieffDJOP/30Oh9v2LBhDBw4MO666674zW9+85k/e927d49x48bFr371q2jdunV07Ngx9t5771rzVVRUxK9//es4+eSTo0ePHjFs2LBo1qxZvPLKK7FkyZK1nqbSr1+/GDlyZPz85z+Pl19+OQ444IAoKiqKKVOmxF133RVXX311HHnkkXHLLbfEb3/72zjssMOiU6dOsWjRorjhhhuioqJigz8oBdis1cctAADqyydvvfdpw4cPzyKixq33qv3pT3/KevfunZWXl2fl5eVZly5dsm9961vZ5MmT8/N8/PHH2bBhw7KmTZtmEVHrNnw9evTIIiJ74YUX8tNmzJiRRUS27bbb1jnecePGZb169cpKS0uzioqKbMiQIdmbb75ZY5613bqr+jVV33qv2ty5c7Odd945a9myZTZlypQ61/tJkyZNyo4//visXbt2WXFxcVZeXp595Stfyc4888zs3XffrTHvp29d+EkTJkzI9tlnn6y0tDRr3bp1dvbZZ2ePPvporVuRVT/Hiy++mO27775ZSUlJ1r59++zaa6+t8XzVtyK76667akyvvv3dTTfd9Jmv7aWXXsoGDhyYNWrUKCsrK8u++tWvZs8991ydz7cht95b27/q27199NFH2QknnJA1b948Ky4uznbdddda47377ruzAw44IGvRokVWXFyctWvXLhs5cmT2wQcfrHX9f/rTn7KIyP7nf/5nrfM89dRTWURkV199dZZla/+effq2Z1mWZe+99142ePDgrLS0NKusrMzOPPPM/Dqff/75GvNOmjQpO/zww7Ott946a9iwYda+ffvsqKOOyv7yl7/k56nrNnZZtuZ7O3DgwKxJkyZZSUlJ1qlTp2zEiBHZiy++mGXZmvfwt771raxLly5ZeXl51qRJk2zvvfeucau7zzJ06NAsIrJhw4bVeuxXv/pV/raOn7Y+t97LsiybPn16dvDBB2dlZWVZ8+bNszPOOCN/i7jPc+u9T7/fq63P9v606tsprmuem2++OYuI7P7778+ybM2t9wYPHlznvG+//XbWt2/frLS0NIuI/G341vZ9/vOf/5z17Nkz//ttr732ym6//fb843W9B7Msy66//vqse/fuWWlpada4ceNs1113zc4+++xs1qxZWZat+bkeOnRo1q5du6xhw4ZZixYtsoMOOij//gHYUuSybDO/ghEASenfv3/MnTu3zosDsum56qqr4nvf+17MmDHjc1/bAQDYeJyzDwCsl6VLl9b4etmyZTFq1Kjo3Lmz0AeATYxz9gGA9XL44YdHu3btolu3brFw4cK49dZb4+233/6PLvgHAHyxxD4AsF4GDhwYN954Y4wZMyZWr14dO++8c9xxxx3x3//93/U9NADgU5yzDwAAAIlxzj4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAAACRG7AMAAEBixD4AAAAkRuwDAABAYsQ+AAAAJEbsAwAAQGLEPgAA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osZF3qqnbbfddhER8dFHH9Va7sgjj4yioqIoKiqKI488Mj/fnDlz6hz/P1+fFBER7z7/VJy/V6v44R6VMeG2URERsfCjWbFw9gdrfe0vPXBnZFkW5c2axw4994tGzZpH532+GhG1D+WvVv1BQkREQWHhWp+77rFOjIiIrbftGLvuf0h+eusuX1n7Mm+seX0fvftWXNirfbQsL8rH9NKlS+PVV1/doDFsbH/7298iIuLxxx+PoqKiyOVycdVVV0XEmg+CZs6cWY+jA4D/nAv0AbDZO+yww+Kwww6LqqqqmDhxYpx00knx2muvxX333RcREe+9914ceuihsWLFimjcuHF07949Vq1aFS+//HJERKxeXfv+79UfHDRo0KDWtOrzwz/rXPwNUdGiVTRp0brW9LVdRC/LsnjpoT9GRMTSRQviZwO6RETEqhXLIyLivRefjQUfzoymLdvUWK7R1i022pg3RHnTrWOrth2ieUlhFBf+370ICjfwA4cvSps2baJt27a1pq/6jIsYAsCmSuwDsFk7//zz48gjj4xu3bpFQUFB9OjRI3bYYYd47bXXokmTJhERMWnSpFixYkVERDz66KOx7777xh133BFDhw7d6OO555578qcW3HPPmsPbt9lmm6isrIzFixfXmr9t124xdeJz0axV2zjpuj9FUUlpRKzZqz/zrVeiWett61zP1InPxfyZ0yNizQcCyz7+d43Hs6qqeOnBO2K/k2sekv/p+9FXry8i1nqef7Vtd+kek58dF/P+OTVe/8uDscuAgyIiYtbk16L1jrvWuUzbrt1i9nuTo2GjxjHimtvjGz06ROvyopg7d2785S9/iX32WfddA/4TZWVlERGxZMmSyLKs1mv+pB49esTTTz8d7du3j3HjxkVp6ZrtMWPGjJg4cWK0b99+o48PAL4MYh+AzdqNN94Yl1xySTRv3jzatWsXs2fPjhkzZkRE5M+379q1axQWFsbq1avja1/7WrRr1y4+/PDDL2Q8L774Yv7Q/+pDwM8999y1zr//N86JG795REx/5e9x6QG7RLM27WLx/HmxaM6H0WGPfWPn/oPqXG7iA7dHRESjrSvjh4++HgUF/3dm3ugzh8ebTz4cLz1wZ63Y/7St2naIwgZFsXrVyvifbx4RTVtuG32OPy12/a+Da827z1Enxov33xYLPvhnjPnBCdG8fadY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SIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASIzYBwAAgMSIfQAAAEiM2AcAAIDEiH0AAABIjNgHAACAxIh9AAAASMz/B7Rt9w2EFFKCAAAAAElFTkSuQmCC\n"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"## Notes | Supplemenrtaery","metadata":{}},{"cell_type":"code","source":"from geopy.distance import geodesic\n\nnewport_ri = (41.49008, -71.312796)\n\ncleveland_oh = (41.499498, -81.695391)\n\nprint(geodesic(newport_ri, cleveland_oh).miles)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}