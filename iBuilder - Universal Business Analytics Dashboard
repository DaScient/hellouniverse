{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/ibuilder-universal-business-analytics-dashboard?scriptVersionId=221907665\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"115a2e42-5821-4515-a7d7-811c457af219","cell_type":"markdown","source":"# A Comprehensive Analysis of the iBuilder Ultimate Business Dashboard\n\nThis notebook provides an in‑depth exploration and academic analysis of the HTML, CSS, and JavaScript code used to build the **@DONUTZ.AI - iBuilder | Ultimate Business Dashboard**. In the following cells, we will:\n\n- **Examine** the structure and purpose of each section of the code,\n- **Analyze** how various external libraries (e.g., Normalize.css, Google Fonts, html2canvas, Chart.js) are integrated,\n- **Discuss** the advanced styling and dynamic functionalities implemented via CSS and JavaScript, and\n- **Explore** the mechanisms for real-time data visualization, export features, calendar integration, and subscription handling.\n\nLet us begin our academic inquiry into the design and functionality of this dashboard.","metadata":{}},{"id":"f1335dcf-de35-4722-b99f-bc27fc241596","cell_type":"markdown","source":"## Overview of the Dashboard Code Structure\n\nThe code is written as a complete HTML document with the following primary sections:\n\n1. **Head Section** – Contains meta tags for character encoding, browser compatibility, and viewport configuration. It also imports external resources such as Normalize.css for cross-browser consistency, Google Fonts for typographic style, and libraries such as html2canvas and Chart.js.\n\n2. **Internal CSS** – Defines the aesthetic aspects of the dashboard, including a unique transparent background and a glowy, vibrant style for text and outlines. Special attention is given to responsive design and interactive states (e.g., hover effects on navigation links and cards).\n\n3. **Body Section** – Organized into multiple sections:\n    - **Header:** Presents the title and a brief description.\n    - **Navigation:** Implements a sticky navigation bar that facilitates smooth scrolling to different dashboard sections.\n    - **Dashboard and Data Input Panel:** Features forms for real-time data input and a grid of various dynamically generated charts (e.g., pie, bar, doughnut, radar, line, scatter, bubble, and multi-line charts) to present business intelligence insights.\n    - **Export, Calendar, and Subscription Sections:** Provide functionalities to export data, add calendar events, and manage user subscriptions.\n\n4. **JavaScript Section** – Contains numerous functions that:\n    - Generate random data (for demo purposes),\n    - Initialize and update charts using Chart.js,\n    - Integrate with external data sources (e.g., RSS feeds),\n    - Manage user interactions such as modal popups, export features, and navigation throttling.","metadata":{}},{"id":"efb7aa9b-2018-46f8-83ae-f0e7fb71e451","cell_type":"code","source":"# The entire HTML code is stored in a multi-line string for further exploration.\nhtml_code = '''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Ensuring maximum compatibility and responsiveness -->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>@DONUTZ.AI - iBuilder | Ultimate Business Dashboard</title>\n  <!-- Normalize and Google Fonts -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700\" rel=\"stylesheet\" />\n  <!-- html2canvas for export functionality -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\" integrity=\"sha512-6rxz8U7g/2LSS4aQU+oOyoDJ9r3NAFrRZh1gYEPVhfqlT+nxI8fEyW6shkyLHz5i8PTx6OpklphD7vM3T4SwUg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n  <!-- Internal CSS: Fully transparent backgrounds with glowy, vibrant black fonts and outlines -->\n  <style>\n    /* Set non‑text elements to transparent */\n    body, header, nav, section, .container, .card {\n      background: transparent !important;\n    }\n    /* All text and letterings are now black with a vibrant glow */\n    body, h1, h2, h3, h4, h5, h6, p, label, a, button, input, select, textarea {\n      text-shadow: 0 0 5px rgba(0,191,255,0.8), 0 0 10px rgba(0,191,255,0.6);\n      color: #000000;\n    }\n    /* Navigation links glow and hover effects */\n    nav a {\n      border-bottom: 2px solid transparent;\n      transition: color 0.3s, border-bottom 0.3s;\n    }\n    nav a:hover, nav a.active {\n      border-bottom-color: #00bfff;\n    }\n    /* Glowing outlines for canvas elements */\n    canvas {\n      filter: drop-shadow(0 0 10px rgba(0,191,255,0.8));\n    }\n    html { scroll-behavior: smooth; }\n    body {\n      font-family: 'Roboto', sans-serif;\n      margin: 0;\n      background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1));\n      line-height: 1.6;\n    }\n    header {\n      text-align: center;\n      padding: 30px 20px;\n    }\n    header h1 { margin: 0; font-size: 2.5rem; }\n    header p { margin: 5px 0 0; font-size: 1.2rem; font-weight: 300; }\n    nav {\n      position: sticky;\n      top: 0;\n      z-index: 100;\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      padding: 10px 0;\n    }\n    nav a { margin: 0 15px; font-size: 1rem; padding-bottom: 5px; }\n    section { padding: 40px 0; }\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 0 20px;\n    }\n    .card {\n      border-radius: 5px;\n      border: 1px solid rgba(0,191,255,0.3);\n      padding: 20px;\n      margin-bottom: 20px;\n      transition: transform 0.3s ease;\n    }\n    .card:hover { transform: translateY(-3px); }\n    .card h2 { margin-top: 0; font-size: 1.5rem; }\n    .dashboard-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      grid-gap: 20px;\n    }\n    .input-group { margin-bottom: 15px; }\n    .input-group label { display: block; margin-bottom: 5px; font-weight: 500; }\n    .input-group input[type=\"text\"],\n    .input-group input[type=\"number\"],\n    .input-group input[type=\"datetime-local\"],\n    .input-group input[type=\"email\"],\n    .input-group textarea {\n      width: 100%;\n      padding: 8px;\n      border: 1px solid rgba(0,191,255,0.5);\n      border-radius: 4px;\n      background: transparent;\n      box-sizing: border-box;\n    }\n    .input-group textarea { resize: vertical; min-height: 60px; }\n    .input-group input[type=\"checkbox\"] { margin-right: 5px; }\n    .update-btn {\n      background: rgba(0,191,255,0.8);\n      color: #000000;\n      border: none;\n      padding: 10px 15px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 1rem;\n      transition: background 0.3s;\n    }\n    .update-btn:hover { background: rgba(0,191,255,1); }\n    canvas { width: 100% !important; height: 300px !important; }\n    .instructions { font-size: 0.9rem; margin-top: 10px; }\n    footer {\n      text-align: center;\n      padding: 10px 0;\n      margin-top: 20px;\n    }\n    /* Subscription Card with slow transitional glow */\n    .subscription-card {\n      animation: slowTransition 30s infinite ease-in-out;\n    }\n    @keyframes slowTransition {\n      0%   { background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1)); }\n      50%  { background: linear-gradient(135deg, rgba(212,228,247,0.15), rgba(192,220,230,0.15)); }\n      100% { background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1)); }\n    }\n    /* Modal Styles for Subscription Form */\n    .modal {\n      display: none;\n      position: fixed;\n      z-index: 200;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n      background-color: rgba(0, 0, 0, 0.5);\n    }\n    .modal-content {\n      background: transparent;\n      margin: 10% auto;\n      padding: 20px;\n      border-radius: 5px;\n      max-width: 500px;\n      position: relative;\n      border: 2px solid rgba(0,191,255,0.7);\n      animation: modalFade 1s ease-in-out;\n    }\n    @keyframes modalFade {\n      from { opacity: 0; transform: scale(0.9); }\n      to { opacity: 1; transform: scale(1); }\n    }\n    .modal-content h2 { margin-top: 0; }\n    .close {\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      color: rgba(0,0,0,0.7);\n      font-size: 28px;\n      font-weight: bold;\n      cursor: pointer;\n      transition: color 0.3s;\n    }\n    .close:hover { color: #000000; }\n    /* Media queries for low-end devices */\n    @media (max-width: 600px) {\n      header h1 { font-size: 2rem; }\n      nav a { font-size: 0.9rem; margin: 0 10px; }\n      .card { padding: 15px; }\n    }\n  </style>\n  <!-- Chart.js Library -->\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n  <!-- Header -->\n  <header>\n    <h1>@DONUTZ.AI - iBuilder</h1>\n    <p>Your Practical, Self‑Enhancing Business Dashboard</p>\n  </header>\n  \n  <!-- Navigation -->\n  <nav>\n    <a href=\"#overview\">Overview</a>\n    <a href=\"#dashboard\">Dashboard</a>\n    <a href=\"#calendar\">Calendar</a>\n    <a href=\"#subscribe\">Subscribe</a>\n  </nav>\n  \n  <!-- Section: Overview -->\n  <section id=\"overview\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Welcome</h2>\n        <p>\n          iBuilder delivers data‑driven business intelligence with advanced metrics and visual insights. Our platform provides real‑time inputs and multidimensional charts to empower strategic decisions.\n        </p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Dashboard -->\n  <section id=\"dashboard\">\n    <div class=\"container\">\n      <!-- Real‑Time Data Input Panel -->\n      <div class=\"card\">\n        <h2>Real‑Time Data Input</h2>\n        <!-- Core Metrics -->\n        <div class=\"input-group\">\n          <label for=\"revenueInput\">Revenue ($)</label>\n          <input type=\"number\" id=\"revenueInput\" placeholder=\"Revenue value\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"expensesInput\">Expenses ($)</label>\n          <input type=\"number\" id=\"expensesInput\" placeholder=\"Expenses value\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"logisticsInput\">Logistics Score (0–100)</label>\n          <input type=\"number\" id=\"logisticsInput\" placeholder=\"Logistics score\" min=\"0\" max=\"100\" />\n        </div>\n        <!-- Advanced Metrics -->\n        <h3>Advanced Metrics</h3>\n        <div class=\"input-group\">\n          <label for=\"cacInput\">Customer Acquisition Cost (CAC) ($)</label>\n          <input type=\"number\" id=\"cacInput\" placeholder=\"CAC\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"clvInput\">Customer Lifetime Value (CLV) ($)</label>\n          <input type=\"number\" id=\"clvInput\" placeholder=\"CLV\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"marketingSpendInput\">Marketing Spend ($)</label>\n          <input type=\"number\" id=\"marketingSpendInput\" placeholder=\"Marketing Spend\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"conversionRateInput\">Sales Conversion Rate (%)</label>\n          <input type=\"number\" id=\"conversionRateInput\" placeholder=\"Conversion Rate\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"inventoryTurnoverInput\">Inventory Turnover Ratio</label>\n          <input type=\"number\" id=\"inventoryTurnoverInput\" placeholder=\"Inventory Turnover\" step=\"0.1\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"employeeProductivityInput\">Employee Productivity (units/employee)</label>\n          <input type=\"number\" id=\"employeeProductivityInput\" placeholder=\"Employee Productivity\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"marketShareInput\">Market Share (%)</label>\n          <input type=\"number\" id=\"marketShareInput\" placeholder=\"Market Share\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"roiInput\">ROI (%)</label>\n          <input type=\"number\" id=\"roiInput\" placeholder=\"ROI\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"profitMarginInput\">Profit Margin (%)</label>\n          <input type=\"number\" id=\"profitMarginInput\" placeholder=\"Profit Margin\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"operatingExpensesInput\">Operating Expenses ($)</label>\n          <input type=\"number\" id=\"operatingExpensesInput\" placeholder=\"Operating Expenses\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"debtEquityInput\">Debt-to-Equity Ratio</label>\n          <input type=\"number\" id=\"debtEquityInput\" placeholder=\"Debt/Equity Ratio\" step=\"0.01\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"growthRateInput\">Growth Rate (%)</label>\n          <input type=\"number\" id=\"growthRateInput\" placeholder=\"Growth Rate\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"cashFlowInput\">Cash Flow ($)</label>\n          <input type=\"number\" id=\"cashFlowInput\" placeholder=\"Cash Flow\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"profitPerEmployeeInput\">Profit per Employee ($)</label>\n          <input type=\"number\" id=\"profitPerEmployeeInput\" placeholder=\"Profit per Employee\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"efficiencyScoreInput\">Overall Efficiency Score</label>\n          <input type=\"number\" id=\"efficiencyScoreInput\" placeholder=\"Efficiency Score\" />\n        </div>\n        <button class=\"update-btn\" onclick=\"updateDashboard()\">Update Dashboard</button>\n      </div>\n      \n      <!-- Analytics Charts Grid -->\n      <div class=\"dashboard-grid\">\n        <!-- Financial Overview: Pie Chart (Revenue, Expenses, Profit) -->\n        <div class=\"card\">\n          <h2>Financial Overview</h2>\n          <canvas id=\"financialChart\"></canvas>\n        </div>\n        <!-- Revenue vs. Expenses: Bar Chart (Revenue, Expenses, Profit, OpEx) -->\n        <div class=\"card\">\n          <h2>Revenue vs. Expenses</h2>\n          <canvas id=\"revExpChart\"></canvas>\n        </div>\n        <!-- Logistics & Operations: Doughnut Chart (Delivery, Procurement, Distribution) -->\n        <div class=\"card\">\n          <h2>Logistics & Operations</h2>\n          <canvas id=\"logisticsChart\"></canvas>\n        </div>\n        <!-- Business Structure: Radar Chart (6 Axes) -->\n        <div class=\"card\">\n          <h2>Business Structure</h2>\n          <canvas id=\"structureChart\"></canvas>\n        </div>\n        <!-- Real‑Time News Trends: Bar Chart (General & Business) -->\n        <div class=\"card\">\n          <h2>Real‑Time News Trends</h2>\n          <canvas id=\"newsChart\"></canvas>\n          <p class=\"instructions\">Articles published per hour.</p>\n        </div>\n        <!-- Revenue Trend Over Time: Line Chart with Dual Y‑Axes -->\n        <div class=\"card\">\n          <h2>Revenue Trend Over Time</h2>\n          <canvas id=\"revenueTrendChart\"></canvas>\n        </div>\n        <!-- Expense vs. Revenue Correlation: Scatter Plot with Dual X‑Axes -->\n        <div class=\"card\">\n          <h2>Expense vs. Revenue Correlation</h2>\n          <canvas id=\"correlationChart\"></canvas>\n        </div>\n        <!-- Advanced Business Metrics: Bubble Chart (8 Data Points) -->\n        <div class=\"card\">\n          <h2>Advanced Business Metrics</h2>\n          <canvas id=\"bubbleChart\"></canvas>\n        </div>\n        <!-- Aggregated Advanced Metrics: Bar Chart (16 Variables) -->\n        <div class=\"card\">\n          <h2>Aggregated Advanced Metrics</h2>\n          <canvas id=\"advancedMetricsChart\"></canvas>\n        </div>\n        <!-- Balanced Metrics Comparison: Multi‑Line Chart (5 Datasets) -->\n        <div class=\"card\">\n          <h2>Balanced Metrics Comparison</h2>\n          <canvas id=\"balancedComparisonChart\"></canvas>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Export Insights -->\n  <section id=\"export\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Export Insights</h2>\n        <p>Select a format to export the current dashboard data and visualizations:</p>\n        <button class=\"update-btn\" onclick=\"exportCSV()\">Export as CSV</button>\n        <button class=\"update-btn\" onclick=\"exportPDF()\">Export as PDF</button>\n        <button class=\"update-btn\" onclick=\"exportImage('png')\">Export as PNG</button>\n        <button class=\"update-btn\" onclick=\"exportImage('jpg')\">Export as JPG</button>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Calendar -->\n  <section id=\"calendar\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Add Event to Calendar</h2>\n        <div class=\"input-group\">\n          <label for=\"eventTitle\">Event Title</label>\n          <input type=\"text\" id=\"eventTitle\" placeholder=\"Quarterly Review\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventDateTime\">Event Date &amp; Time</label>\n          <input type=\"datetime-local\" id=\"eventDateTime\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventLocation\">Location</label>\n          <input type=\"text\" id=\"eventLocation\" placeholder=\"Conference Room\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventDescription\">Description</label>\n          <textarea id=\"eventDescription\" placeholder=\"Brief description\"></textarea>\n        </div>\n        <div class=\"input-group\">\n          <label>\n            <input type=\"checkbox\" id=\"repeatMonthly\" />\n            Set Monthly Repeat\n          </label>\n        </div>\n        <button class=\"update-btn\" onclick=\"addToCalendar()\">Add to Calendar</button>\n        <p class=\"instructions\">Download and import the event file into your calendar app.</p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Subscribe -->\n  <section id=\"subscribe\">\n    <div class=\"container\">\n      <div class=\"card subscription-card\">\n        <h2>Monthly Subscription</h2>\n        <p>\n          Gain full access to our profit‑tuned dashboard and advanced business tools. Packages range from as low as\n          <strong>$4.99/month</strong> to <strong>$39.99/month</strong>.\n        </p>\n        <button class=\"update-btn\" id=\"openModalBtn\">Subscribe Now</button>\n        <p class=\"instructions\">Click to select your package and provide your details.</p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Subscription Modal Popup -->\n  <div id=\"subscriptionModal\" class=\"modal\">\n    <div class=\"modal-content\">\n      <span class=\"close\">&times;</span>\n      <h2>Subscribe</h2>\n      <form id=\"subscriptionForm\">\n        <div class=\"input-group\">\n          <label for=\"subName\">Your Name</label>\n          <input type=\"text\" id=\"subName\" placeholder=\"Name\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subCompany\">Company Name</label>\n          <input type=\"text\" id=\"subCompany\" placeholder=\"Company\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subPhone\">Phone Number</label>\n          <input type=\"text\" id=\"subPhone\" placeholder=\"Phone\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subEmail\">Email Address</label>\n          <input type=\"email\" id=\"subEmail\" placeholder=\"Email\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subPackage\">Subscription Package</label>\n          <select id=\"subPackage\" required>\n            <option value=\"economy\">Economy - $4.99/month</option>\n            <option value=\"basic\">Basic - $9.99/month</option>\n            <option value=\"standard\">Standard - $14.99/month</option>\n            <option value=\"premium\">Premium - $19.99/month</option>\n            <option value=\"elite\">Elite - $24.99/month</option>\n            <option value=\"ultimate\">Ultimate - $29.99/month</option>\n            <option value=\"enterprise\">Enterprise - $39.99/month</option>\n          </select>\n        </div>\n        <button type=\"submit\" class=\"update-btn\">Submit Subscription</button>\n      </form>\n    </div>\n  </div>\n  \n  <!-- Footer -->\n  <footer>\n    &copy; 2025 @DONUTZ.AI. All rights reserved.\n  </footer>\n  \n  <!-- JavaScript: Enhanced Charts, Calendar, RSS, Modal, Subscription, Export Feature, and Throttled Scroll Handler -->\n  <script>\n    /***** UTILITY FUNCTIONS *****/\n    function randomValue(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    /***** GLOBAL DATA VARIABLES *****/\n    let revenue = randomValue(50000, 200000);\n    let expenses = randomValue(30000, 150000);\n    let logisticsScore = randomValue(50, 100);\n    \n    /***** CHART INSTANCES *****/\n    let financialChart, revExpChart, logisticsChart, structureChart, newsChart;\n    let revenueTrendChart, correlationChart, bubbleChart, advancedMetricsChart, balancedComparisonChart;\n    \n    /***** COLOR PALETTE *****/\n    const colorPalette = [\n      \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#673AB7\", \"#3F51B5\", \n      \"#2196F3\", \"#03A9F4\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \n      \"#8BC34A\", \"#CDDC39\", \"#FFEB3B\", \"#FFC107\", \"#FF9800\", \n      \"#FF5722\", \"#795548\", \"#9E9E9E\", \"#607D8B\"\n    ];\n    \n    /***** CHART INITIALIZATION *****/\n    function initCharts() {\n      // Global tooltip options for advanced interactivity\n      const commonOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            enabled: true,\n            callbacks: {\n              label: function(context) {\n                return context.dataset.label + \": \" + context.formattedValue;\n              },\n              title: function(context) {\n                return \"Data for \" + context[0].label;\n              }\n            }\n          },\n          legend: { display: true, position: 'top' },\n          title: { display: true }\n        }\n      };\n      \n      /* --- Financial Overview Pie Chart --- */\n      // Profit = Revenue minus Expenses (if positive)\n      const profit = revenue > expenses ? revenue - expenses : 0;\n      const ctxFinancial = document.getElementById('financialChart').getContext('2d');\n      financialChart = new Chart(ctxFinancial, {\n        type: 'pie',\n        data: {\n          labels: ['Revenue', 'Expenses', 'Profit'],\n          datasets: [{\n            data: [revenue, expenses, profit],\n            backgroundColor: [colorPalette[5], colorPalette[0], colorPalette[6]]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Financial Overview' } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Revenue vs. Expenses Bar Chart --- */\n      // Four bars: Revenue, Expenses, Profit, and Operating Expenses.\n      const opEx = document.getElementById('operatingExpensesInput').value ? parseInt(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000);\n      const ctxRevExp = document.getElementById('revExpChart').getContext('2d');\n      revExpChart = new Chart(ctxRevExp, {\n        type: 'bar',\n        data: {\n          labels: ['Revenue', 'Expenses', 'Profit', 'OpEx'],\n          datasets: [{\n            label: 'USD',\n            data: [revenue, expenses, profit, opEx],\n            backgroundColor: [\n              colorPalette[5], colorPalette[0], colorPalette[6], colorPalette[14]\n            ],\n            borderColor: [\n              colorPalette[5], colorPalette[0], colorPalette[6], colorPalette[14]\n            ],\n            borderWidth: 2\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Revenue vs. Expenses' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'USD' } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Logistics & Operations Doughnut Chart --- */\n      // Three segments: Delivery, Procurement, Distribution.\n      let procurement = randomValue(10, Math.min(40, 100 - logisticsScore));\n      let distribution = 100 - logisticsScore - procurement;\n      if(distribution < 0) distribution = 0;\n      const ctxLogistics = document.getElementById('logisticsChart').getContext('2d');\n      logisticsChart = new Chart(ctxLogistics, {\n        type: 'doughnut',\n        data: {\n          labels: ['Delivery', 'Procurement', 'Distribution'],\n          datasets: [{\n            data: [logisticsScore, procurement, distribution],\n            backgroundColor: [colorPalette[2], colorPalette[3], colorPalette[7]]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Logistics & Operations' } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Business Structure Radar Chart --- */\n      // Six axes: Sales, Marketing, Operations, R&D, Innovation, Customer Service.\n      const ctxStructure = document.getElementById('structureChart').getContext('2d');\n      structureChart = new Chart(ctxStructure, {\n        type: 'radar',\n        data: {\n          labels: ['Sales', 'Marketing', 'Operations', 'R&D', 'Innovation', 'Customer Service'],\n          datasets: [{\n            label: 'Dept Allocation',\n            data: Array.from({ length: 6 }, () => randomValue(10, 50)),\n            backgroundColor: 'rgba(0,191,255,0.3)',\n            borderColor: colorPalette[5],\n            pointBackgroundColor: colorPalette[5]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Business Structure' } },\n          scales: { r: { beginAtZero: true, title: { display: true, text: 'Score' } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Real‑Time News Trends Bar Chart --- */\n      // Two datasets: General News and Business News.\n      const generalNewsData = Array.from({ length: 24 }, () => randomValue(0, 10));\n      const businessNewsData = Array.from({ length: 24 }, () => randomValue(0, 5));\n      const ctxNews = document.getElementById('newsChart').getContext('2d');\n      newsChart = new Chart(ctxNews, {\n        type: 'bar',\n        data: {\n          labels: Array.from({ length: 24 }, (_, i) => i.toString()),\n          datasets: [\n            {\n              label: 'General News',\n              data: generalNewsData,\n              backgroundColor: Array.from({ length: 24 }, (_, i) => colorPalette[i % colorPalette.length]),\n              borderColor: Array.from({ length: 24 }, (_, i) => colorPalette[i % colorPalette.length]),\n              borderWidth: 2\n            },\n            {\n              label: 'Business News',\n              data: businessNewsData,\n              backgroundColor: Array.from({ length: 24 }, (_, i) => colorPalette[(i + 5) % colorPalette.length]),\n              borderColor: Array.from({ length: 24 }, (_, i) => colorPalette[(i + 5) % colorPalette.length]),\n              borderWidth: 2\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Real‑Time News Trends' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'Articles' }, ticks: { stepSize: 1 } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Revenue Trend Over Time Line Chart with Dual Y‑Axes --- */\n      // Two lines: Revenue Trend and Profit Trend. Revenue uses left y‑axis; Profit uses right y‑axis.\n      let revenueTrendData = Array.from({ length: 12 }, () => randomValue(50000, 200000));\n      let profitTrendData = Array.from({ length: 12 }, () => randomValue(20000, 100000));\n      const ctxRevenueTrend = document.getElementById('revenueTrendChart').getContext('2d');\n      revenueTrendChart = new Chart(ctxRevenueTrend, {\n        type: 'line',\n        data: {\n          labels: ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'],\n          datasets: [\n            {\n              label: 'Revenue Trend',\n              data: revenueTrendData,\n              fill: false,\n              // Dynamic vibrant color segments for Revenue\n              borderColor: function(ctx) {\n                const revenueSegmentColors = [\"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ffeb3b\", \"#ffc107\", \"#ff9800\", \"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\", \"#2196f3\"];\n                return revenueSegmentColors[ctx.p0DataIndex % revenueSegmentColors.length];\n              },\n              yAxisID: 'y',\n              tension: 0.3\n            },\n            {\n              label: 'Profit Trend',\n              data: profitTrendData,\n              fill: false,\n              borderColor: colorPalette[6],\n              yAxisID: 'y1',\n              tension: 0.3\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Revenue Trend Over Time' } },\n          scales: {\n            y: {\n              type: 'linear',\n              position: 'left',\n              beginAtZero: true,\n              title: { display: true, text: 'Revenue ($)' },\n              grid: { color: 'rgba(76,175,80,0.2)' }\n            },\n            y1: {\n              type: 'linear',\n              position: 'right',\n              beginAtZero: true,\n              title: { display: true, text: 'Profit ($)' },\n              grid: { drawOnChartArea: false },\n              ticks: { color: colorPalette[6] }\n            }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Expense vs. Revenue Correlation Scatter Plot with Dual X‑Axes --- */\n      // Two datasets: one for Expense vs Revenue (primary x‑axis) and one for Marketing Spend vs Revenue (secondary x‑axis).\n      let scatterData = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(30000, 150000)\n      }));\n      let marketingScatterData = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(1000, 10000)\n      }));\n      const ctxCorrelation = document.getElementById('correlationChart').getContext('2d');\n      correlationChart = new Chart(ctxCorrelation, {\n        type: 'scatter',\n        data: {\n          datasets: [\n            {\n              label: 'Expense vs Revenue',\n              data: scatterData,\n              backgroundColor: colorPalette[0],\n              xAxisID: 'x'\n            },\n            {\n              label: 'Marketing Spend vs Revenue',\n              data: marketingScatterData,\n              backgroundColor: colorPalette[14],\n              xAxisID: 'x1'\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Expense vs. Revenue Correlation' } },\n          scales: {\n            x: {\n              type: 'linear',\n              position: 'bottom',\n              title: { display: true, text: 'Revenue ($)' },\n              grid: { color: 'rgba(76,175,80,0.2)' }\n            },\n            x1: {\n              type: 'linear',\n              position: 'top',\n              title: { display: true, text: 'Alternate Revenue Scale ($)' },\n              grid: { drawOnChartArea: false },\n              ticks: { color: colorPalette[14] }\n            },\n            y: {\n              title: { display: true, text: 'Value ($)' }\n            }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Business Metrics Bubble Chart --- */\n      // 8 data points with varied, popping colors.\n      let bubbleData = Array.from({ length: 8 }, () => ({\n        x: randomValue(10, 100),\n        y: randomValue(10, 100),\n        r: randomValue(5, 20)\n      }));\n      const ctxBubble = document.getElementById('bubbleChart').getContext('2d');\n      bubbleChart = new Chart(ctxBubble, {\n        type: 'bubble',\n        data: {\n          datasets: [{\n            label: 'Business Metrics',\n            data: bubbleData,\n            backgroundColor: Array.from({ length: 8 }, (_, i) => colorPalette[i % colorPalette.length])\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Business Metrics Bubble Chart' } },\n          scales: {\n            x: { title: { display: true, text: 'Metric X' } },\n            y: { title: { display: true, text: 'Metric Y' } }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Aggregated Advanced Metrics Bar Chart --- */\n      // 16 metrics (16th is \"Cust Sat\")\n      const ctxAdvanced = document.getElementById('advancedMetricsChart').getContext('2d');\n      advancedMetricsChart = new Chart(ctxAdvanced, {\n        type: 'bar',\n        data: {\n          labels: [\"CAC\", \"CLV\", \"Mkt Spend\", \"Conv Rate\", \"Inv Turnover\", \"Emp Prod\", \"Mkt Share\", \"ROI\", \"Profit Margin\", \"Op Ex\", \"Debt/Equity\", \"Growth\", \"Cash Flow\", \"Profit/Emp\", \"Efficiency\", \"Cust Sat\"],\n          datasets: [{\n            label: \"Advanced Metrics\",\n            data: Array.from({ length: 16 }, () => randomValue(1, 100)),\n            backgroundColor: Array.from({ length: 16 }, (_, i) => colorPalette[i % colorPalette.length]),\n            borderColor: Array.from({ length: 16 }, (_, i) => colorPalette[i % colorPalette.length]),\n            borderWidth: 2\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Aggregated Advanced Metrics' } },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Balanced Metrics Comparison (Multi‑Line Chart) --- */\n      // Five datasets: Revenue, Expenses, Marketing Spend, Profit Margin, Customer Satisfaction.\n      const ctxBalanced = document.getElementById('balancedComparisonChart').getContext('2d');\n      balancedComparisonChart = new Chart(ctxBalanced, {\n        type: 'line',\n        data: {\n          labels: ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'],\n          datasets: [\n            {\n              label: 'Revenue',\n              data: Array.from({length: 12}, () => randomValue(50000,200000)),\n              borderColor: colorPalette[5],\n              backgroundColor: 'rgba(76,175,80,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Expenses',\n              data: Array.from({length: 12}, () => randomValue(30000,150000)),\n              borderColor: colorPalette[0],\n              backgroundColor: 'rgba(244,67,54,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Marketing Spend',\n              data: Array.from({length: 12}, () => randomValue(1000,10000)),\n              borderColor: colorPalette[14],\n              backgroundColor: 'rgba(255,152,0,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Profit Margin',\n              data: Array.from({length: 12}, () => randomValue(5,50)),\n              borderColor: colorPalette[2],\n              backgroundColor: 'rgba(156,39,176,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Cust Sat',\n              data: Array.from({length: 12}, () => randomValue(1,100)),\n              borderColor: colorPalette[7],\n              backgroundColor: 'rgba(0,188,212,0.2)',\n              tension: 0.3\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Balanced Metrics Comparison' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'Value' } } },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n    }\n    \n    /***** DASHBOARD UPDATE FUNCTIONS *****/\n    function updateCharts() {\n      // Update computed profit\n      const profit = revenue > expenses ? revenue - expenses : 0;\n      financialChart.data.datasets[0].data = [revenue, expenses, profit];\n      financialChart.update();\n      \n      revExpChart.data.datasets[0].data = [revenue, expenses, profit, (document.getElementById('operatingExpensesInput').value ? parseInt(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000))];\n      revExpChart.update();\n      \n      logisticsChart.data.datasets[0].data = [logisticsScore, randomValue(10, Math.min(40, 100 - logisticsScore)), Math.max(0, 100 - logisticsScore - randomValue(10, Math.min(40, 100 - logisticsScore)))];\n      logisticsChart.update();\n      \n      structureChart.data.datasets[0].data = Array.from({ length: 6 }, () => randomValue(10, 50));\n      structureChart.update();\n      \n      revenueTrendChart.data.datasets[0].data = Array.from({ length: 12 }, () => randomValue(50000, 200000));\n      revenueTrendChart.data.datasets[1].data = Array.from({ length: 12 }, () => randomValue(20000, 100000));\n      revenueTrendChart.update();\n      \n      correlationChart.data.datasets[0].data = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(30000, 150000)\n      }));\n      correlationChart.data.datasets[1].data = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(1000, 10000)\n      }));\n      correlationChart.update();\n      \n      bubbleChart.data.datasets[0].data = Array.from({ length: 8 }, () => ({\n        x: randomValue(10, 100),\n        y: randomValue(10, 100),\n        r: randomValue(5, 20)\n      }));\n      bubbleChart.update();\n    }\n    \n    function updateDashboard() {\n      // Core metrics\n      revenue = document.getElementById('revenueInput').value ? parseInt(document.getElementById('revenueInput').value) : randomValue(50000, 200000);\n      expenses = document.getElementById('expensesInput').value ? parseInt(document.getElementById('expensesInput').value) : randomValue(30000, 150000);\n      logisticsScore = document.getElementById('logisticsInput').value ? parseInt(document.getElementById('logisticsInput').value) : randomValue(50, 100);\n      \n      // Advanced metrics\n      var cac = document.getElementById('cacInput').value ? parseFloat(document.getElementById('cacInput').value) : randomValue(10, 200);\n      var clv = document.getElementById('clvInput').value ? parseFloat(document.getElementById('clvInput').value) : randomValue(100, 2000);\n      var marketingSpend = document.getElementById('marketingSpendInput').value ? parseFloat(document.getElementById('marketingSpendInput').value) : randomValue(1000, 10000);\n      var conversionRate = document.getElementById('conversionRateInput').value ? parseFloat(document.getElementById('conversionRateInput').value) : randomValue(1, 20);\n      var inventoryTurnover = document.getElementById('inventoryTurnoverInput').value ? parseFloat(document.getElementById('inventoryTurnoverInput').value) : randomValue(1, 10);\n      var employeeProductivity = document.getElementById('employeeProductivityInput').value ? parseFloat(document.getElementById('employeeProductivityInput').value) : randomValue(10, 100);\n      var marketShare = document.getElementById('marketShareInput').value ? parseFloat(document.getElementById('marketShareInput').value) : randomValue(1, 50);\n      var roi = document.getElementById('roiInput').value ? parseFloat(document.getElementById('roiInput').value) : randomValue(0, 100);\n      var profitMargin = document.getElementById('profitMarginInput').value ? parseFloat(document.getElementById('profitMarginInput').value) : randomValue(5, 50);\n      var operatingExpenses = document.getElementById('operatingExpensesInput').value ? parseFloat(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000);\n      var debtEquity = document.getElementById('debtEquityInput').value ? parseFloat(document.getElementById('debtEquityInput').value) : (Math.random() * 1.9 + 0.1).toFixed(2);\n      var growthRate = document.getElementById('growthRateInput').value ? parseFloat(document.getElementById('growthRateInput').value) : randomValue(0, 30);\n      var cashFlow = document.getElementById('cashFlowInput').value ? parseFloat(document.getElementById('cashFlowInput').value) : randomValue(5000, 50000);\n      var profitPerEmployee = document.getElementById('profitPerEmployeeInput').value ? parseFloat(document.getElementById('profitPerEmployeeInput').value) : randomValue(1000, 10000);\n      var efficiencyScore = document.getElementById('efficiencyScoreInput').value ? parseFloat(document.getElementById('efficiencyScoreInput').value) : randomValue(1, 100);\n      \n      // Update Advanced Metrics Chart with 16 variables (the 16th is \"Cust Sat\")\n      var advancedValues = [cac, clv, marketingSpend, conversionRate, inventoryTurnover, employeeProductivity, marketShare, roi, profitMargin, operatingExpenses, debtEquity, growthRate, cashFlow, profitPerEmployee, efficiencyScore, randomValue(1,100)];\n      advancedMetricsChart.data.datasets[0].data = advancedValues;\n      advancedMetricsChart.update();\n      \n      updateCharts();\n      \n      // Update Balanced Metrics Comparison (Multi‑Line Chart)\n      balancedComparisonChart.data.datasets[0].data = Array.from({length: 12}, () => randomValue(50000,200000));\n      balancedComparisonChart.data.datasets[1].data = Array.from({length: 12}, () => randomValue(30000,150000));\n      balancedComparisonChart.data.datasets[2].data = Array.from({length: 12}, () => randomValue(1000,10000));\n      balancedComparisonChart.data.datasets[3].data = Array.from({length: 12}, () => randomValue(5,50));\n      balancedComparisonChart.data.datasets[4].data = Array.from({length: 12}, () => randomValue(1,100));\n      balancedComparisonChart.update();\n    }\n    \n    /***** REAL‑TIME RSS FEED FUNCTIONALITY *****/\n    function fetchNewsData() {\n      const rssUrl = \"https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml\";\n      const proxyUrl = \"https://api.allorigins.hexocode.repl.co/get?disableCache=true&url=\" + encodeURIComponent(rssUrl);\n      fetch(proxyUrl)\n        .then(response => response.json())\n        .then(data => {\n          const parser = new DOMParser();\n          const xmlDoc = parser.parseFromString(data.contents, \"text/xml\");\n          const items = xmlDoc.querySelectorAll(\"item\");\n          const hoursCount = new Array(24).fill(0);\n          items.forEach(item => {\n            const pubDateText = item.querySelector(\"pubDate\").textContent;\n            const pubDate = new Date(pubDateText);\n            const hour = pubDate.getHours();\n            hoursCount[hour]++;\n          });\n          newsChart.data.datasets[0].data = hoursCount;\n          newsChart.update();\n        })\n        .catch(error => console.error(\"Error fetching RSS feed:\", error));\n    }\n    \n    /***** CALENDAR INTEGRATION *****/\n    function addToCalendar() {\n      const title = document.getElementById('eventTitle').value.trim();\n      const dtInput = document.getElementById('eventDateTime').value;\n      const location = document.getElementById('eventLocation').value.trim();\n      const description = document.getElementById('eventDescription').value.trim();\n      const repeat = document.getElementById('repeatMonthly').checked;\n      \n      if (!title || !dtInput) {\n        alert(\"Please provide both an event title and date/time.\");\n        return;\n      }\n      \n      const eventDate = new Date(dtInput);\n      function pad(n) { return n < 10 ? '0' + n : n; }\n      const dtStart = `${eventDate.getUTCFullYear()}${pad(eventDate.getUTCMonth()+1)}${pad(eventDate.getUTCDate())}T${pad(eventDate.getUTCHours())}${pad(eventDate.getUTCMinutes())}${pad(eventDate.getUTCSeconds())}Z`;\n      \n      let icsContent = \"BEGIN:VCALENDAR\\r\\nVERSION:2.0\\r\\nBEGIN:VEVENT\\r\\n\";\n      const uid = Date.now() + \"@\" + window.location.hostname;\n      icsContent += \"UID:\" + uid + \"\\r\\n\";\n      \n      const now = new Date();\n      const dtStamp = `${now.getUTCFullYear()}${pad(now.getUTCMonth()+1)}${pad(now.getUTCDate())}T${pad(now.getUTCHours())}${pad(now.getUTCMinutes())}${pad(now.getUTCSeconds())}Z`;\n      icsContent += \"DTSTAMP:\" + dtStamp + \"\\r\\n\";\n      \n      icsContent += \"DTSTART:\" + dtStart + \"\\r\\n\";\n      icsContent += \"SUMMARY:\" + title + \"\\r\\n\";\n      if (location) { icsContent += \"LOCATION:\" + location + \"\\r\\n\"; }\n      if (description) { icsContent += \"DESCRIPTION:\" + description + \"\\r\\n\"; }\n      if (repeat) { icsContent += \"RRULE:FREQ=MONTHLY;INTERVAL=1\\r\\n\"; }\n      icsContent += \"END:VEVENT\\r\\nEND:VCALENDAR\";\n      \n      const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = \"event.ics\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n    \n    /***** MODAL FUNCTIONALITY FOR SUBSCRIPTION FORM *****/\n    var modal = document.getElementById(\"subscriptionModal\");\n    var openModalBtn = document.getElementById(\"openModalBtn\");\n    var closeSpan = document.getElementsByClassName(\"close\")[0];\n    \n    openModalBtn.onclick = function() { modal.style.display = \"block\"; }\n    closeSpan.onclick = function() { modal.style.display = \"none\"; }\n    window.onclick = function(event) { if (event.target == modal) { modal.style.display = \"none\"; } }\n    \n    document.getElementById(\"subscriptionForm\").addEventListener(\"submit\", function(e){\n      e.preventDefault();\n      var name = document.getElementById(\"subName\").value;\n      var company = document.getElementById(\"subCompany\").value;\n      var phone = document.getElementById(\"subPhone\").value;\n      var email = document.getElementById(\"subEmail\").value;\n      var subscriptionPackage = document.getElementById(\"subPackage\").value;\n      // Build a mailto link to send subscription details to iBuilder@dascient.com\n      var mailtoLink = \"mailto:iBuilder@dascient.com\" +\n                       \"?subject=\" + encodeURIComponent(\"New Subscription Request\") +\n                       \"&body=\" + encodeURIComponent(\"Name: \" + name + \"\\nCompany: \" + company + \"\\nPhone: \" + phone + \"\\nEmail: \" + email + \"\\nPackage: \" + subscriptionPackage);\n      window.location.href = mailtoLink;\n      modal.style.display = \"none\";\n    });\n    \n    /***** EXPORT FEATURE *****/\n    function exportCSV() {\n      let csvContent = \"data:text/csv;charset=utf-8,Metric,Value\\n\";\n      const inputs = [\n        { label: \"Revenue\", id: \"revenueInput\" },\n        { label: \"Expenses\", id: \"expensesInput\" },\n        { label: \"Logistics Score\", id: \"logisticsInput\" },\n        { label: \"CAC\", id: \"cacInput\" },\n        { label: \"CLV\", id: \"clvInput\" },\n        { label: \"Marketing Spend\", id: \"marketingSpendInput\" },\n        { label: \"Conversion Rate\", id: \"conversionRateInput\" },\n        { label: \"Inventory Turnover\", id: \"inventoryTurnoverInput\" },\n        { label: \"Employee Productivity\", id: \"employeeProductivityInput\" },\n        { label: \"Market Share\", id: \"marketShareInput\" },\n        { label: \"ROI\", id: \"roiInput\" },\n        { label: \"Profit Margin\", id: \"profitMarginInput\" },\n        { label: \"Operating Expenses\", id: \"operatingExpensesInput\" },\n        { label: \"Debt/Equity\", id: \"debtEquityInput\" },\n        { label: \"Growth Rate\", id: \"growthRateInput\" },\n        { label: \"Cash Flow\", id: \"cashFlowInput\" },\n        { label: \"Profit per Employee\", id: \"profitPerEmployeeInput\" },\n        { label: \"Efficiency Score\", id: \"efficiencyScoreInput\" }\n      ];\n      inputs.forEach(item => {\n        const value = document.getElementById(item.id).value || \"\";\n        csvContent += `${item.label},${value}\\n`;\n      });\n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement(\"a\");\n      link.setAttribute(\"href\", encodedUri);\n      link.setAttribute(\"download\", \"dashboard_data.csv\");\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n    \n    function exportPDF() {\n      window.print();\n    }\n    \n    function exportImage(format) {\n      html2canvas(document.querySelector('.container')).then(canvas => {\n        let image = canvas.toDataURL(\"image/\" + format);\n        let link = document.createElement('a');\n        link.href = image;\n        link.download = \"dashboard_export.\" + format;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      });\n    }\n    \n    /***** ACTIVE NAVIGATION HIGHLIGHT WITH THROTTLING *****/\n    function throttle(callback, delay) {\n      let lastCall = 0;\n      return function() {\n        const now = Date.now();\n        if (now - lastCall < delay) return;\n        lastCall = now;\n        callback();\n      };\n    }\n    const sections = document.querySelectorAll(\"section\");\n    const navLinks = document.querySelectorAll(\"nav a\");\n    window.addEventListener(\"scroll\", throttle(() => {\n      let current = \"\";\n      sections.forEach(section => {\n        const sectionTop = section.offsetTop;\n        if (pageYOffset >= sectionTop - 60) { current = section.getAttribute(\"id\"); }\n      });\n      navLinks.forEach(link => {\n        link.classList.remove(\"active\");\n        if (link.getAttribute(\"href\").substring(1) === current) { link.classList.add(\"active\"); }\n      });\n    }, 100));\n    \n    /***** INITIALIZATION *****/\n    window.onload = () => {\n      initCharts();\n      updateCharts();\n      fetchNewsData();\n      // Auto-update analytics every 30 seconds\n      setInterval(() => {\n        revenue = randomValue(50000, 200000);\n        expenses = randomValue(30000, 150000);\n        logisticsScore = randomValue(50, 100);\n        updateDashboard();\n      }, 30000);\n      // Refresh news feed every 60 seconds\n      setInterval(fetchNewsData, 60000);\n    };\n  </script>\n</body>\n</html>\n'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T05:20:59.053712Z","iopub.execute_input":"2025-02-11T05:20:59.054071Z","iopub.status.idle":"2025-02-11T05:20:59.075971Z","shell.execute_reply.started":"2025-02-11T05:20:59.054022Z","shell.execute_reply":"2025-02-11T05:20:59.074521Z"}},"outputs":[],"execution_count":1},{"id":"95fa0959-1cd5-49b4-b6bd-4d4acbce814a","cell_type":"markdown","source":"## Analysis of the `<head>` Section\n\nIn the `<head>` section, several key aspects can be noted:\n\n- **Meta Tags:** These ensure proper character encoding (`UTF-8`), compatibility with Internet Explorer (`IE=edge`), and a responsive viewport setting.\n\n- **External Resources:**\n  - **Normalize.css** is included to reset browser styling differences.\n  - **Google Fonts** provides the `Roboto` font to enhance typographic quality.\n  - **html2canvas** is loaded to enable the export of dashboard content as images (PNG or JPG).\n  - **Chart.js** is loaded to create interactive, animated charts.\n\n- **Internal CSS:**\n  - The CSS sets backgrounds to transparent, enabling layered visual effects.\n  - It applies a **glowy effect** to text using `text-shadow`.\n  - Media queries ensure that the design is responsive on low‑end devices.\n  - Custom animations (e.g., modal fade-in, subscription card glow) enhance user interactivity.","metadata":{}},{"id":"77387c8d-ea59-41bc-927a-f2a8616564df","cell_type":"markdown","source":"## Breakdown of the `<body>` and Its Functional Sections\n\nThe `<body>` is divided into several sections:\n\n1. **Header and Navigation:**\n   - Presents the dashboard title and a tagline.\n   - Implements a sticky navigation bar with smooth scroll behavior and active link highlighting.\n\n2. **Overview Section:**\n   - Offers an introductory message about the dashboard’s purpose and capabilities.\n\n3. **Dashboard Section:**\n   - Contains a **Data Input Panel** for core and advanced metrics.\n   - Displays a **grid of cards** that each host a different Chart.js chart. These charts dynamically update based on the input values or randomized demo data.\n\n4. **Export Section:**\n   - Provides buttons for exporting dashboard data in various formats (CSV, PDF, PNG, JPG).\n\n5. **Calendar Section:**\n   - Allows users to schedule events and export them as `.ics` files, facilitating calendar integration.\n\n6. **Subscription Section:**\n   - Displays subscription options and uses a modal popup for collecting user subscription details, which are then sent via email using a `mailto` link.","metadata":{}},{"id":"a0c2a9d6-5801-43ed-bece-44be8509bb3c","cell_type":"markdown","source":"## JavaScript: Driving Interactivity and Dynamic Data\n\nThe JavaScript code is central to the dashboard’s functionality. Key functions include:\n\n- **Utility Functions:** Such as `randomValue(min, max)` to simulate real-time data.\n\n- **Chart Initialization:** The `initCharts()` function sets up multiple Chart.js charts with custom configurations (colors, animations, tooltips, and dual axes where applicable).\n\n- **Data Update Mechanisms:** Functions like `updateCharts()` and `updateDashboard()` refresh the charts based on new or user‑entered data.\n\n- **RSS Feed Integration:** The `fetchNewsData()` function fetches and parses an RSS feed (using a proxy for CORS) to update the real‑time news trends chart.\n\n- **Calendar Integration:** The `addToCalendar()` function builds an `.ics` file from the user‑provided event details, enabling calendar event creation.\n\n- **Modal and Subscription Management:** A modal popup collects subscription data and utilizes a `mailto` link to send the subscription details via email.\n\n- **Export Functionality:** Dedicated functions (`exportCSV()`, `exportPDF()`, and `exportImage(format)`) allow the user to export the dashboard’s current view and data in various formats.\n\n- **Navigation Throttling:** A throttling mechanism ensures that the active state in the navigation bar is updated efficiently as the user scrolls.","metadata":{}},{"id":"e448e757-6b69-4a04-8dc9-3956219d9f39","cell_type":"markdown","source":"## Conclusions\n\nThe iBuilder Dashboard exemplifies a modern, data‑driven business intelligence platform. By combining advanced CSS effects (such as transparent backgrounds and glowy text) with dynamic JavaScript functionality and external libraries (Chart.js, html2canvas, etc.), the dashboard offers a highly interactive and visually engaging user experience. Its modular structure supports scalability and ease of maintenance, making it an excellent case study in building complex web interfaces.\n\nThis notebook has aimed to provide a thorough academic overview and dissection of the code, inviting further exploration and experimentation. The source code, as presented below, is available for further review and interactive display.","metadata":{}},{"id":"f46aa57d-dd29-4253-999e-abe91cb1196f","cell_type":"markdown","source":"## Interactive Display of the HTML Code\n\nWhile Jupyter Notebook is not primarily intended for full HTML rendering of complex interactive pages, the code below demonstrates how the HTML source can be displayed as formatted text within the notebook.","metadata":{}},{"id":"89b29686-7f92-4122-83db-ab780de864fc","cell_type":"code","source":"from IPython.display import display, HTML\n\ndisplay(HTML('<pre>{}</pre>'.format(html_code)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T05:20:59.077475Z","iopub.execute_input":"2025-02-11T05:20:59.077915Z","iopub.status.idle":"2025-02-11T05:20:59.105034Z","shell.execute_reply.started":"2025-02-11T05:20:59.077874Z","shell.execute_reply":"2025-02-11T05:20:59.103387Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<pre>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Ensuring maximum compatibility and responsiveness -->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>@DONUTZ.AI - iBuilder | Ultimate Business Dashboard</title>\n  <!-- Normalize and Google Fonts -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700\" rel=\"stylesheet\" />\n  <!-- html2canvas for export functionality -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\" integrity=\"sha512-6rxz8U7g/2LSS4aQU+oOyoDJ9r3NAFrRZh1gYEPVhfqlT+nxI8fEyW6shkyLHz5i8PTx6OpklphD7vM3T4SwUg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n  <!-- Internal CSS: Fully transparent backgrounds with glowy, vibrant black fonts and outlines -->\n  <style>\n    /* Set non‑text elements to transparent */\n    body, header, nav, section, .container, .card {\n      background: transparent !important;\n    }\n    /* All text and letterings are now black with a vibrant glow */\n    body, h1, h2, h3, h4, h5, h6, p, label, a, button, input, select, textarea {\n      text-shadow: 0 0 5px rgba(0,191,255,0.8), 0 0 10px rgba(0,191,255,0.6);\n      color: #000000;\n    }\n    /* Navigation links glow and hover effects */\n    nav a {\n      border-bottom: 2px solid transparent;\n      transition: color 0.3s, border-bottom 0.3s;\n    }\n    nav a:hover, nav a.active {\n      border-bottom-color: #00bfff;\n    }\n    /* Glowing outlines for canvas elements */\n    canvas {\n      filter: drop-shadow(0 0 10px rgba(0,191,255,0.8));\n    }\n    html { scroll-behavior: smooth; }\n    body {\n      font-family: 'Roboto', sans-serif;\n      margin: 0;\n      background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1));\n      line-height: 1.6;\n    }\n    header {\n      text-align: center;\n      padding: 30px 20px;\n    }\n    header h1 { margin: 0; font-size: 2.5rem; }\n    header p { margin: 5px 0 0; font-size: 1.2rem; font-weight: 300; }\n    nav {\n      position: sticky;\n      top: 0;\n      z-index: 100;\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      padding: 10px 0;\n    }\n    nav a { margin: 0 15px; font-size: 1rem; padding-bottom: 5px; }\n    section { padding: 40px 0; }\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 0 20px;\n    }\n    .card {\n      border-radius: 5px;\n      border: 1px solid rgba(0,191,255,0.3);\n      padding: 20px;\n      margin-bottom: 20px;\n      transition: transform 0.3s ease;\n    }\n    .card:hover { transform: translateY(-3px); }\n    .card h2 { margin-top: 0; font-size: 1.5rem; }\n    .dashboard-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      grid-gap: 20px;\n    }\n    .input-group { margin-bottom: 15px; }\n    .input-group label { display: block; margin-bottom: 5px; font-weight: 500; }\n    .input-group input[type=\"text\"],\n    .input-group input[type=\"number\"],\n    .input-group input[type=\"datetime-local\"],\n    .input-group input[type=\"email\"],\n    .input-group textarea {\n      width: 100%;\n      padding: 8px;\n      border: 1px solid rgba(0,191,255,0.5);\n      border-radius: 4px;\n      background: transparent;\n      box-sizing: border-box;\n    }\n    .input-group textarea { resize: vertical; min-height: 60px; }\n    .input-group input[type=\"checkbox\"] { margin-right: 5px; }\n    .update-btn {\n      background: rgba(0,191,255,0.8);\n      color: #000000;\n      border: none;\n      padding: 10px 15px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 1rem;\n      transition: background 0.3s;\n    }\n    .update-btn:hover { background: rgba(0,191,255,1); }\n    canvas { width: 100% !important; height: 300px !important; }\n    .instructions { font-size: 0.9rem; margin-top: 10px; }\n    footer {\n      text-align: center;\n      padding: 10px 0;\n      margin-top: 20px;\n    }\n    /* Subscription Card with slow transitional glow */\n    .subscription-card {\n      animation: slowTransition 30s infinite ease-in-out;\n    }\n    @keyframes slowTransition {\n      0%   { background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1)); }\n      50%  { background: linear-gradient(135deg, rgba(212,228,247,0.15), rgba(192,220,230,0.15)); }\n      100% { background: linear-gradient(135deg, rgba(244,247,249,0.1), rgba(224,231,239,0.1)); }\n    }\n    /* Modal Styles for Subscription Form */\n    .modal {\n      display: none;\n      position: fixed;\n      z-index: 200;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n      background-color: rgba(0, 0, 0, 0.5);\n    }\n    .modal-content {\n      background: transparent;\n      margin: 10% auto;\n      padding: 20px;\n      border-radius: 5px;\n      max-width: 500px;\n      position: relative;\n      border: 2px solid rgba(0,191,255,0.7);\n      animation: modalFade 1s ease-in-out;\n    }\n    @keyframes modalFade {\n      from { opacity: 0; transform: scale(0.9); }\n      to { opacity: 1; transform: scale(1); }\n    }\n    .modal-content h2 { margin-top: 0; }\n    .close {\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      color: rgba(0,0,0,0.7);\n      font-size: 28px;\n      font-weight: bold;\n      cursor: pointer;\n      transition: color 0.3s;\n    }\n    .close:hover { color: #000000; }\n    /* Media queries for low-end devices */\n    @media (max-width: 600px) {\n      header h1 { font-size: 2rem; }\n      nav a { font-size: 0.9rem; margin: 0 10px; }\n      .card { padding: 15px; }\n    }\n  </style>\n  <!-- Chart.js Library -->\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n  <!-- Header -->\n  <header>\n    <h1>@DONUTZ.AI - iBuilder</h1>\n    <p>Your Practical, Self‑Enhancing Business Dashboard</p>\n  </header>\n  \n  <!-- Navigation -->\n  <nav>\n    <a href=\"#overview\">Overview</a>\n    <a href=\"#dashboard\">Dashboard</a>\n    <a href=\"#calendar\">Calendar</a>\n    <a href=\"#subscribe\">Subscribe</a>\n  </nav>\n  \n  <!-- Section: Overview -->\n  <section id=\"overview\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Welcome</h2>\n        <p>\n          iBuilder delivers data‑driven business intelligence with advanced metrics and visual insights. Our platform provides real‑time inputs and multidimensional charts to empower strategic decisions.\n        </p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Dashboard -->\n  <section id=\"dashboard\">\n    <div class=\"container\">\n      <!-- Real‑Time Data Input Panel -->\n      <div class=\"card\">\n        <h2>Real‑Time Data Input</h2>\n        <!-- Core Metrics -->\n        <div class=\"input-group\">\n          <label for=\"revenueInput\">Revenue ($)</label>\n          <input type=\"number\" id=\"revenueInput\" placeholder=\"Revenue value\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"expensesInput\">Expenses ($)</label>\n          <input type=\"number\" id=\"expensesInput\" placeholder=\"Expenses value\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"logisticsInput\">Logistics Score (0–100)</label>\n          <input type=\"number\" id=\"logisticsInput\" placeholder=\"Logistics score\" min=\"0\" max=\"100\" />\n        </div>\n        <!-- Advanced Metrics -->\n        <h3>Advanced Metrics</h3>\n        <div class=\"input-group\">\n          <label for=\"cacInput\">Customer Acquisition Cost (CAC) ($)</label>\n          <input type=\"number\" id=\"cacInput\" placeholder=\"CAC\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"clvInput\">Customer Lifetime Value (CLV) ($)</label>\n          <input type=\"number\" id=\"clvInput\" placeholder=\"CLV\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"marketingSpendInput\">Marketing Spend ($)</label>\n          <input type=\"number\" id=\"marketingSpendInput\" placeholder=\"Marketing Spend\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"conversionRateInput\">Sales Conversion Rate (%)</label>\n          <input type=\"number\" id=\"conversionRateInput\" placeholder=\"Conversion Rate\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"inventoryTurnoverInput\">Inventory Turnover Ratio</label>\n          <input type=\"number\" id=\"inventoryTurnoverInput\" placeholder=\"Inventory Turnover\" step=\"0.1\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"employeeProductivityInput\">Employee Productivity (units/employee)</label>\n          <input type=\"number\" id=\"employeeProductivityInput\" placeholder=\"Employee Productivity\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"marketShareInput\">Market Share (%)</label>\n          <input type=\"number\" id=\"marketShareInput\" placeholder=\"Market Share\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"roiInput\">ROI (%)</label>\n          <input type=\"number\" id=\"roiInput\" placeholder=\"ROI\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"profitMarginInput\">Profit Margin (%)</label>\n          <input type=\"number\" id=\"profitMarginInput\" placeholder=\"Profit Margin\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"operatingExpensesInput\">Operating Expenses ($)</label>\n          <input type=\"number\" id=\"operatingExpensesInput\" placeholder=\"Operating Expenses\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"debtEquityInput\">Debt-to-Equity Ratio</label>\n          <input type=\"number\" id=\"debtEquityInput\" placeholder=\"Debt/Equity Ratio\" step=\"0.01\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"growthRateInput\">Growth Rate (%)</label>\n          <input type=\"number\" id=\"growthRateInput\" placeholder=\"Growth Rate\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"cashFlowInput\">Cash Flow ($)</label>\n          <input type=\"number\" id=\"cashFlowInput\" placeholder=\"Cash Flow\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"profitPerEmployeeInput\">Profit per Employee ($)</label>\n          <input type=\"number\" id=\"profitPerEmployeeInput\" placeholder=\"Profit per Employee\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"efficiencyScoreInput\">Overall Efficiency Score</label>\n          <input type=\"number\" id=\"efficiencyScoreInput\" placeholder=\"Efficiency Score\" />\n        </div>\n        <button class=\"update-btn\" onclick=\"updateDashboard()\">Update Dashboard</button>\n      </div>\n      \n      <!-- Analytics Charts Grid -->\n      <div class=\"dashboard-grid\">\n        <!-- Financial Overview: Pie Chart (Revenue, Expenses, Profit) -->\n        <div class=\"card\">\n          <h2>Financial Overview</h2>\n          <canvas id=\"financialChart\"></canvas>\n        </div>\n        <!-- Revenue vs. Expenses: Bar Chart (Revenue, Expenses, Profit, OpEx) -->\n        <div class=\"card\">\n          <h2>Revenue vs. Expenses</h2>\n          <canvas id=\"revExpChart\"></canvas>\n        </div>\n        <!-- Logistics & Operations: Doughnut Chart (Delivery, Procurement, Distribution) -->\n        <div class=\"card\">\n          <h2>Logistics & Operations</h2>\n          <canvas id=\"logisticsChart\"></canvas>\n        </div>\n        <!-- Business Structure: Radar Chart (6 Axes) -->\n        <div class=\"card\">\n          <h2>Business Structure</h2>\n          <canvas id=\"structureChart\"></canvas>\n        </div>\n        <!-- Real‑Time News Trends: Bar Chart (General & Business) -->\n        <div class=\"card\">\n          <h2>Real‑Time News Trends</h2>\n          <canvas id=\"newsChart\"></canvas>\n          <p class=\"instructions\">Articles published per hour.</p>\n        </div>\n        <!-- Revenue Trend Over Time: Line Chart with Dual Y‑Axes -->\n        <div class=\"card\">\n          <h2>Revenue Trend Over Time</h2>\n          <canvas id=\"revenueTrendChart\"></canvas>\n        </div>\n        <!-- Expense vs. Revenue Correlation: Scatter Plot with Dual X‑Axes -->\n        <div class=\"card\">\n          <h2>Expense vs. Revenue Correlation</h2>\n          <canvas id=\"correlationChart\"></canvas>\n        </div>\n        <!-- Advanced Business Metrics: Bubble Chart (8 Data Points) -->\n        <div class=\"card\">\n          <h2>Advanced Business Metrics</h2>\n          <canvas id=\"bubbleChart\"></canvas>\n        </div>\n        <!-- Aggregated Advanced Metrics: Bar Chart (16 Variables) -->\n        <div class=\"card\">\n          <h2>Aggregated Advanced Metrics</h2>\n          <canvas id=\"advancedMetricsChart\"></canvas>\n        </div>\n        <!-- Balanced Metrics Comparison: Multi‑Line Chart (5 Datasets) -->\n        <div class=\"card\">\n          <h2>Balanced Metrics Comparison</h2>\n          <canvas id=\"balancedComparisonChart\"></canvas>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Export Insights -->\n  <section id=\"export\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Export Insights</h2>\n        <p>Select a format to export the current dashboard data and visualizations:</p>\n        <button class=\"update-btn\" onclick=\"exportCSV()\">Export as CSV</button>\n        <button class=\"update-btn\" onclick=\"exportPDF()\">Export as PDF</button>\n        <button class=\"update-btn\" onclick=\"exportImage('png')\">Export as PNG</button>\n        <button class=\"update-btn\" onclick=\"exportImage('jpg')\">Export as JPG</button>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Calendar -->\n  <section id=\"calendar\">\n    <div class=\"container\">\n      <div class=\"card\">\n        <h2>Add Event to Calendar</h2>\n        <div class=\"input-group\">\n          <label for=\"eventTitle\">Event Title</label>\n          <input type=\"text\" id=\"eventTitle\" placeholder=\"Quarterly Review\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventDateTime\">Event Date &amp; Time</label>\n          <input type=\"datetime-local\" id=\"eventDateTime\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventLocation\">Location</label>\n          <input type=\"text\" id=\"eventLocation\" placeholder=\"Conference Room\" />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"eventDescription\">Description</label>\n          <textarea id=\"eventDescription\" placeholder=\"Brief description\"></textarea>\n        </div>\n        <div class=\"input-group\">\n          <label>\n            <input type=\"checkbox\" id=\"repeatMonthly\" />\n            Set Monthly Repeat\n          </label>\n        </div>\n        <button class=\"update-btn\" onclick=\"addToCalendar()\">Add to Calendar</button>\n        <p class=\"instructions\">Download and import the event file into your calendar app.</p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Section: Subscribe -->\n  <section id=\"subscribe\">\n    <div class=\"container\">\n      <div class=\"card subscription-card\">\n        <h2>Monthly Subscription</h2>\n        <p>\n          Gain full access to our profit‑tuned dashboard and advanced business tools. Packages range from as low as\n          <strong>$4.99/month</strong> to <strong>$39.99/month</strong>.\n        </p>\n        <button class=\"update-btn\" id=\"openModalBtn\">Subscribe Now</button>\n        <p class=\"instructions\">Click to select your package and provide your details.</p>\n      </div>\n    </div>\n  </section>\n  \n  <!-- Subscription Modal Popup -->\n  <div id=\"subscriptionModal\" class=\"modal\">\n    <div class=\"modal-content\">\n      <span class=\"close\">&times;</span>\n      <h2>Subscribe</h2>\n      <form id=\"subscriptionForm\">\n        <div class=\"input-group\">\n          <label for=\"subName\">Your Name</label>\n          <input type=\"text\" id=\"subName\" placeholder=\"Name\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subCompany\">Company Name</label>\n          <input type=\"text\" id=\"subCompany\" placeholder=\"Company\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subPhone\">Phone Number</label>\n          <input type=\"text\" id=\"subPhone\" placeholder=\"Phone\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subEmail\">Email Address</label>\n          <input type=\"email\" id=\"subEmail\" placeholder=\"Email\" required />\n        </div>\n        <div class=\"input-group\">\n          <label for=\"subPackage\">Subscription Package</label>\n          <select id=\"subPackage\" required>\n            <option value=\"economy\">Economy - $4.99/month</option>\n            <option value=\"basic\">Basic - $9.99/month</option>\n            <option value=\"standard\">Standard - $14.99/month</option>\n            <option value=\"premium\">Premium - $19.99/month</option>\n            <option value=\"elite\">Elite - $24.99/month</option>\n            <option value=\"ultimate\">Ultimate - $29.99/month</option>\n            <option value=\"enterprise\">Enterprise - $39.99/month</option>\n          </select>\n        </div>\n        <button type=\"submit\" class=\"update-btn\">Submit Subscription</button>\n      </form>\n    </div>\n  </div>\n  \n  <!-- Footer -->\n  <footer>\n    &copy; 2025 @DONUTZ.AI. All rights reserved.\n  </footer>\n  \n  <!-- JavaScript: Enhanced Charts, Calendar, RSS, Modal, Subscription, Export Feature, and Throttled Scroll Handler -->\n  <script>\n    /***** UTILITY FUNCTIONS *****/\n    function randomValue(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    /***** GLOBAL DATA VARIABLES *****/\n    let revenue = randomValue(50000, 200000);\n    let expenses = randomValue(30000, 150000);\n    let logisticsScore = randomValue(50, 100);\n    \n    /***** CHART INSTANCES *****/\n    let financialChart, revExpChart, logisticsChart, structureChart, newsChart;\n    let revenueTrendChart, correlationChart, bubbleChart, advancedMetricsChart, balancedComparisonChart;\n    \n    /***** COLOR PALETTE *****/\n    const colorPalette = [\n      \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#673AB7\", \"#3F51B5\", \n      \"#2196F3\", \"#03A9F4\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \n      \"#8BC34A\", \"#CDDC39\", \"#FFEB3B\", \"#FFC107\", \"#FF9800\", \n      \"#FF5722\", \"#795548\", \"#9E9E9E\", \"#607D8B\"\n    ];\n    \n    /***** CHART INITIALIZATION *****/\n    function initCharts() {\n      // Global tooltip options for advanced interactivity\n      const commonOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            enabled: true,\n            callbacks: {\n              label: function(context) {\n                return context.dataset.label + \": \" + context.formattedValue;\n              },\n              title: function(context) {\n                return \"Data for \" + context[0].label;\n              }\n            }\n          },\n          legend: { display: true, position: 'top' },\n          title: { display: true }\n        }\n      };\n      \n      /* --- Financial Overview Pie Chart --- */\n      // Profit = Revenue minus Expenses (if positive)\n      const profit = revenue > expenses ? revenue - expenses : 0;\n      const ctxFinancial = document.getElementById('financialChart').getContext('2d');\n      financialChart = new Chart(ctxFinancial, {\n        type: 'pie',\n        data: {\n          labels: ['Revenue', 'Expenses', 'Profit'],\n          datasets: [{\n            data: [revenue, expenses, profit],\n            backgroundColor: [colorPalette[5], colorPalette[0], colorPalette[6]]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Financial Overview' } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Revenue vs. Expenses Bar Chart --- */\n      // Four bars: Revenue, Expenses, Profit, and Operating Expenses.\n      const opEx = document.getElementById('operatingExpensesInput').value ? parseInt(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000);\n      const ctxRevExp = document.getElementById('revExpChart').getContext('2d');\n      revExpChart = new Chart(ctxRevExp, {\n        type: 'bar',\n        data: {\n          labels: ['Revenue', 'Expenses', 'Profit', 'OpEx'],\n          datasets: [{\n            label: 'USD',\n            data: [revenue, expenses, profit, opEx],\n            backgroundColor: [\n              colorPalette[5], colorPalette[0], colorPalette[6], colorPalette[14]\n            ],\n            borderColor: [\n              colorPalette[5], colorPalette[0], colorPalette[6], colorPalette[14]\n            ],\n            borderWidth: 2\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Revenue vs. Expenses' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'USD' } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Logistics & Operations Doughnut Chart --- */\n      // Three segments: Delivery, Procurement, Distribution.\n      let procurement = randomValue(10, Math.min(40, 100 - logisticsScore));\n      let distribution = 100 - logisticsScore - procurement;\n      if(distribution < 0) distribution = 0;\n      const ctxLogistics = document.getElementById('logisticsChart').getContext('2d');\n      logisticsChart = new Chart(ctxLogistics, {\n        type: 'doughnut',\n        data: {\n          labels: ['Delivery', 'Procurement', 'Distribution'],\n          datasets: [{\n            data: [logisticsScore, procurement, distribution],\n            backgroundColor: [colorPalette[2], colorPalette[3], colorPalette[7]]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Logistics & Operations' } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Business Structure Radar Chart --- */\n      // Six axes: Sales, Marketing, Operations, R&D, Innovation, Customer Service.\n      const ctxStructure = document.getElementById('structureChart').getContext('2d');\n      structureChart = new Chart(ctxStructure, {\n        type: 'radar',\n        data: {\n          labels: ['Sales', 'Marketing', 'Operations', 'R&D', 'Innovation', 'Customer Service'],\n          datasets: [{\n            label: 'Dept Allocation',\n            data: Array.from({ length: 6 }, () => randomValue(10, 50)),\n            backgroundColor: 'rgba(0,191,255,0.3)',\n            borderColor: colorPalette[5],\n            pointBackgroundColor: colorPalette[5]\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Business Structure' } },\n          scales: { r: { beginAtZero: true, title: { display: true, text: 'Score' } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Real‑Time News Trends Bar Chart --- */\n      // Two datasets: General News and Business News.\n      const generalNewsData = Array.from({ length: 24 }, () => randomValue(0, 10));\n      const businessNewsData = Array.from({ length: 24 }, () => randomValue(0, 5));\n      const ctxNews = document.getElementById('newsChart').getContext('2d');\n      newsChart = new Chart(ctxNews, {\n        type: 'bar',\n        data: {\n          labels: Array.from({ length: 24 }, (_, i) => i.toString()),\n          datasets: [\n            {\n              label: 'General News',\n              data: generalNewsData,\n              backgroundColor: Array.from({ length: 24 }, (_, i) => colorPalette[i % colorPalette.length]),\n              borderColor: Array.from({ length: 24 }, (_, i) => colorPalette[i % colorPalette.length]),\n              borderWidth: 2\n            },\n            {\n              label: 'Business News',\n              data: businessNewsData,\n              backgroundColor: Array.from({ length: 24 }, (_, i) => colorPalette[(i + 5) % colorPalette.length]),\n              borderColor: Array.from({ length: 24 }, (_, i) => colorPalette[(i + 5) % colorPalette.length]),\n              borderWidth: 2\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Real‑Time News Trends' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'Articles' }, ticks: { stepSize: 1 } } },\n          animation: { duration: 2000, easing: 'easeOutBounce' }\n        })\n      });\n      \n      /* --- Revenue Trend Over Time Line Chart with Dual Y‑Axes --- */\n      // Two lines: Revenue Trend and Profit Trend. Revenue uses left y‑axis; Profit uses right y‑axis.\n      let revenueTrendData = Array.from({ length: 12 }, () => randomValue(50000, 200000));\n      let profitTrendData = Array.from({ length: 12 }, () => randomValue(20000, 100000));\n      const ctxRevenueTrend = document.getElementById('revenueTrendChart').getContext('2d');\n      revenueTrendChart = new Chart(ctxRevenueTrend, {\n        type: 'line',\n        data: {\n          labels: ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'],\n          datasets: [\n            {\n              label: 'Revenue Trend',\n              data: revenueTrendData,\n              fill: false,\n              // Dynamic vibrant color segments for Revenue\n              borderColor: function(ctx) {\n                const revenueSegmentColors = [\"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ffeb3b\", \"#ffc107\", \"#ff9800\", \"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\", \"#2196f3\"];\n                return revenueSegmentColors[ctx.p0DataIndex % revenueSegmentColors.length];\n              },\n              yAxisID: 'y',\n              tension: 0.3\n            },\n            {\n              label: 'Profit Trend',\n              data: profitTrendData,\n              fill: false,\n              borderColor: colorPalette[6],\n              yAxisID: 'y1',\n              tension: 0.3\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Revenue Trend Over Time' } },\n          scales: {\n            y: {\n              type: 'linear',\n              position: 'left',\n              beginAtZero: true,\n              title: { display: true, text: 'Revenue ($)' },\n              grid: { color: 'rgba(76,175,80,0.2)' }\n            },\n            y1: {\n              type: 'linear',\n              position: 'right',\n              beginAtZero: true,\n              title: { display: true, text: 'Profit ($)' },\n              grid: { drawOnChartArea: false },\n              ticks: { color: colorPalette[6] }\n            }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Expense vs. Revenue Correlation Scatter Plot with Dual X‑Axes --- */\n      // Two datasets: one for Expense vs Revenue (primary x‑axis) and one for Marketing Spend vs Revenue (secondary x‑axis).\n      let scatterData = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(30000, 150000)\n      }));\n      let marketingScatterData = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(1000, 10000)\n      }));\n      const ctxCorrelation = document.getElementById('correlationChart').getContext('2d');\n      correlationChart = new Chart(ctxCorrelation, {\n        type: 'scatter',\n        data: {\n          datasets: [\n            {\n              label: 'Expense vs Revenue',\n              data: scatterData,\n              backgroundColor: colorPalette[0],\n              xAxisID: 'x'\n            },\n            {\n              label: 'Marketing Spend vs Revenue',\n              data: marketingScatterData,\n              backgroundColor: colorPalette[14],\n              xAxisID: 'x1'\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Expense vs. Revenue Correlation' } },\n          scales: {\n            x: {\n              type: 'linear',\n              position: 'bottom',\n              title: { display: true, text: 'Revenue ($)' },\n              grid: { color: 'rgba(76,175,80,0.2)' }\n            },\n            x1: {\n              type: 'linear',\n              position: 'top',\n              title: { display: true, text: 'Alternate Revenue Scale ($)' },\n              grid: { drawOnChartArea: false },\n              ticks: { color: colorPalette[14] }\n            },\n            y: {\n              title: { display: true, text: 'Value ($)' }\n            }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Business Metrics Bubble Chart --- */\n      // 8 data points with varied, popping colors.\n      let bubbleData = Array.from({ length: 8 }, () => ({\n        x: randomValue(10, 100),\n        y: randomValue(10, 100),\n        r: randomValue(5, 20)\n      }));\n      const ctxBubble = document.getElementById('bubbleChart').getContext('2d');\n      bubbleChart = new Chart(ctxBubble, {\n        type: 'bubble',\n        data: {\n          datasets: [{\n            label: 'Business Metrics',\n            data: bubbleData,\n            backgroundColor: Array.from({ length: 8 }, (_, i) => colorPalette[i % colorPalette.length])\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Business Metrics Bubble Chart' } },\n          scales: {\n            x: { title: { display: true, text: 'Metric X' } },\n            y: { title: { display: true, text: 'Metric Y' } }\n          },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Aggregated Advanced Metrics Bar Chart --- */\n      // 16 metrics (16th is \"Cust Sat\")\n      const ctxAdvanced = document.getElementById('advancedMetricsChart').getContext('2d');\n      advancedMetricsChart = new Chart(ctxAdvanced, {\n        type: 'bar',\n        data: {\n          labels: [\"CAC\", \"CLV\", \"Mkt Spend\", \"Conv Rate\", \"Inv Turnover\", \"Emp Prod\", \"Mkt Share\", \"ROI\", \"Profit Margin\", \"Op Ex\", \"Debt/Equity\", \"Growth\", \"Cash Flow\", \"Profit/Emp\", \"Efficiency\", \"Cust Sat\"],\n          datasets: [{\n            label: \"Advanced Metrics\",\n            data: Array.from({ length: 16 }, () => randomValue(1, 100)),\n            backgroundColor: Array.from({ length: 16 }, (_, i) => colorPalette[i % colorPalette.length]),\n            borderColor: Array.from({ length: 16 }, (_, i) => colorPalette[i % colorPalette.length]),\n            borderWidth: 2\n          }]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Aggregated Advanced Metrics' } },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n      \n      /* --- Balanced Metrics Comparison (Multi‑Line Chart) --- */\n      // Five datasets: Revenue, Expenses, Marketing Spend, Profit Margin, Customer Satisfaction.\n      const ctxBalanced = document.getElementById('balancedComparisonChart').getContext('2d');\n      balancedComparisonChart = new Chart(ctxBalanced, {\n        type: 'line',\n        data: {\n          labels: ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'],\n          datasets: [\n            {\n              label: 'Revenue',\n              data: Array.from({length: 12}, () => randomValue(50000,200000)),\n              borderColor: colorPalette[5],\n              backgroundColor: 'rgba(76,175,80,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Expenses',\n              data: Array.from({length: 12}, () => randomValue(30000,150000)),\n              borderColor: colorPalette[0],\n              backgroundColor: 'rgba(244,67,54,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Marketing Spend',\n              data: Array.from({length: 12}, () => randomValue(1000,10000)),\n              borderColor: colorPalette[14],\n              backgroundColor: 'rgba(255,152,0,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Profit Margin',\n              data: Array.from({length: 12}, () => randomValue(5,50)),\n              borderColor: colorPalette[2],\n              backgroundColor: 'rgba(156,39,176,0.2)',\n              tension: 0.3\n            },\n            {\n              label: 'Cust Sat',\n              data: Array.from({length: 12}, () => randomValue(1,100)),\n              borderColor: colorPalette[7],\n              backgroundColor: 'rgba(0,188,212,0.2)',\n              tension: 0.3\n            }\n          ]\n        },\n        options: Object.assign({}, commonOptions, {\n          plugins: { title: { display: true, text: 'Balanced Metrics Comparison' } },\n          scales: { y: { beginAtZero: true, title: { display: true, text: 'Value' } } },\n          animation: { duration: 1500, easing: 'easeInOutQuad' }\n        })\n      });\n    }\n    \n    /***** DASHBOARD UPDATE FUNCTIONS *****/\n    function updateCharts() {\n      // Update computed profit\n      const profit = revenue > expenses ? revenue - expenses : 0;\n      financialChart.data.datasets[0].data = [revenue, expenses, profit];\n      financialChart.update();\n      \n      revExpChart.data.datasets[0].data = [revenue, expenses, profit, (document.getElementById('operatingExpensesInput').value ? parseInt(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000))];\n      revExpChart.update();\n      \n      logisticsChart.data.datasets[0].data = [logisticsScore, randomValue(10, Math.min(40, 100 - logisticsScore)), Math.max(0, 100 - logisticsScore - randomValue(10, Math.min(40, 100 - logisticsScore)))];\n      logisticsChart.update();\n      \n      structureChart.data.datasets[0].data = Array.from({ length: 6 }, () => randomValue(10, 50));\n      structureChart.update();\n      \n      revenueTrendChart.data.datasets[0].data = Array.from({ length: 12 }, () => randomValue(50000, 200000));\n      revenueTrendChart.data.datasets[1].data = Array.from({ length: 12 }, () => randomValue(20000, 100000));\n      revenueTrendChart.update();\n      \n      correlationChart.data.datasets[0].data = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(30000, 150000)\n      }));\n      correlationChart.data.datasets[1].data = Array.from({ length: 20 }, () => ({\n        x: randomValue(50000, 200000),\n        y: randomValue(1000, 10000)\n      }));\n      correlationChart.update();\n      \n      bubbleChart.data.datasets[0].data = Array.from({ length: 8 }, () => ({\n        x: randomValue(10, 100),\n        y: randomValue(10, 100),\n        r: randomValue(5, 20)\n      }));\n      bubbleChart.update();\n    }\n    \n    function updateDashboard() {\n      // Core metrics\n      revenue = document.getElementById('revenueInput').value ? parseInt(document.getElementById('revenueInput').value) : randomValue(50000, 200000);\n      expenses = document.getElementById('expensesInput').value ? parseInt(document.getElementById('expensesInput').value) : randomValue(30000, 150000);\n      logisticsScore = document.getElementById('logisticsInput').value ? parseInt(document.getElementById('logisticsInput').value) : randomValue(50, 100);\n      \n      // Advanced metrics\n      var cac = document.getElementById('cacInput').value ? parseFloat(document.getElementById('cacInput').value) : randomValue(10, 200);\n      var clv = document.getElementById('clvInput').value ? parseFloat(document.getElementById('clvInput').value) : randomValue(100, 2000);\n      var marketingSpend = document.getElementById('marketingSpendInput').value ? parseFloat(document.getElementById('marketingSpendInput').value) : randomValue(1000, 10000);\n      var conversionRate = document.getElementById('conversionRateInput').value ? parseFloat(document.getElementById('conversionRateInput').value) : randomValue(1, 20);\n      var inventoryTurnover = document.getElementById('inventoryTurnoverInput').value ? parseFloat(document.getElementById('inventoryTurnoverInput').value) : randomValue(1, 10);\n      var employeeProductivity = document.getElementById('employeeProductivityInput').value ? parseFloat(document.getElementById('employeeProductivityInput').value) : randomValue(10, 100);\n      var marketShare = document.getElementById('marketShareInput').value ? parseFloat(document.getElementById('marketShareInput').value) : randomValue(1, 50);\n      var roi = document.getElementById('roiInput').value ? parseFloat(document.getElementById('roiInput').value) : randomValue(0, 100);\n      var profitMargin = document.getElementById('profitMarginInput').value ? parseFloat(document.getElementById('profitMarginInput').value) : randomValue(5, 50);\n      var operatingExpenses = document.getElementById('operatingExpensesInput').value ? parseFloat(document.getElementById('operatingExpensesInput').value) : randomValue(1000, 50000);\n      var debtEquity = document.getElementById('debtEquityInput').value ? parseFloat(document.getElementById('debtEquityInput').value) : (Math.random() * 1.9 + 0.1).toFixed(2);\n      var growthRate = document.getElementById('growthRateInput').value ? parseFloat(document.getElementById('growthRateInput').value) : randomValue(0, 30);\n      var cashFlow = document.getElementById('cashFlowInput').value ? parseFloat(document.getElementById('cashFlowInput').value) : randomValue(5000, 50000);\n      var profitPerEmployee = document.getElementById('profitPerEmployeeInput').value ? parseFloat(document.getElementById('profitPerEmployeeInput').value) : randomValue(1000, 10000);\n      var efficiencyScore = document.getElementById('efficiencyScoreInput').value ? parseFloat(document.getElementById('efficiencyScoreInput').value) : randomValue(1, 100);\n      \n      // Update Advanced Metrics Chart with 16 variables (the 16th is \"Cust Sat\")\n      var advancedValues = [cac, clv, marketingSpend, conversionRate, inventoryTurnover, employeeProductivity, marketShare, roi, profitMargin, operatingExpenses, debtEquity, growthRate, cashFlow, profitPerEmployee, efficiencyScore, randomValue(1,100)];\n      advancedMetricsChart.data.datasets[0].data = advancedValues;\n      advancedMetricsChart.update();\n      \n      updateCharts();\n      \n      // Update Balanced Metrics Comparison (Multi‑Line Chart)\n      balancedComparisonChart.data.datasets[0].data = Array.from({length: 12}, () => randomValue(50000,200000));\n      balancedComparisonChart.data.datasets[1].data = Array.from({length: 12}, () => randomValue(30000,150000));\n      balancedComparisonChart.data.datasets[2].data = Array.from({length: 12}, () => randomValue(1000,10000));\n      balancedComparisonChart.data.datasets[3].data = Array.from({length: 12}, () => randomValue(5,50));\n      balancedComparisonChart.data.datasets[4].data = Array.from({length: 12}, () => randomValue(1,100));\n      balancedComparisonChart.update();\n    }\n    \n    /***** REAL‑TIME RSS FEED FUNCTIONALITY *****/\n    function fetchNewsData() {\n      const rssUrl = \"https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml\";\n      const proxyUrl = \"https://api.allorigins.hexocode.repl.co/get?disableCache=true&url=\" + encodeURIComponent(rssUrl);\n      fetch(proxyUrl)\n        .then(response => response.json())\n        .then(data => {\n          const parser = new DOMParser();\n          const xmlDoc = parser.parseFromString(data.contents, \"text/xml\");\n          const items = xmlDoc.querySelectorAll(\"item\");\n          const hoursCount = new Array(24).fill(0);\n          items.forEach(item => {\n            const pubDateText = item.querySelector(\"pubDate\").textContent;\n            const pubDate = new Date(pubDateText);\n            const hour = pubDate.getHours();\n            hoursCount[hour]++;\n          });\n          newsChart.data.datasets[0].data = hoursCount;\n          newsChart.update();\n        })\n        .catch(error => console.error(\"Error fetching RSS feed:\", error));\n    }\n    \n    /***** CALENDAR INTEGRATION *****/\n    function addToCalendar() {\n      const title = document.getElementById('eventTitle').value.trim();\n      const dtInput = document.getElementById('eventDateTime').value;\n      const location = document.getElementById('eventLocation').value.trim();\n      const description = document.getElementById('eventDescription').value.trim();\n      const repeat = document.getElementById('repeatMonthly').checked;\n      \n      if (!title || !dtInput) {\n        alert(\"Please provide both an event title and date/time.\");\n        return;\n      }\n      \n      const eventDate = new Date(dtInput);\n      function pad(n) { return n < 10 ? '0' + n : n; }\n      const dtStart = `${eventDate.getUTCFullYear()}${pad(eventDate.getUTCMonth()+1)}${pad(eventDate.getUTCDate())}T${pad(eventDate.getUTCHours())}${pad(eventDate.getUTCMinutes())}${pad(eventDate.getUTCSeconds())}Z`;\n      \n      let icsContent = \"BEGIN:VCALENDAR\r\nVERSION:2.0\r\nBEGIN:VEVENT\r\n\";\n      const uid = Date.now() + \"@\" + window.location.hostname;\n      icsContent += \"UID:\" + uid + \"\r\n\";\n      \n      const now = new Date();\n      const dtStamp = `${now.getUTCFullYear()}${pad(now.getUTCMonth()+1)}${pad(now.getUTCDate())}T${pad(now.getUTCHours())}${pad(now.getUTCMinutes())}${pad(now.getUTCSeconds())}Z`;\n      icsContent += \"DTSTAMP:\" + dtStamp + \"\r\n\";\n      \n      icsContent += \"DTSTART:\" + dtStart + \"\r\n\";\n      icsContent += \"SUMMARY:\" + title + \"\r\n\";\n      if (location) { icsContent += \"LOCATION:\" + location + \"\r\n\"; }\n      if (description) { icsContent += \"DESCRIPTION:\" + description + \"\r\n\"; }\n      if (repeat) { icsContent += \"RRULE:FREQ=MONTHLY;INTERVAL=1\r\n\"; }\n      icsContent += \"END:VEVENT\r\nEND:VCALENDAR\";\n      \n      const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = \"event.ics\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n    \n    /***** MODAL FUNCTIONALITY FOR SUBSCRIPTION FORM *****/\n    var modal = document.getElementById(\"subscriptionModal\");\n    var openModalBtn = document.getElementById(\"openModalBtn\");\n    var closeSpan = document.getElementsByClassName(\"close\")[0];\n    \n    openModalBtn.onclick = function() { modal.style.display = \"block\"; }\n    closeSpan.onclick = function() { modal.style.display = \"none\"; }\n    window.onclick = function(event) { if (event.target == modal) { modal.style.display = \"none\"; } }\n    \n    document.getElementById(\"subscriptionForm\").addEventListener(\"submit\", function(e){\n      e.preventDefault();\n      var name = document.getElementById(\"subName\").value;\n      var company = document.getElementById(\"subCompany\").value;\n      var phone = document.getElementById(\"subPhone\").value;\n      var email = document.getElementById(\"subEmail\").value;\n      var subscriptionPackage = document.getElementById(\"subPackage\").value;\n      // Build a mailto link to send subscription details to iBuilder@dascient.com\n      var mailtoLink = \"mailto:iBuilder@dascient.com\" +\n                       \"?subject=\" + encodeURIComponent(\"New Subscription Request\") +\n                       \"&body=\" + encodeURIComponent(\"Name: \" + name + \"\nCompany: \" + company + \"\nPhone: \" + phone + \"\nEmail: \" + email + \"\nPackage: \" + subscriptionPackage);\n      window.location.href = mailtoLink;\n      modal.style.display = \"none\";\n    });\n    \n    /***** EXPORT FEATURE *****/\n    function exportCSV() {\n      let csvContent = \"data:text/csv;charset=utf-8,Metric,Value\n\";\n      const inputs = [\n        { label: \"Revenue\", id: \"revenueInput\" },\n        { label: \"Expenses\", id: \"expensesInput\" },\n        { label: \"Logistics Score\", id: \"logisticsInput\" },\n        { label: \"CAC\", id: \"cacInput\" },\n        { label: \"CLV\", id: \"clvInput\" },\n        { label: \"Marketing Spend\", id: \"marketingSpendInput\" },\n        { label: \"Conversion Rate\", id: \"conversionRateInput\" },\n        { label: \"Inventory Turnover\", id: \"inventoryTurnoverInput\" },\n        { label: \"Employee Productivity\", id: \"employeeProductivityInput\" },\n        { label: \"Market Share\", id: \"marketShareInput\" },\n        { label: \"ROI\", id: \"roiInput\" },\n        { label: \"Profit Margin\", id: \"profitMarginInput\" },\n        { label: \"Operating Expenses\", id: \"operatingExpensesInput\" },\n        { label: \"Debt/Equity\", id: \"debtEquityInput\" },\n        { label: \"Growth Rate\", id: \"growthRateInput\" },\n        { label: \"Cash Flow\", id: \"cashFlowInput\" },\n        { label: \"Profit per Employee\", id: \"profitPerEmployeeInput\" },\n        { label: \"Efficiency Score\", id: \"efficiencyScoreInput\" }\n      ];\n      inputs.forEach(item => {\n        const value = document.getElementById(item.id).value || \"\";\n        csvContent += `${item.label},${value}\n`;\n      });\n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement(\"a\");\n      link.setAttribute(\"href\", encodedUri);\n      link.setAttribute(\"download\", \"dashboard_data.csv\");\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n    \n    function exportPDF() {\n      window.print();\n    }\n    \n    function exportImage(format) {\n      html2canvas(document.querySelector('.container')).then(canvas => {\n        let image = canvas.toDataURL(\"image/\" + format);\n        let link = document.createElement('a');\n        link.href = image;\n        link.download = \"dashboard_export.\" + format;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      });\n    }\n    \n    /***** ACTIVE NAVIGATION HIGHLIGHT WITH THROTTLING *****/\n    function throttle(callback, delay) {\n      let lastCall = 0;\n      return function() {\n        const now = Date.now();\n        if (now - lastCall < delay) return;\n        lastCall = now;\n        callback();\n      };\n    }\n    const sections = document.querySelectorAll(\"section\");\n    const navLinks = document.querySelectorAll(\"nav a\");\n    window.addEventListener(\"scroll\", throttle(() => {\n      let current = \"\";\n      sections.forEach(section => {\n        const sectionTop = section.offsetTop;\n        if (pageYOffset >= sectionTop - 60) { current = section.getAttribute(\"id\"); }\n      });\n      navLinks.forEach(link => {\n        link.classList.remove(\"active\");\n        if (link.getAttribute(\"href\").substring(1) === current) { link.classList.add(\"active\"); }\n      });\n    }, 100));\n    \n    /***** INITIALIZATION *****/\n    window.onload = () => {\n      initCharts();\n      updateCharts();\n      fetchNewsData();\n      // Auto-update analytics every 30 seconds\n      setInterval(() => {\n        revenue = randomValue(50000, 200000);\n        expenses = randomValue(30000, 150000);\n        logisticsScore = randomValue(50, 100);\n        updateDashboard();\n      }, 30000);\n      // Refresh news feed every 60 seconds\n      setInterval(fetchNewsData, 60000);\n    };\n  </script>\n</body>\n</html>\n</pre>"},"metadata":{}}],"execution_count":2},{"id":"ef04557a-79cf-41e5-aec6-95aac97d37c8","cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}